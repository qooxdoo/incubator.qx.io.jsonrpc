{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/graphql/Client.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "init",
    "setUrl",
    "headers",
    "method",
    "__init",
    "properties",
    "check",
    "authentication",
    "nullable",
    "events",
    "members",
    "send",
    "request",
    "auth",
    "getAuthentication",
    "getAuthHeaders",
    "forEach",
    "header",
    "key",
    "value",
    "body",
    "toString",
    "response",
    "fetch",
    "getUrl",
    "ok",
    "io",
    "exception",
    "Transport",
    "statusText",
    "status",
    "responseData",
    "json",
    "graphQlResponse",
    "graphql",
    "protocol",
    "Response",
    "getErrors",
    "_handleErrors",
    "getData",
    "errors",
    "error",
    "Protocol",
    "message",
    "toObject",
    "fireDataEvent",
    "Client"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a simple GraphQl client (https://graphql.org/).\n * For transport, it is based on internally on the fetch API\n * (https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * which, if needed, must be directly configured via the `init` parameter of the\n * constructor, until a more generalized qx.io API has been developed.\n *\n */\nqx.Class.define(\"qx.io.graphql.Client\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param {String} url The url of the GraphQL endpoint\n   * @param {object} init A map of configuration values, see\n   * https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n   * This parameter is used to configure the underlying fetch\n   * API and might be removed in a future. If you provide custom headers, you must\n   * set \"Content-Type\" and \"Accept\" to \"application/json\" yourself.\n   */\n  construct: function (url, init={}) {\n    this.base(arguments);\n    this.setUrl(url);\n    let headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n    init.method = \"POST\";\n    init.headers = init.headers || headers;\n    this.__init = init;\n  },\n\n  properties: {\n    /**\n     * The URL of the GraphQl endpoint\n     */\n    url: {\n      check: \"String\"\n    },\n\n    /**\n     * Optional authentication object\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  events: {\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     * Event fired when a message is received from the endpoint. Event data\n     * is an UTF-8 encoded string\n     */\n    \"error\" : \"qx.event.type.Data\"\n  },\n\n  members: {\n\n    /**\n     * Stores the `init` parameter of the constructor\n     * @type {Object}\n     */\n    __init : null,\n\n    /**\n     * Send the given GraphQl query. See https://graphql.org/learn/queries/\n     *\n     * @param {qx.io.graphql.protocol.Request} request The GraphQl request object.\n     * @return {qx.Promise} Promise that resolves with the data\n     * @ignore(fetch)\n     */\n    async send(request) {\n      let auth = this.getAuthentication();\n      if (auth) {\n        auth.getAuthHeaders().forEach(header => {\n          this.__init.headers[header.key] = header.value\n        });\n      }\n      this.__init.body = request.toString();\n      let response = await fetch(this.getUrl(), this.__init);\n      if (!response.ok) {\n        throw new qx.io.exception.Transport(response.statusText, response.status);\n      }\n      let responseData = await response.json();\n      let graphQlResponse = new qx.io.graphql.protocol.Response(responseData);\n      if (graphQlResponse.getErrors()) {\n        this._handleErrors(graphQlResponse);\n      }\n      return graphQlResponse.getData();\n    },\n\n    /**\n     * Handle the errors reported by the GraphQL endpoint. The response\n     * can contain several errors, but we can only throw one of them.\n     * However, we can fire an event for each error, which might be useful\n     * if they are to be logged. The errors that are thrown or fired as\n     * event data contain the original response object in the `data` property\n     *\n     * @param {qx.io.graphql.protocol.Response} response The response object\n     */\n    _handleErrors(response) {\n      let errors = response.getErrors();\n      errors.forEach(error => {\n        let exception = new qx.io.exception.Protocol(error.message, null, response.toObject());\n        this.fireDataEvent(\"error\", exception);\n      });\n      throw new qx.io.exception.Protocol(errors[0].message, null, response.toObject());\n    }\n  }\n});\n"
  ]
}