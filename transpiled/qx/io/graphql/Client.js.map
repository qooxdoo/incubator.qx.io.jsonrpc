{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/graphql/Client.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractClient",
    "statics",
    "registerTransport",
    "events",
    "construct",
    "transportOrUri",
    "selectTransport",
    "members",
    "send",
    "request",
    "getTransport",
    "Promise",
    "resolve",
    "reject",
    "addListenerOnce",
    "evt",
    "debug",
    "getData",
    "responseData",
    "lang",
    "Json",
    "parse",
    "graphQlResponse",
    "graphql",
    "protocol",
    "Response",
    "getErrors",
    "_handleErrors",
    "e",
    "error",
    "exception",
    "Transport",
    "message",
    "toString",
    "catch",
    "response",
    "errors",
    "forEach",
    "Protocol",
    "toObject",
    "fireDataEvent",
    "environment",
    "Client"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a simple GraphQl client (https://graphql.org/).\n * For transport, it is based on internally on the fetch API\n * (https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * which, if needed, must be directly configured via the `init` parameter of the\n * constructor, until a more generalized qx.io API has been developed.\n *\n */\nqx.Class.define(\"qx.io.graphql.Client\", {\n\n  extend: qx.io.transport.AbstractClient,\n\n  statics: {\n    registerTransport : qx.io.transport.AbstractClient.registerTransport\n  },\n\n  events: {\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     */\n    \"error\" : \"qx.event.type.Data\"\n  },\n\n  /**\n   * @param {qx.io.transport.ITransport|String} transportOrUri\n   *    Transport object, which must implement {@link qx.io.transport.ITransport}\n   *    or a string URI, which will trigger auto-detection of transport, as long as an\n   *    appropriate transport has been registered with the static `registerTransport()` function.\n   */\n  construct: function (transportOrUri) {\n    this.base(arguments);\n    this.selectTransport(transportOrUri);\n  },\n\n  members: {\n\n    /**\n     * Send the given GraphQl query. See https://graphql.org/learn/queries/\n     *\n     * @param {qx.io.graphql.protocol.Request} request The GraphQl request object.\n     * @return {qx.Promise} Promise that resolves with the data\n     */\n    async send(request) {\n      let transport = this.getTransport();\n      return new Promise((resolve, reject) => {\n        transport.addListenerOnce(\"message\", evt => {\n          try{\n            if (qx.core.Environment.get(\"qx.io.graphql.debug\")) {\n              this.debug( \"<<< Received: \" + evt.getData());\n            }\n            let responseData = qx.lang.Json.parse(evt.getData());\n            let graphQlResponse = new qx.io.graphql.protocol.Response(responseData);\n            if (graphQlResponse.getErrors()) {\n              return reject(this._handleErrors(graphQlResponse));\n            }\n            return resolve(graphQlResponse.getData());\n          } catch (e) {\n            this.error(e);\n            return reject(new qx.io.exception.Transport(e.message));\n          }\n        });\n        if (qx.core.Environment.get(\"qx.io.graphql.debug\")) {\n          this.debug(\">>>> Sending \" + request.toString());\n        }\n        transport.send(request.toString()).catch(reject);\n      });\n    },\n\n    /**\n     * Handle the errors reported by the GraphQL endpoint. The response\n     * can contain several errors, but we can only throw one of them.\n     * However, we can fire an event for each error, which might be useful\n     * if they are to be logged. The errors that are thrown or fired as\n     * event data contain the original response object in the `data` property\n     *\n     * @param {qx.io.graphql.protocol.Response} response The response object\n     * @return {qx.io.exception.Protocol}\n     */\n    _handleErrors(response) {\n      let errors = response.getErrors();\n      errors.forEach(error => {\n        let exception = new qx.io.exception.Protocol(error.message, null, response.toObject());\n        this.fireDataEvent(\"error\", exception);\n      });\n      return new qx.io.exception.Protocol(errors[0].message, null, response.toObject());\n    }\n  },\n\n  environment: {\n    \"qx.io.graphql.debug\" : false\n  }\n});\n"
  ]
}