{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/transport/Websocket.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractTransport",
    "implement",
    "ITransport",
    "construct",
    "url",
    "members",
    "__tranportImpl",
    "getTransportImpl",
    "_createTransportImpl",
    "send",
    "message",
    "ws",
    "readyState",
    "WebSocket",
    "OPEN",
    "Promise",
    "resolve",
    "addEventListener",
    "getEndpoint",
    "msgevt",
    "fireDataEvent",
    "data",
    "event",
    "error_message",
    "error_code",
    "code",
    "exception",
    "Transport",
    "FAILED",
    "destruct",
    "close",
    "defer",
    "graphql",
    "Client",
    "registerTransport",
    "Websocket"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;AAMAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EAA6C;AAC3CC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBC,iBADmB;AAE3CC,IAAAA,SAAS,EAAE,CAACV,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBG,UAAjB,CAFgC;;AAI3C;;;;;AAKAC,IAAAA,SAAS,CAACC,GAAD,EAAM;AACb,+DAAqBA,GAArB;AACD,KAX0C;;AAa3CC,IAAAA,OAAO,EAAE;AAEP;;;AAGAC,MAAAA,uBAAc,EAAE,IALT;;AAOP;;;;;;;AAOAC,MAAAA,gBAAgB,GAAG;AACjB,YAAI,CAAC,KAAKD,uBAAV,EAA0B;AACxB,eAAKA,uBAAL,GAAsB,KAAKE,oBAAL,EAAtB;AACD;;AACD,eAAO,KAAKF,uBAAZ;AACD,OAnBM;;AAqBP;;;;;;;;;;AAUA,YAAMG,IAAN,CAAWC,OAAX,EAAoB;AAClB,YAAIC,EAAE,GAAG,KAAKJ,gBAAL,EAAT;;AACA,YAAI,CAACI,EAAE,CAACC,UAAJ,KAAmBC,SAAS,CAACC,IAAjC,EAAuC;AACrC,gBAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIL,EAAE,CAACM,gBAAH,CAAoB,MAApB,EAA4BD,OAA5B,CAAvB,CAAN;AACD;;AACDL,QAAAA,EAAE,CAACF,IAAH,CAAQC,OAAR;AACD,OArCM;;AAuCP;;;;AAIAF,MAAAA,oBAAoB,GAAG;AACrB,YAAIG,EAAE,GAAG,IAAIE,SAAJ,CAAc,KAAKK,WAAL,EAAd,CAAT;AACAP,QAAAA,EAAE,CAACM,gBAAH,CAAoB,SAApB,EAA+BE,MAAM,IAAI;AACvC,eAAKC,aAAL,CAAmB,SAAnB,EAA8BD,MAAM,CAACE,IAArC;AACD,SAFD;AAGAV,QAAAA,EAAE,CAACM,gBAAH,CAAoB,OAApB,EAA6BK,KAAK,IAAG;AACnC,cAAIC,aAAJ;AACA,cAAIC,UAAJ;;AACA,kBAAOF,KAAK,CAACG,IAAb;AACE,iBAAM,IAAN;AACE;AACA;;AACF;AACE;AACA;AACAF,cAAAA,aAAa,GAAG,WAAWD,KAAK,CAACG,IAAjC;AACAD,cAAAA,UAAU,GAAGjC,EAAE,CAACO,EAAH,CAAM4B,SAAN,CAAgBC,SAAhB,CAA0BC,MAAvC;AARJ;;AAUA,cAAIL,aAAJ,EAAmB;AACjB,kBAAM,IAAIhC,EAAE,CAACO,EAAH,CAAM4B,SAAN,CAAgBC,SAApB,CAA8BJ,aAA9B,EAA6CC,UAA7C,EAAyDF,KAAzD,CAAN;AACD;AACF,SAhBD;AAiBA,eAAOX,EAAP;AACD;;AAlEM,KAbkC;;AAkF3CkB,IAAAA,QAAQ,GAAG;AACT,WAAKvB,uBAAL,CAAoBwB,KAApB;;AACA,WAAKxB,uBAAL,GAAsB,IAAtB;AACD,KArF0C;;AAuF3CyB,IAAAA,KAAK,GAAG;AACNxC,MAAAA,EAAE,CAACO,EAAH,CAAMkC,OAAN,CAAcC,MAAd,CAAqBC,iBAArB,CAAuC,KAAvC,EAA8C3C,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBoC,SAA9D;AACD;;AAzF0C,GAA7C;AANA5C,EAAAA,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBoC,SAAhB,CAA0BzC,aAA1B,GAA0CA,aAA1C",
  "sourcesContent": [
    "/**\n * The implementation of a WebSocket Transport\n * THIS IS JUST A STUB FOR THE PURPOSE OF API DESIGN\n * Do not rely on it or use it for anything other than testing purposes.\n * @ignore(WebSocket)\n */\nqx.Class.define(\"qx.io.transport.Websocket\", {\n  extend: qx.io.transport.AbstractTransport,\n  implement: [qx.io.transport.ITransport],\n\n  /**\n   * Constructor.\n   *\n   * @param {String} url The URL of the http endpoint\n   */\n  construct(url) {\n    this.base(arguments, url);\n  },\n\n  members: {\n\n    /**\n     * @type {WebSocket}\n     */\n    __tranportImpl: null,\n\n    /**\n     * Returns the object which implements the transport on the\n     * underlying level, so that transport-specific configuration\n     * can be done on it.\n     *\n     * @return {WebSocket}\n     */\n    getTransportImpl() {\n      if (!this.__tranportImpl) {\n        this.__tranportImpl = this._createTransportImpl();\n      }\n      return this.__tranportImpl;\n    },\n\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     *\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     * @ignore(fetch)\n     */\n    async send(message) {\n      let ws = this.getTransportImpl();\n      if (!ws.readyState !== WebSocket.OPEN) {\n        await new Promise(resolve => ws.addEventListener(\"open\", resolve));\n      }\n      ws.send(message);\n    },\n\n    /**\n     * Factory method to create a websocket object.\n     * @return {WebSocket}\n     */\n    _createTransportImpl() {\n      let ws = new WebSocket(this.getEndpoint());\n      ws.addEventListener(\"message\", msgevt => {\n        this.fireDataEvent(\"message\", msgevt.data)\n      });\n      ws.addEventListener(\"close\", event =>{\n        let error_message;\n        let error_code;\n        switch(event.code) {\n          case  1000:\n            // everything ok\n            break;\n          default:\n            // todo translate websocket error codes into qx.io.exception.Transport error codes\n            // see https://github.com/Luka967/websocket-close-codes\n            error_message = \"Error \" + event.code;\n            error_code = qx.io.exception.Transport.FAILED;\n        }\n        if (error_message) {\n          throw new qx.io.exception.Transport(error_message, error_code, event);\n        }\n      });\n      return ws;\n    }\n  },\n\n  destruct() {\n    this.__tranportImpl.close();\n    this.__tranportImpl = null;\n  },\n\n  defer() {\n    qx.io.graphql.Client.registerTransport(/^ws/, qx.io.transport.Websocket);\n  }\n});\n"
  ]
}