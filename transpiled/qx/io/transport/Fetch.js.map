{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/transport/Fetch.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractTransport",
    "implement",
    "ITransport",
    "construct",
    "url",
    "members",
    "__tranportImpl",
    "getTransportImpl",
    "_createTransportImpl",
    "send",
    "message",
    "core",
    "Assert",
    "assertString",
    "init",
    "body",
    "response",
    "fetch",
    "getEndpoint",
    "e",
    "exception",
    "Transport",
    "code",
    "ok",
    "status",
    "statusText",
    "responseData",
    "text",
    "fireDataEvent",
    "headers",
    "method",
    "defer",
    "graphql",
    "Client",
    "registerTransport",
    "Fetch"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;AAIAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uBAAhB,EAAyC;AACvCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBC,iBADe;AAEvCC,IAAAA,SAAS,EAAE,CAACV,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBG,UAAjB,CAF4B;;AAIvC;;;;;AAKAC,IAAAA,SAAS,CAACC,GAAD,EAAM;AACb,+DAAqBA,GAArB;AACD,KAXsC;;AAavCC,IAAAA,OAAO,EAAE;AAEPC,MAAAA,uBAAc,EAAE,IAFT;;AAIP;;;;;;;;;AASAC,MAAAA,gBAAgB,GAAG;AACjB,aAAKD,uBAAL,GAAsB,KAAKA,uBAAL,IAAuB,KAAKE,oBAAL,EAA7C;AACA,eAAO,KAAKF,uBAAZ;AACD,OAhBM;;AAkBP;;;;;;;;;;AAUA,YAAMG,IAAN,CAAWC,OAAX,EAAoB;AAClBnB,QAAAA,EAAE,CAACoB,IAAH,CAAQC,MAAR,CAAeC,YAAf,CAA4BH,OAA5B;AACA,YAAII,IAAI,GAAG,KAAKP,gBAAL,EAAX;AACAO,QAAAA,IAAI,CAACC,IAAL,GAAYL,OAAZ;AACA,YAAIM,QAAJ;;AACA,YAAI;AACFA,UAAAA,QAAQ,GAAG,MAAMC,KAAK,CAAC,KAAKC,WAAL,EAAD,EAAqBJ,IAArB,CAAtB;AACD,SAFD,CAEE,OAAOK,CAAP,EAAU;AACV,gBAAM,IAAI5B,EAAE,CAACO,EAAH,CAAMsB,SAAN,CAAgBC,SAApB,CAA8BF,CAAC,CAACT,OAAhC,EAAyCS,CAAC,CAACG,IAA3C,CAAN;AACD;;AACD,YAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AAChB,kBAAQP,QAAQ,CAACQ,MAAjB;AACE,iBAAK,GAAL;AACE;AACA;;AACF;AACE,oBAAM,IAAIjC,EAAE,CAACO,EAAH,CAAMsB,SAAN,CAAgBC,SAApB,CAA8BL,QAAQ,CAACS,UAAvC,EAAmDT,QAAQ,CAACQ,MAA5D,CAAN;AALJ;AAOD;;AACD,YAAIE,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAzB,CAnBkB,CAoBlB;;AACA,aAAKC,aAAL,CAAmB,SAAnB,EAA8BF,YAA9B;AACD,OAlDM;;AAoDP;;;;;;AAMAlB,MAAAA,oBAAoB,GAAG;AACrB,YAAIM,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,CAACe,OAAL,GAAe;AACb,0BAAgB,kBADH;AAEb,oBAAU;AAFG,SAAf;AAIAf,QAAAA,IAAI,CAACgB,MAAL,GAAc,MAAd;AACA,eAAOhB,IAAP;AACD;;AAlEM,KAb8B;;AAkFvCiB,IAAAA,KAAK,GAAG;AACNxC,MAAAA,EAAE,CAACO,EAAH,CAAMkC,OAAN,CAAcC,MAAd,CAAqBC,iBAArB,CAAuC,OAAvC,EAAgD3C,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBoC,KAAhE;AACD;;AApFsC,GAAzC;AAJA5C,EAAAA,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBoC,KAAhB,CAAsBzC,aAAtB,GAAsCA,aAAtC",
  "sourcesContent": [
    "/**\n * The implementation of a HTTP Transport using the Fetch API,\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n */\nqx.Class.define(\"qx.io.transport.Fetch\", {\n  extend: qx.io.transport.AbstractTransport,\n  implement: [qx.io.transport.ITransport],\n\n  /**\n   * Constructor.\n   *\n   * @param {String} url The URL of the http endpoint\n   */\n  construct(url) {\n    this.base(arguments, url);\n  },\n\n  members: {\n\n    __tranportImpl: null,\n\n    /**\n     * Returns the object which implements the transport on the\n     * underlying level, so that transport-specific configuration\n     * can be done on it. In the case of the Fetch API, the\n     * \"implementation\" is a configuration object which will be\n     * passed to the `fetch` method as second parameter.\n     *\n     * @return {qx.core.Object}\n     */\n    getTransportImpl() {\n      this.__tranportImpl = this.__tranportImpl || this._createTransportImpl();\n      return this.__tranportImpl;\n    },\n\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     *\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     * @ignore(fetch)\n     */\n    async send(message) {\n      qx.core.Assert.assertString(message);\n      let init = this.getTransportImpl();\n      init.body = message;\n      let response;\n      try {\n        response = await fetch(this.getEndpoint(), init);\n      } catch (e) {\n        throw new qx.io.exception.Transport(e.message, e.code);\n      }\n      if (!response.ok) {\n        switch (response.status) {\n          case 400:\n            // \"400 Bad Request\" is a really a protocol error (syntax error)\n            break;\n          default:\n            throw new qx.io.exception.Transport(response.statusText, response.status);\n        }\n      }\n      let responseData = await response.text();\n      // notify listeners\n      this.fireDataEvent(\"message\", responseData);\n    },\n\n    /**\n     * Factory method to create a request object. In this implementation,\n     * it returns an object that will be used as the `init` parameter of the\n     * fetch method.\n     * @return {Object}\n     */\n    _createTransportImpl() {\n      let init = {};\n      init.headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      };\n      init.method = \"POST\";\n      return init;\n    }\n  },\n\n  defer() {\n    qx.io.graphql.Client.registerTransport(/^http/, qx.io.transport.Fetch);\n  }\n});\n"
  ]
}