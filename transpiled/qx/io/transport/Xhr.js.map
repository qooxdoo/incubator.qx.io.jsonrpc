{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/transport/Xhr.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractTransport",
    "implement",
    "ITransport",
    "construct",
    "url",
    "members",
    "__tranportImpl",
    "getTransportImpl",
    "_createTransportImpl",
    "send",
    "message",
    "core",
    "Assert",
    "assertString",
    "req",
    "setRequestData",
    "sendWithPromise",
    "e",
    "type",
    "BaseError",
    "getComment",
    "exception",
    "Transport",
    "toString",
    "TIMEOUT",
    "INVALID_MSG_DATA",
    "Cancel",
    "FAILED",
    "Exception",
    "undefined",
    "error",
    "fireDataEvent",
    "getResponse",
    "dispose",
    "request",
    "Xhr",
    "getEndpoint",
    "setAccept",
    "setCache",
    "setRequestHeader",
    "setParser",
    "response",
    "defer",
    "jsonrpc",
    "Client",
    "registerTransport"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * The implementation of a HTTP Transport using the {@link qx.io.request} API,\n * so any special configuration of the HTTP request must be done on the\n * underlying implementation of {@link qx.io.request.AbstractRequest}.\n *\n * More abstract support for authentication will be added later.\n *\n */\nqx.Class.define(\"qx.io.transport.Xhr\", {\n  extend: qx.io.transport.AbstractTransport,\n  implement : qx.io.transport.ITransport,\n\n  /**\n   * Constructor.\n   *\n   * @param {String} url The URL of the http endpoint\n   */\n  construct(url) {\n    this.base(arguments, url);\n  },\n\n  members: {\n\n    /**\n     * Internal implementation of the transport\n     * @var {qx.io.request.Xhr}\n     */\n    __tranportImpl : null,\n\n    /**\n     * Returns the object which implements the transport on the\n     * underlying level, so that transport-specific configuration\n     * can be done on it. Note that since in the HTTP transport,\n     * this object cannot be reused, it will return a new object\n     * each time which will be used in the immediately next request.\n     *\n     * @return {qx.core.Object}\n     */\n    getTransportImpl() {\n      this.__tranportImpl = this._createTransportImpl();\n      return this.__tranportImpl;\n    },\n\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     *\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     */\n    async send(message) {\n      qx.core.Assert.assertString(message);\n      const req = this.__tranportImpl || this.getTransportImpl();\n      req.setRequestData(message);\n      this.__tranportImpl = null; // free the internal reference for the next request\n      try {\n        await req.sendWithPromise();\n      } catch (e) {\n        if (e instanceof qx.type.BaseError) {\n          switch (e.getComment()) {\n            case \"timeout\":\n              throw new qx.io.exception.Transport(\n                e.toString(),\n                qx.io.exception.Transport.TIMEOUT,\n                {message}\n              );\n            case \"parseError\":\n              throw new qx.io.exception.Transport(\n                e.toString(),\n                qx.io.exception.Transport.INVALID_MSG_DATA,\n                {message}\n              );\n            case \"abort\":\n              throw new qx.io.exception.Cancel(\n                e.toString(),\n                {message}\n              );\n            case \"statusError\":\n            case \"error\":\n              throw new qx.io.exception.Transport(\n                e.toString(),\n                qx.io.exception.Transport.FAILED,\n                {message}\n              );\n          }\n          // unknown error\n          throw new qx.io.exception.Exception(\n            e.toString(),\n            undefined,\n            {message, error:e}\n          );\n        }\n      }\n      // notify listeners\n      this.fireDataEvent(\"message\", req.getResponse());\n      // discard old object\n      req.dispose();\n    },\n\n    /**\n     * Factory method to create a request object. By default, a POST\n     * request will be made, and the expected response type will be\n     * \"application/json\", but differently to the standard behavior,\n     * the response will not be parsed into a javascript object.\n     *\n     * Classes extending this one may override this method to obtain\n     * a Request object with different parameters and/or different\n     * authentication settings. The object must be a subclass of {@link\n     * qx.io.request.AbstractRequest} or implement its public API.\n     *\n     * @return {qx.io.jsonrpc.Request}\n     */\n    _createTransportImpl() {\n      const req = new qx.io.request.Xhr(this.getEndpoint(), \"POST\");\n      req.setAccept(\"application/json\");\n      req.setCache(false);\n      req.setRequestHeader(\"content-type\", \"application/json\");\n      // disable parsing, we are going to parse the JSON ourselves\n      req.setParser(response => response);\n      return req;\n    }\n  },\n\n  defer() {\n    qx.io.jsonrpc.Client.registerTransport(/^http/, qx.io.transport.Xhr);\n  }\n});\n"
  ]
}