{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/source/class/qx/io/jsonrpc/transport/ITransport.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "properties",
    "endpoint",
    "check",
    "events",
    "members",
    "send",
    "message",
    "getTransportImpl",
    "io",
    "jsonrpc",
    "transport",
    "ITransport"
  ],
  "mappings": ";;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;AAAAH,EAAAA,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,oCAApB,EAA0D;AACxDC,IAAAA,UAAU,EAAE;AACV;;;;AAIAC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE;AADC;AALA,KAD4C;AAUxDC,IAAAA,MAAM,EAAE;AACN;;;;AAIA,iBAAW;AALL,KAVgD;AAiBxDC,IAAAA,OAAO,EAAG;AACR;;;;;;;;AAQA,YAAMC,IAAN,CAAWC,OAAX,EAAoB,CAAE,CATd;;AAWR;;;;;AAKAC,MAAAA,gBAAgB,GAAG,CAAE;;AAhBb;AAjB8C,GAA1D;AAAAb,EAAAA,EAAE,CAACc,EAAH,CAAMC,OAAN,CAAcC,SAAd,CAAwBC,UAAxB,CAAmCd,aAAnC,GAAmDA,aAAnD",
  "sourcesContent": [
    "qx.Interface.define(\"qx.io.jsonrpc.transport.ITransport\", {\n  properties: {\n    /**\n     * The URI of the endpoint\n     * @var {String}\n     */\n    endpoint: {\n      check: \"String\"\n    }\n  },\n  events: {\n    /**\n     * Event fired when a message is received from the endpoint. Event data\n     * is an UTF-8 encoded string\n     */\n    \"message\": \"qx.event.type.Data\"\n  },\n  members : {\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     */\n    async send(message) {},\n\n    /**\n     * Returns the object which implements the transport on the underlying\n     * level, so that transport-specific configuration can be done on it.\n     * @return {qx.core.Object}\n     */\n    getTransportImpl() {}\n  }\n});\n"
  ]
}