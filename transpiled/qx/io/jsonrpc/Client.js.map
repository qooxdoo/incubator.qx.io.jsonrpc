{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/jsonrpc/Client.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractClient",
    "statics",
    "registerTransport",
    "events",
    "construct",
    "transportOrUri",
    "methodPrefix",
    "parser",
    "selectTransport",
    "getTransport",
    "addListener",
    "evt",
    "handleIncoming",
    "getData",
    "setMethodPrefix",
    "jsonrpc",
    "protocol",
    "Parser",
    "setParser",
    "__requests",
    "properties",
    "check",
    "nullable",
    "members",
    "_prependMethodPrefix",
    "method",
    "core",
    "Assert",
    "assertString",
    "getMethodPrefix",
    "startsWith",
    "_throwTransportException",
    "exception",
    "fireDataEvent",
    "forEach",
    "request",
    "Request",
    "handleTransportException",
    "send",
    "message",
    "Message",
    "Batch",
    "Error",
    "messages",
    "getBatch",
    "toArray",
    "requests",
    "filter",
    "id",
    "getId",
    "undefined",
    "Transport",
    "INVALID_ID",
    "toObject",
    "debug",
    "toString",
    "sendRequest",
    "params",
    "getPromise",
    "sendNotification",
    "notification",
    "Notification",
    "sendBatch",
    "batch",
    "assertInstance",
    "setMethod",
    "getMethod",
    "Promise",
    "all",
    "getPromises",
    "json",
    "getParser",
    "parse",
    "handleMessage",
    "e",
    "msg",
    "_cleanup",
    "dispose",
    "Result",
    "UNKNOWN_ID",
    "DUPLICATE_ID",
    "resolve",
    "getResult",
    "error",
    "getError",
    "ex",
    "Protocol",
    "code",
    "reject",
    "environment",
    "Client"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a JSON-RPC client object with auto-configuration of the\n * transport used (based on the URI passed).\n */\nqx.Class.define(\"qx.io.jsonrpc.Client\",\n{\n  extend : qx.io.transport.AbstractClient,\n\n  statics: {\n    registerTransport : qx.io.transport.AbstractClient.registerTransport\n  },\n\n  events : {\n    /**\n     * Event fired before a request message is sent to the server.\n     * Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n     * be sent. This also allows listeners to configure the transport\n     * object beforehand.\n     */\n    \"outgoingRequest\": \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     * Event fired when a message is received from the endpoint. Event data\n     * is an UTF-8 encoded string\n     */\n    \"error\" : \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a peer-originated JSON-RPC message has been\n     * received from the peer endpoint. Event data is an instance of {@link\n     * qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n     * or {@link qx.io.jsonrpc.protocol.Notification}.\n     */\n    \"incomingRequest\" : \"qx.event.type.Data\"\n  },\n\n  /**\n   * @param {qx.io.transport.ITransport|String} transportOrUri\n   *    Transport object, which must implement {@link qx.io.transport.ITransport}\n   *    or a string URI, which will trigger auto-detection of transport, as long as an\n   *    appropriate transport has been registered with the static `registerTransport()` function.\n   * @param {String?} methodPrefix\n   *    Optional service name which will be prepended to the method\n   * @param {qx.io.jsonrpc.protocol.Parser?} parser\n   *    Optional parser object, which needs to be an instance of a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n   */\n  construct : function(transportOrUri, methodPrefix, parser) {\n    this.base(arguments);\n    this.selectTransport(transportOrUri);\n    // listen for incoming messages\n    this.getTransport().addListener(\"message\", evt => this.handleIncoming(evt.getData()));\n    if (!methodPrefix) {\n      methodPrefix = \"\";\n    }\n    this.setMethodPrefix(methodPrefix);\n    if (!parser) {\n      parser = new qx.io.jsonrpc.protocol.Parser();\n    }\n    this.setParser(parser);\n    this.__requests = [];\n  },\n\n  properties :\n  {\n    /**\n     * An optional string which is prepended to the method name by the {@link #sendRequest}\n     * and {@link #sendNotification} methods\n     */\n    methodPrefix :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n    /**\n     * The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n      */\n    parser: {\n      check : \"qx.io.jsonrpc.protocol.Parser\"\n    }\n  },\n\n  members :\n  {\n\n    /**\n     * A cache of the requests which have been sent out and are still pending\n     */\n    __requests : null,\n\n    /**\n     * If a service name has been configured, prepend it to the method name,\n     * unless it has already been prefixed\n     * @param {String} method\n     * @return {String}\n     * @private\n     */\n    _prependMethodPrefix(method) {\n      qx.core.Assert.assertString(method);\n      let methodPrefix = this.getMethodPrefix();\n      if (methodPrefix && !method.startsWith(methodPrefix)) {\n        return `${methodPrefix}${method}`;\n      }\n      return method;\n    },\n\n    /**\n     * Fires \"error\" event and throws the error after informing pending requests\n     * about the error.\n     * @param exception\n     * @private\n     */\n    _throwTransportException(exception) {\n      this.fireDataEvent(\"error\", exception);\n      this.__requests.forEach(request => {\n        if (request instanceof qx.io.jsonrpc.protocol.Request) {\n          request.handleTransportException(exception);\n        }\n      });\n      throw exception;\n    },\n\n    /**\n     * Send the given JSON-RPC message object using the configured transport\n     *\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     */\n    async send(message) {\n      if (!(message instanceof qx.io.jsonrpc.protocol.Message || message instanceof qx.io.jsonrpc.protocol.Batch)) {\n        throw new Error(\"Argument must be instanceof qx.io.jsonrpc.protocol.Message or qx.io.jsonrpc.protocol.Batch\");\n      }\n\n      // filter by type\n      let messages = message instanceof qx.io.jsonrpc.protocol.Batch ? message.getBatch().toArray() : [message];\n      let requests = messages.filter(message => message instanceof qx.io.jsonrpc.protocol.Request);\n\n      // store requests\n      requests.forEach(request => {\n        let id = request.getId();\n        if (this.__requests[id] !== undefined) {\n          throw new qx.io.exception.Transport(`Request ID ${id} is already in use`, qx.io.exception.Transport.INVALID_ID, {request: message.toObject()});\n        }\n        this.__requests[id] = request;\n      });\n\n      // inform listeners\n      this.fireDataEvent(\"outgoingRequest\", message);\n\n      // debugging\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\">>> Outgoing json-rpc message: \" + message);\n      }\n\n      // send it async, using transport-specific implementation\n      return this.getTransport().send(message.toString());\n    },\n\n    /**\n     * Sends a single JSON-RPC request. If a method prefix name has been configured,\n     * it will be prepended to the method name.\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves with the result to that request,\n     * and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.\n     */\n    async sendRequest(method, params) {\n      const request = new qx.io.jsonrpc.protocol.Request(this._prependMethodPrefix(method), params);\n      this.send(request); // not awaited because we await the request's promise\n      return await request.getPromise();\n    },\n\n    /**\n     * Sends a single JSON-RPC notification. Will use the method prefix\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves immediately, (i.e. when the\n     * notification has been sent out (which is synchronous)\n     */\n    async sendNotification(method, params) {\n      const notification = new qx.io.jsonrpc.protocol.Notification(this._prependMethodPrefix(method), params);\n      await this.send(notification);\n    },\n\n    /**\n     * Send the given message batch. Will use the method prefix.\n     * @param {qx.io.jsonrpc.protocol.Batch} batch\n     * @return {qx.Promise} Promise that resolves with an array of the responses\n     * to all requests in the batch, or rejects with any error that occurs.\n     */\n    async sendBatch(batch) {\n      qx.core.Assert.assertInstance(batch, qx.io.jsonrpc.protocol.Batch);\n      if (this.getMethodPrefix()) {\n        batch.getBatch().forEach(message => message.setMethod(this._prependMethodPrefix(message.getMethod())));\n      }\n      this.send(batch);\n      return await qx.Promise.all(batch.getPromises());\n    },\n\n    /**\n     * Receives and handles an incoming JSON-RPC compliant message data\n     * @param {String} json JSON data\n     */\n    handleIncoming(json) {\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\"<<< Incoming json-rpc message: \" + json);\n      }\n      let message;\n      try {\n        message = this.getParser().parse(json);\n        // act on each message\n        this.handleMessage(message);\n      } catch (e) {\n        this._throwTransportException(e);\n      } finally {\n        // cleanup\n        if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n          message.getBatch().forEach(msg => this._cleanup(msg));\n        } else if (message instanceof qx.io.jsonrpc.protocol.Message) {\n          this._cleanup(message);\n        }\n      }\n    },\n\n    /**\n     * Clean up after a message has been received\n     * @param {qx.io.jsonrpc.protocol.Message} message\n     * @private\n     */\n    _cleanup(message) {\n      message.dispose();\n    },\n\n    /**\n     * Handle an incoming message or batch of messages\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch\n     */\n    handleMessage(message) {\n      // handle batches\n      if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n        message.getBatch().forEach(msg => this.handleMessage(msg));\n        return;\n      }\n      // handle individual message\n      qx.core.Assert.assertInstance(message, qx.io.jsonrpc.protocol.Message);\n      let request;\n      let id;\n      if (message instanceof qx.io.jsonrpc.protocol.Result || message instanceof qx.io.jsonrpc.protocol.Error) {\n        // handle results and errors, which are responses to sent requests\n        id = message.getId();\n        request = this.__requests[id];\n        if (request === undefined) {\n          // no request with this id exists\n          throw new qx.io.exception.Transport(\n            `Invalid jsonrpc response data: Unknown id ${id}.`,\n            qx.io.exception.Transport.UNKNOWN_ID,\n            message.toObject()\n          );\n        }\n        if (request === true) {\n          // the request has already been responded to\n          throw new qx.io.exception.Transport(\n              `Invalid jsonrpc response data: multiple responses with same id ${id}.`,\n              qx.io.exception.Transport.DUPLICATE_ID,\n              message.toObject()\n          );\n        }\n      }\n      // handle the different message types\n      if (message instanceof qx.io.jsonrpc.protocol.Result) {\n        // resolve the individual promise\n        request.getPromise().resolve(message.getResult());\n      } else if (message instanceof qx.io.jsonrpc.protocol.Error) {\n\n        let error = message.getError();\n        let ex = new qx.io.exception.Protocol(\n          error.message,\n          error.code,\n          message.toObject()\n        );\n        // inform listeners\n        this.fireDataEvent(\"error\", ex);\n        // reject the individual promise\n        request.getPromise().reject(ex);\n      } else if (message instanceof qx.io.jsonrpc.protocol.Request || message instanceof qx.io.jsonrpc.protocol.Notification) {\n        // handle peer-originated requests and notifications\n        this.fireDataEvent(\"incomingRequest\", message);\n      } else {\n        throw new Error(\"Unhandled message:\" + message.toString());\n      }\n      // mark request as handled (and remove reference so it can be gc'ed)\n      this.__requests[id] = true;\n    }\n  },\n\n  environment: {\n    \"qx.io.jsonrpc.debug\" : false\n  }\n});\n"
  ]
}