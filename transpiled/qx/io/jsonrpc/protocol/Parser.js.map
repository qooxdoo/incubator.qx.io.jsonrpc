{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/io/jsonrpc/protocol/Parser.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "members",
    "parse",
    "message",
    "JSON",
    "e",
    "io",
    "jsonrpc",
    "exception",
    "Transport",
    "toString",
    "INVALID_JSON",
    "NO_DATA",
    "lang",
    "Type",
    "isArray",
    "batch",
    "protocol",
    "Batch",
    "forEach",
    "item",
    "add",
    "stringify",
    "id",
    "result",
    "method",
    "params",
    "error",
    "undefined",
    "Result",
    "Error",
    "code",
    "data",
    "Request",
    "Notification",
    "INVALID_MSG_DATA",
    "Parser"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n\n/**\n * The parser object has a parse() method, which takes a UTF-encoded string and\n * returns an instance of the correponding subclass of {@link qx.io.jsonrpc.protocol.Message} or\n * a {@link qx.io.jsonrpc.protocol.Batch} instance.\n */\nqx.Class.define(\"qx.io.jsonrpc.protocol.Parser\", {\n  extend: qx.core.Object,\n  members: {\n    /**\n     * Given an UTF-8 encoded string, return the corresponding message object,\n     * which is one of {@link qx.io.jsonrpc.protocol.Batch}, {@link qx.io.jsonrpc.protocol.Notification},\n     * {@link qx.io.jsonrpc.protocol.Request}, {@link qx.io.jsonrpc.protocol.Result}, or\n     * {@link qx.io.jsonrpc.protocol.Error}.\n     *\n     * @param {String} message\n     * @return {qx.io.jsonrpc.protocol.Message}\n     * @throws {qx.io.jsonrpc.exception.Transport}\n     */\n    parse(message) {\n      try {\n        message = JSON.parse(message);\n      } catch (e) {\n        throw new qx.io.jsonrpc.exception.Transport(\n          e.toString(),\n          qx.io.jsonrpc.exception.Transport.INVALID_JSON,\n          {message}\n        );\n      }\n      if (message === null) {\n        throw new qx.io.jsonrpc.exception.Transport(\n          \"No data\",\n          qx.io.jsonrpc.exception.Transport.NO_DATA\n        );\n      }\n      // batch\n      if (qx.lang.Type.isArray(message)) {\n        const batch = new qx.io.jsonrpc.protocol.Batch();\n        message.forEach(item => batch.add(this.parse(JSON.stringify(item))));\n        return batch;\n      }\n      // individual message\n      let {id, result, method, params, error} = message;\n      if (id !== undefined && result !== undefined && error === undefined && method === undefined) {\n        return new qx.io.jsonrpc.protocol.Result(id, result);\n      }\n      if (id !== undefined && result === undefined && error !== undefined && method === undefined) {\n        return new qx.io.jsonrpc.protocol.Error(id, error.code, error.message, error.data);\n      }\n      if (id !== undefined && result === undefined && error === undefined && method !== undefined) {\n        return new qx.io.jsonrpc.protocol.Request(method, params, id);\n      }\n      if (id === undefined && result === undefined && error === undefined && method !== undefined) {\n        return new qx.io.jsonrpc.protocol.Notification(method, params);\n      }\n      throw new qx.io.jsonrpc.exception.Transport(\n        \"Cannot parse message data.\",\n        qx.io.jsonrpc.exception.Transport.INVALID_MSG_DATA,\n        {message}\n      );\n    }\n  }\n});\n"
  ]
}