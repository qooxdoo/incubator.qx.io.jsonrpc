{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/dev/FakeServer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "construct",
    "clazz",
    "dev",
    "FakeServer",
    "$$allowconstruct",
    "msg",
    "Error",
    "getFakeServer",
    "__responses",
    "statics",
    "$$instance",
    "getInstance",
    "members",
    "__sinon",
    "__fakeServer",
    "__filter",
    "configure",
    "responseData",
    "forEach",
    "item",
    "urlRegExp",
    "url",
    "RegExp",
    "_getRegExp",
    "response",
    "method",
    "hasResponse",
    "i",
    "l",
    "length",
    "old",
    "push",
    "respondWith",
    "bind",
    "filter",
    "__getCombinedFilter",
    "addFilter",
    "core",
    "Assert",
    "assertFunction",
    "FakeXMLHttpRequest",
    "removeFilter",
    "lang",
    "Array",
    "remove",
    "filters",
    "removeResponse",
    "toString",
    "responses",
    "sinon",
    "unit",
    "Sinon",
    "getSinon",
    "useFilters",
    "sandbox",
    "useFakeServer",
    "autoRespond",
    "restore",
    "pattern",
    "replace",
    "async",
    "username",
    "password",
    "filterMethod",
    "regExp",
    "test",
    "destruct"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\n * allows quick and simple configuration of mock HTTP backends for testing and\n * development.\n * Automatically creates URL filtering rules to ensure that only configured\n * requests are faked while others will be processed normally by the browser's\n * XHR implementation.\n *\n * The following example shows how to configure mock responses for two different\n * requests:\n * <pre class=\"javascript\">\n *   var responseData = [\n *     {\n *       method: \"GET\",\n *       url: /\\/api\\/resource\\/\\d+/,\n *       response : function(request) {\n *         var status = 200;\n *         var headers = { \"Content-Type\": \"application/json\" };\n *         var responseData = {\n *           description: \"Mock REST response for resource \" + request.url\n *         };\n *         var body = qx.lang.Json.stringify(responseData);\n *         request.respond(status, headers, body);\n *       }\n *     },\n *     {\n *       method: \"GET\",\n *       url: \"/users/{userId}\",\n *       response: [\n *         200,\n *         { \"Content-Type\": \"application/json\" },\n *         qx.lang.Json.stringify({userId: 'someUser'})\n *       ]\n *     }\n *   ];\n *\n *   qx.dev.FakeServer.getInstance().configure(responseData);\n * </pre>\n */\nqx.Bootstrap.define(\"qx.dev.FakeServer\", {\n\n  extend : Object,\n\n  construct : function() {\n    var clazz = qx.dev.FakeServer;\n\n    if (!clazz.$$allowconstruct) {\n        var msg = clazz+\" is a singleton! It is not possible to instantiate it directly.\" +\n                  \"Use the static getInstance() method instead.\";\n        throw new Error(msg);\n    }\n\n    this.getFakeServer();\n    this.__responses = [];\n  },\n\n  statics : {\n    $$instance : null,\n    $$allowconstruct : false,\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance : function()\n    {\n      if (!this.$$instance)\n      {\n        this.$$allowconstruct = true;\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    }\n  },\n\n  members :\n  {\n    __sinon : null,\n    __fakeServer : null,\n    __responses : null,\n    __filter : null,\n\n    /**\n     * Configures a set of fake HTTP responses. Each response is defined as a map\n     * that must provide the following keys:\n     * <ul>\n     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\n     *   <li><code>url</code> URL used to match requests to fake responses. Can be\n     *   a RegExp or a String. REST-style parameter placeholders in curly braces\n     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\n     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n     *   <li><code>response</code> This can be either:\n     *     <ul>\n     *       <li>a string: This will be the response body, status code will be 200</li>\n     *       <li>an array containing the status code, a map of response headers and\n     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\n     *       </li>\n     *       <li>a function: This will be called with a FakeXMLHttpRequest object as\n     *       the only argument. Its <code>respond</code> method must be called to send a response.\n     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n     *       </li>\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @param responseData {Map[]} An array of response description maps.\n     */\n    configure : function(responseData) {\n      responseData.forEach(function(item) {\n        var urlRegExp = item.url instanceof RegExp ? item.url : this._getRegExp(item.url);\n        var response = [item.method, urlRegExp];\n        var hasResponse = false;\n        for (var i=0, l=this.__responses.length; i<l; i++) {\n          var old = this.__responses[i];\n          hasResponse = (old[0] == response[0] && old[1] == response[1]);\n        }\n        if (!hasResponse) {\n          this.__responses.push(response);\n        }\n        this.respondWith(item.method, urlRegExp, item.response);\n      }.bind(this));\n\n      var filter = this.__filter = this.__getCombinedFilter();\n      this.addFilter(filter);\n    },\n\n\n    /**\n     * Adds a URL filtering function to decide whether a request should be handled\n     * by the FakeServer or passed to the regular XMLHttp implementation.\n     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\n     * for details.\n     *\n     * @param filter {Function} URL filter function. Will be called with the\n     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n     * <code>username</code>, <code>password</code>. Must return <code>true</code>\n     * if the request should not be faked.\n     */\n    addFilter : function(filter) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(filter);\n      }\n\n      this.__sinon.FakeXMLHttpRequest.addFilter(filter);\n    },\n\n\n    /**\n     * Remove a filter that was added with {@link #addFilter}\n     * @param filter {Function} filter function to remove\n     */\n    removeFilter : function(filter) {\n     qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, filter);\n    },\n\n\n    /**\n     * Removes a response that was configured with {@link #configure}\n     * @param method {String} HTTP method of the response\n     * @param url {String|RegExp} URL of the response\n     */\n    removeResponse : function(method, url) {\n      qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, this.__filter);\n      var urlRegExp = url instanceof RegExp ? url : this._getRegExp(url);\n      this.__responses = this.__responses.filter(function(response) {\n        return (response[0] != method ||\n                response[1].toString() != urlRegExp.toString());\n      });\n      this.__fakeServer.responses = this.__fakeServer.responses.filter(function(response) {\n        return (response.method != method ||\n                response.url.toString() != urlRegExp.toString());\n      });\n      this.removeFilter(this.__filter);\n      this.__filter = this.__getCombinedFilter();\n      this.addFilter(this.__filter);\n    },\n\n\n    /**\n     * Defines a fake XHR response to a matching request.\n     *\n     * @param method {String} HTTP method to respond to, e.g. \"GET\"\n     * @param urlRegExp {RegExp} Request URL must match match this expression\n     * @param response {Function|Array|String} Response to send. See\n     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.\n     */\n    respondWith : function(method, urlRegExp, response) {\n      this.getFakeServer().respondWith(method, urlRegExp, response);\n    },\n\n\n    /**\n     * Creates and configures a FakeServer if necessary and returns it.\n\n     * @return {Object} FakeServer object\n     */\n    getFakeServer : function() {\n      if (!this.__fakeServer) {\n        var sinon = this.__sinon = qx.dev.unit.Sinon.getSinon();\n        sinon.FakeXMLHttpRequest.useFilters = true;\n        this.__fakeServer = sinon.sandbox.useFakeServer();\n        this.__fakeServer.autoRespond = true;\n      }\n      return this.__fakeServer;\n    },\n\n\n    /**\n     * Stops the FakeServer and removes all configured responses and/or filters.\n     */\n    restore : function() {\n      this.__responses = [];\n      this.removeFilter(this.__filter);\n      this.__filter = null;\n      this.__fakeServer.restore();\n      this.__fakeServer = null;\n    },\n\n\n    /**\n     * Returns a RegExp using the given pattern. Curly brackets and anything\n     * between are replaced with wildcards (.*?)\n     *\n     * @param pattern {String} RegExp pattern\n     * @return {RegExp} Regular Expression\n     */\n    _getRegExp : function(pattern) {\n      pattern = pattern.replace(/\\{[^\\/]*?\\}/g, \".*?\");\n      return new RegExp(pattern);\n    },\n\n\n    /**\n     * Returns a filter function that ensures only requests matching configured\n     * fake responses will be intercepted.\n     * @return {Function} filter function\n     */\n    __getCombinedFilter : function() {\n      var responses = this.__responses;\n      return function(method, url, async, username, password) {\n        for (var i=0, l=responses.length; i<l; i++) {\n          var filterMethod = responses[i][0];\n          var regExp = responses[i][1];\n          if (method == filterMethod && regExp.test(url)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n  },\n\n  destruct: function() {\n    this.restore();\n    this.__fakeServer = this.__sinon = null;\n  }\n\n});\n"
  ]
}