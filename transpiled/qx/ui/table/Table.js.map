{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/table/Table.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MDragDropScrolling",
    "construct",
    "tableModel",
    "custom",
    "initiallyHiddenColumns",
    "setInitiallyHiddenColumns",
    "selectionManager",
    "setNewSelectionManager",
    "selectionModel",
    "setNewSelectionModel",
    "tableColumnModel",
    "setNewTableColumnModel",
    "tablePane",
    "setNewTablePane",
    "tablePaneHeader",
    "setNewTablePaneHeader",
    "tablePaneScroller",
    "setNewTablePaneScroller",
    "tablePaneModel",
    "setNewTablePaneModel",
    "columnMenu",
    "setNewColumnMenu",
    "_setLayout",
    "layout",
    "VBox",
    "__scrollerParent",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "setDataRowRenderer",
    "table",
    "rowrenderer",
    "Default",
    "__selectionManager",
    "getNewSelectionManager",
    "setSelectionModel",
    "getNewSelectionModel",
    "setTableModel",
    "getEmptyTableModel",
    "setMetaColumnCounts",
    "setTabIndex",
    "addListener",
    "_onKeyDown",
    "_onFocusChanged",
    "spacer",
    "set",
    "height",
    "_onResize",
    "__focusedCol",
    "__focusedRow",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "initStatusBarVisible",
    "getTableModel",
    "init",
    "events",
    "statics",
    "__redirectEvents",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "properties",
    "appearance",
    "refine",
    "focusable",
    "minWidth",
    "selectable",
    "check",
    "apply",
    "event",
    "rowHeight",
    "themeable",
    "forceLineHeight",
    "headerCellsVisible",
    "headerCellHeight",
    "nullable",
    "statusBarVisible",
    "additionalStatusBarText",
    "columnVisibilityButtonVisible",
    "metaColumnCounts",
    "focusCellOnPointerMove",
    "rowFocusChangeModifiesSelection",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "keepFirstVisibleRowComplete",
    "alwaysUpdateCells",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "dataRowRenderer",
    "modalCellEditorPreOpenFunction",
    "excludeScrollerScrollbarsIfNotNeeded",
    "newColumnMenu",
    "columnmenu",
    "Button",
    "newSelectionManager",
    "obj",
    "selection",
    "newSelectionModel",
    "Model",
    "newTableColumnModel",
    "columnmodel",
    "Basic",
    "newTablePane",
    "pane",
    "Pane",
    "newTablePaneHeader",
    "Header",
    "newTablePaneScroller",
    "Scroller",
    "newTablePaneModel",
    "columnModel",
    "members",
    "__additionalStatusBarText",
    "__lastRowCount",
    "__internalChange",
    "__columnMenuButtons",
    "__columnModel",
    "__emptyTableModel",
    "__hadVerticalScrollBar",
    "__timer",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "allowGrowX",
    "getNewColumnMenu",
    "menu",
    "factory",
    "_initColumnMenu",
    "_applySelectionModel",
    "value",
    "old",
    "removeListener",
    "_onSelectionChanged",
    "_applyRowHeight",
    "scrollerArr",
    "_getPaneScrollerArr",
    "i",
    "length",
    "updateVerScrollBarMaximum",
    "_applyHeaderCellsVisible",
    "_showChildControl",
    "_excludeChildControl",
    "getColumnVisibilityButtonVisible",
    "_applyColumnVisibilityButtonVisible",
    "_applyHeaderCellHeight",
    "getHeader",
    "setHeight",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "_applyTableModel",
    "getTableColumnModel",
    "getColumnCount",
    "_onTableModelMetaDataChanged",
    "_onTableModelDataChanged",
    "_updateStatusBar",
    "_updateTableData",
    "getRowCount",
    "getNewTableColumnModel",
    "_onColVisibilityChanged",
    "_onColWidthChanged",
    "_onColOrderChanged",
    "paneScroller",
    "paneModel",
    "getTablePaneModel",
    "setTableColumnModel",
    "_applyStatusBarVisible",
    "_applyAdditionalStatusBarText",
    "_applyMetaColumnCounts",
    "handlers",
    "manager",
    "Registration",
    "getManager",
    "evName",
    "Table",
    "capture",
    "getListeners",
    "bubble",
    "_cleanUpMetaColumns",
    "leftX",
    "setFirstColumnX",
    "setMaxColumnCount",
    "getNewTablePaneModel",
    "getNewTablePaneScroller",
    "setTablePaneModel",
    "_onScrollY",
    "j",
    "context",
    "handler",
    "add",
    "isLast",
    "getHeaderCellHeight",
    "setTopRightWidget",
    "getChildControl",
    "isColumnVisibilityButtonVisible",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "_applyFocusCellOnPointerMove",
    "setFocusCellOnPointerMove",
    "_applyShowCellFocusIndicator",
    "setShowCellFocusIndicator",
    "_applyContextMenuFromDataCellsOnly",
    "setContextMenuFromDataCellsOnly",
    "_applyKeepFirstVisibleRowComplete",
    "onKeepFirstVisibleRowCompleteChanged",
    "_applyResetSelectionOnHeaderTap",
    "setResetSelectionOnHeaderTap",
    "_applyResetSelectionOnTapBelowRows",
    "setResetSelectionOnTapBelowRows",
    "getSelectionManager",
    "getChildren",
    "getPaneScroller",
    "metaColumn",
    "fromMetaColumn",
    "destroy",
    "evt",
    "updateContent",
    "_onChangeTheme",
    "getDataRowRenderer",
    "initThemeValues",
    "onSelectionChanged",
    "onTableModelMetaDataChanged",
    "data",
    "getData",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "removeStart",
    "removeCount",
    "_onContextMenuOpen",
    "e",
    "getSelectionModel",
    "removeSelectionInterval",
    "setFocusedCell",
    "onTableModelDataChanged",
    "rowCount",
    "setScrollY",
    "_onKeyPress",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "deprecateMethodOverriding",
    "getEnabled",
    "oldFocusedRow",
    "consumed",
    "identifier",
    "getKeyIdentifier",
    "isEditing",
    "getModifiers",
    "stopEditing",
    "moveFocusedCell",
    "startEditing",
    "cancelEditing",
    "focus",
    "isCtrlPressed",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "scroller",
    "getTablePane",
    "getRowHeight",
    "direction",
    "getVisibleRowCount",
    "getScrollY",
    "getRowFocusChangeModifiesSelection",
    "handleMoveKeyDown",
    "preventDefault",
    "stopPropagation",
    "onFocusChanged",
    "onColVisibilityChanged",
    "col",
    "visible",
    "setColumnVisible",
    "setColumnWidth",
    "newWidth",
    "onColOrderChanged",
    "getTablePaneScrollerAtPageX",
    "pageX",
    "metaCol",
    "_getMetaColumnAtPageX",
    "row",
    "scrollVisible",
    "scrollCellVisible",
    "resetSelection",
    "resetCellFocus",
    "getFocusedColumn",
    "getFocusedRow",
    "highlightFocusedRow",
    "bHighlight",
    "setHighlightFocusRow",
    "clearFocusedRowHighlight",
    "relatedTarget",
    "getRelatedTarget",
    "FocusIndicator",
    "deltaX",
    "deltaY",
    "x",
    "getVisibleX",
    "colCount",
    "getVisibleColumnCount",
    "lang",
    "Number",
    "limit",
    "getVisibleColumnAtX",
    "elem",
    "getContentElement",
    "getDomElement",
    "addListenerOnce",
    "_getMetaColumnAtColumnX",
    "started",
    "blockHeaderElements",
    "getBlocker",
    "blockContent",
    "unblockHeaderElements",
    "unblock",
    "pos",
    "getContentLocation",
    "left",
    "right",
    "visXPos",
    "getMetaColumnCounts",
    "rightXPos",
    "counts",
    "getStatusBarVisible",
    "selectedRowCount",
    "getSelectedCount",
    "text",
    "trn",
    "setValue",
    "width",
    "getTotalWidth",
    "setPaneWidth",
    "setLayoutProperties",
    "getBounds",
    "horBar",
    "HORIZONTAL_SCROLLBAR",
    "verBar",
    "VERTICAL_SCROLLBAR",
    "horNeeded",
    "verNeeded",
    "getExcludeScrollerScrollbarsIfNotNeeded",
    "bars",
    "getNeededScrollBars",
    "setHorizontalScrollBarVisible",
    "getVerticalScrollBarVisible",
    "Timer",
    "once",
    "setVerticalScrollBarVisible",
    "fireDataEvent",
    "columnButton",
    "empty",
    "getMenu",
    "l",
    "menuButton",
    "getColumnName",
    "column",
    "bVisible",
    "isColumnVisible",
    "Assert",
    "assertInterface",
    "IColumnMenuItem",
    "_createColumnVisibilityCheckBoxHandler",
    "fireEvent",
    "type",
    "listener",
    "self",
    "arr",
    "push",
    "arguments",
    "join",
    "removeListenerById",
    "ids",
    "split",
    "shift",
    "removed",
    "call",
    "destruct",
    "dispose",
    "_disposeObjects",
    "_disposeMap"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Table\n *\n * A detailed description can be found in the package description\n * {@link qx.ui.table}.\n *\n * @childControl statusbar {qx.ui.basic.Label} label to show the status of the table\n * @childControl column-button {qx.ui.table.columnmenu.Button} button to open the column menu\n */\nqx.Class.define(\"qx.ui.table.Table\",\n{\n  extend : qx.ui.core.Widget,\n  include : qx.ui.core.MDragDropScrolling,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param tableModel {qx.ui.table.ITableModel ? null}\n   *   The table model to read the data from.\n   *\n   * @param custom {Map ? null}\n   *   A map provided to override the various supplemental classes allocated\n   *   within this constructor.  Each property must be a function which\n   *   returns an object instance, as indicated by shown the defaults listed\n   *   here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Manager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>selectionModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Basic(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePane</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Pane(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneHeader</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Header(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneScroller</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Scroller(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>columnMenu</dt>\n   *       <dd><pre class='javascript'>\n   *         function()\n   *         {\n   *           return new qx.ui.table.columnmenu.Button();\n   *         }\n   *       </pre></dd>\n   *   </dl>\n   */\n  construct : function(tableModel, custom)\n  {\n    this.base(arguments);\n    //\n    // Use default objects if custom objects are not specified\n    //\n    if (!custom) {\n      custom = { };\n    }\n\n    if (custom.initiallyHiddenColumns) {\n      this.setInitiallyHiddenColumns(custom.initiallyHiddenColumns);\n    }\n\n    if (custom.selectionManager) {\n      this.setNewSelectionManager(custom.selectionManager);\n    }\n\n    if (custom.selectionModel) {\n      this.setNewSelectionModel(custom.selectionModel);\n    }\n\n    if (custom.tableColumnModel) {\n      this.setNewTableColumnModel(custom.tableColumnModel);\n    }\n\n    if (custom.tablePane) {\n      this.setNewTablePane(custom.tablePane);\n    }\n\n    if (custom.tablePaneHeader) {\n      this.setNewTablePaneHeader(custom.tablePaneHeader);\n    }\n\n    if (custom.tablePaneScroller) {\n      this.setNewTablePaneScroller(custom.tablePaneScroller);\n    }\n\n    if (custom.tablePaneModel) {\n      this.setNewTablePaneModel(custom.tablePaneModel);\n    }\n\n    if (custom.columnMenu) {\n      this.setNewColumnMenu(custom.columnMenu);\n    }\n\n    this._setLayout(new qx.ui.layout.VBox());\n\n    // Create the child widgets\n    this.__scrollerParent = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n    this._add(this.__scrollerParent, {flex: 1});\n\n    // Allocate a default data row renderer\n    this.setDataRowRenderer(new qx.ui.table.rowrenderer.Default(this));\n\n    // Create the models\n    this.__selectionManager = this.getNewSelectionManager()(this);\n    this.setSelectionModel(this.getNewSelectionModel()(this));\n    this.setTableModel(tableModel || this.getEmptyTableModel());\n\n    // create the main meta column\n    this.setMetaColumnCounts([ -1 ]);\n\n    // Make focusable\n    this.setTabIndex(1);\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"focus\", this._onFocusChanged);\n    this.addListener(\"blur\", this._onFocusChanged);\n\n    // attach the resize listener to the last child of the layout. This\n    // ensures that all other children are laid out before\n    var spacer = new qx.ui.core.Widget().set({\n      height: 0\n    });\n    this._add(spacer);\n    spacer.addListener(\"resize\", this._onResize, this);\n\n    this.__focusedCol = null;\n    this.__focusedRow = null;\n\n    // add an event listener which updates the table content on locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n\n    this.initStatusBarVisible();\n\n    // If the table model has an init() method...\n    tableModel = this.getTableModel();\n    if (tableModel.init && typeof(tableModel.init) == \"function\")\n    {\n      // ... then call it now to allow the table model to affect table\n      // properties.\n      tableModel.init(this);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Dispatched before adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the top of the\n     * menu.\n     */\n    \"columnVisibilityMenuCreateStart\" : \"qx.event.type.Data\",\n\n    /**\n     * Dispatched after adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the bottom of the\n     * menu.\n     */\n    \"columnVisibilityMenuCreateEnd\" : \"qx.event.type.Data\",\n\n     /**\n      * Dispatched when the width of the table has changed.\n      */\n    \"tableWidthChanged\" : \"qx.event.type.Event\",\n\n    /**\n     * Dispatched when updating scrollbars discovers that a vertical scrollbar\n     * is needed when it previously was not, or vice versa.  The data is a\n     * boolean indicating whether a vertical scrollbar is now being used.\n     */\n    \"verticalScrollBarChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    \"cellTap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    \"cellDbltap\" : \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when the context menu is needed in a data cell\n     */\n    \"cellContextmenu\" : \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched after a cell editor is flushed.\n     *\n     * The data is a map containing this properties:\n     * <ul>\n     *   <li>row</li>\n     *   <li>col</li>\n     *   <li>value</li>\n     *   <li>oldValue</li>\n     * </ul>\n     */\n    \"dataEdited\" : \"qx.event.type.Data\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** Events that must be redirected to the scrollers. */\n    __redirectEvents : { cellTap: 1, cellDbltap: 1, cellContextmenu: 1 }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    appearance :\n    {\n      refine : true,\n      init : \"table\"\n    },\n\n\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n\n    minWidth :\n    {\n      refine : true,\n      init : 50\n    },\n\n    /**\n     * The list of columns that are initially hidden. This property is set by\n     * the constructor, from the value received in\n     * custom.initiallyHiddenColumns, and is only used when a column model is\n     * initialized. It can be of great benefit in tables with numerous columns\n     * where most are not initially visible. The process of creating the\n     * headers for all of the columns, only to have those columns discarded\n     * shortly thereafter when setColumnVisibility(false) is called, is a\n     * waste of (significant, in some browsers) time. Specifying the\n     * non-visible columns at constructor time can therefore avoid the initial\n     * creation of all of those superfluous widgets.\n     */\n    initiallyHiddenColumns :\n    {\n      init : null\n    },\n\n    /**\n     * Whether the widget contains content which may be selected by the user.\n     *\n     * If the value set to <code>true</code> the native browser selection can\n     * be used for text selection. But it is normally useful for\n     * forms fields, longer texts/documents, editors, etc.\n     *\n     * Note: This has no effect on Table!\n     */\n    selectable :\n    {\n      refine : true,\n      init : false\n    },\n\n\n    /** The selection model. */\n    selectionModel :\n    {\n      check : \"qx.ui.table.selection.Model\",\n      apply : \"_applySelectionModel\",\n      event : \"changeSelectionModel\"\n    },\n\n\n    /** The table model. */\n    tableModel :\n    {\n      check : \"qx.ui.table.ITableModel\",\n      apply : \"_applyTableModel\",\n      event : \"changeTableModel\"\n    },\n\n\n    /** The height of the table rows. */\n    rowHeight :\n    {\n      check : \"Number\",\n      init : 20,\n      apply : \"_applyRowHeight\",\n      event : \"changeRowHeight\",\n      themeable : true\n    },\n\n\n    /**\n     * Force line height to match row height.  May be disabled if cell\n     * renderers being used wish to render multiple lines of data within a\n     * cell.  (With the default setting, all but the first of multiple lines\n     * of data will not be visible.)\n     */\n    forceLineHeight :\n    {\n      check : \"Boolean\",\n      init  : true\n    },\n\n\n    /**\n     *  Whether the header cells are visible. When setting this to false,\n     *  you'll likely also want to set the {#columnVisibilityButtonVisible}\n     *  property to false as well, to entirely remove the header row.\n     */\n    headerCellsVisible :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyHeaderCellsVisible\",\n      themeable : true\n    },\n\n\n    /** The height of the header cells. */\n    headerCellHeight :\n    {\n      check : \"Integer\",\n      init : 16,\n      apply : \"_applyHeaderCellHeight\",\n      event : \"changeHeaderCellHeight\",\n      nullable : true,\n      themeable : true\n    },\n\n\n    /** Whether to show the status bar */\n    statusBarVisible :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyStatusBarVisible\"\n    },\n\n\n    /** The Statusbartext, set it, if you want some more Information */\n    additionalStatusBarText :\n    {\n      nullable : true,\n      init : null,\n      apply : \"_applyAdditionalStatusBarText\"\n    },\n\n\n    /** Whether to show the column visibility button */\n    columnVisibilityButtonVisible :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyColumnVisibilityButtonVisible\",\n      themeable : true\n    },\n\n\n    /**\n     * @type {Integer[]} The number of columns per meta column. If the last array entry is -1,\n     * this meta column will get the remaining columns.\n     */\n    metaColumnCounts :\n    {\n      check : \"Object\",\n      apply : \"_applyMetaColumnCounts\"\n    },\n\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyFocusCellOnPointerMove\"\n    },\n\n    /**\n     * Whether row focus change by keyboard also modifies selection\n     */\n    rowFocusChangeModifiesSelection :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyContextMenuFromDataCellsOnly\"\n    },\n\n    /**\n     * Whether the table should keep the first visible row complete. If set to false,\n     * the first row may be rendered partial, depending on the vertical scroll value.\n     */\n    keepFirstVisibleRowComplete :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyKeepFirstVisibleRowComplete\"\n    },\n\n\n    /**\n     * Whether the table cells should be updated when only the selection or the\n     * focus changed. This slows down the table update but allows to react on a\n     * changed selection or a changed focus in a cell renderer.\n     */\n    alwaysUpdateCells :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyResetSelectionOnHeaderTap\"\n    },\n\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyResetSelectionOnTapBelowRows\"\n    },\n\n\n    /** The renderer to use for styling the rows. */\n    dataRowRenderer :\n    {\n      check : \"qx.ui.table.IRowRenderer\",\n      init : null,\n      nullable : true,\n      event : \"changeDataRowRenderer\"\n    },\n\n\n    /**\n     * A function to call when before modal cell editor is opened.\n     *\n     * @signature function(cellEditor, cellInfo)\n     *\n     * @param cellEditor {qx.ui.window.Window}\n     *   The modal window which has been created for this cell editor\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell for which this cell editor was created.\n     *   It contains the following properties:\n     *       col, row, xPos, value\n     *\n     */\n    modalCellEditorPreOpenFunction :\n    {\n      check : \"Function\",\n      init : null,\n      nullable : true\n    },\n\n\n    /**\n     * By default, all Scrollers' (meta-columns') horizontal scrollbars are\n     * shown if any one is required. Allow not showing any that are not\n     * required.\n     */\n    excludeScrollerScrollbarsIfNotNeeded :\n    {\n      check : \"Boolean\",\n      init : false,\n      nullable : false\n    },\n\n\n    /**\n     * A function to instantiate a new column menu button.\n     */\n    newColumnMenu :\n    {\n      check : \"Function\",\n      init  : function() {\n        return new qx.ui.table.columnmenu.Button();\n      }\n    },\n\n\n    /**\n     * A function to instantiate a selection manager.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionManager :\n    {\n      check : \"Function\",\n      init : function(obj) {\n        return new qx.ui.table.selection.Manager(obj);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a selection model.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionModel :\n    {\n      check : \"Function\",\n      init : function(obj) {\n        return new qx.ui.table.selection.Model(obj);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a table column model.  This allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTableColumnModel :\n    {\n      check : \"Function\",\n      init : function(table) {\n        return new qx.ui.table.columnmodel.Basic(table);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePane :\n    {\n      check : \"Function\",\n      init : function(obj) {\n        return new qx.ui.table.pane.Pane(obj);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePaneHeader :\n    {\n      check : \"Function\",\n      init : function(obj) {\n        return new qx.ui.table.pane.Header(obj);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a table pane scroller.  this allows\n     * subclasses of Table to subclass this internal class.  To take effect,\n     * this property must be set before calling the Table constructor.\n     */\n    newTablePaneScroller :\n    {\n      check : \"Function\",\n      init : function(obj) {\n        return new qx.ui.table.pane.Scroller(obj);\n      }\n    },\n\n\n    /**\n     * A function to instantiate a table pane model.  this allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTablePaneModel :\n    {\n      check : \"Function\",\n      init : function(columnModel) {\n        return new qx.ui.table.pane.Model(columnModel);\n      }\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __focusedCol : null,\n    __focusedRow : null,\n\n    __scrollerParent : null,\n\n    __selectionManager : null,\n\n    __additionalStatusBarText : null,\n    __lastRowCount : null,\n    __internalChange : null,\n\n    __columnMenuButtons : null,\n    __columnModel : null,\n    __emptyTableModel : null,\n\n    __hadVerticalScrollBar : null,\n\n    __timer : null,\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n      case \"statusbar\":\n        control = new qx.ui.basic.Label();\n        control.set(\n          {\n            allowGrowX: true\n          });\n        this._add(control);\n        break;\n\n      case \"column-button\":\n        control = this.getNewColumnMenu()();\n        control.set({\n          focusable : false\n        });\n\n        // Create the initial menu too\n        var menu = control.factory(\"menu\", { table : this });\n\n        // Add a listener to initialize the column menu when it becomes visible\n        menu.addListener(\n          \"appear\",\n          this._initColumnMenu,\n          this\n        );\n\n        break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n\n    // property modifier\n    _applySelectionModel : function(value, old)\n    {\n      this.__selectionManager.setSelectionModel(value);\n\n      if (old != null) {\n        old.removeListener(\"changeSelection\", this._onSelectionChanged, this);\n      }\n\n      value.addListener(\"changeSelection\", this._onSelectionChanged, this);\n    },\n\n\n    // property modifier\n    _applyRowHeight : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].updateVerScrollBarMaximum();\n      }\n    },\n\n\n    // property modifier\n    _applyHeaderCellsVisible : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        if (value) {\n          scrollerArr[i]._showChildControl(\"header\");\n        } else {\n          scrollerArr[i]._excludeChildControl(\"header\");\n        }\n      }\n      // also hide the column visibility button\n      if(this.getColumnVisibilityButtonVisible()) {\n        this._applyColumnVisibilityButtonVisible(value);\n      }\n    },\n\n\n    // property modifier\n    _applyHeaderCellHeight : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().setHeight(value);\n      }\n    },\n\n\n    /**\n     * Get an empty table model instance to use for this table. Use this table\n     * to configure the table with no table model.\n     *\n     * @return {qx.ui.table.ITableModel} The empty table model\n     */\n    getEmptyTableModel : function()\n    {\n      if (!this.__emptyTableModel)\n      {\n        this.__emptyTableModel = new qx.ui.table.model.Simple();\n        this.__emptyTableModel.setColumns([]);\n        this.__emptyTableModel.setData([]);\n      }\n      return this.__emptyTableModel;\n    },\n\n\n    // property modifier\n    _applyTableModel : function(value, old)\n    {\n      this.getTableColumnModel().init(value.getColumnCount(), this);\n\n      if (old != null)\n      {\n        old.removeListener(\n          \"metaDataChanged\",\n          this._onTableModelMetaDataChanged, this\n        );\n\n        old.removeListener(\n          \"dataChanged\",\n          this._onTableModelDataChanged,\n          this);\n      }\n\n      value.addListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged, this\n      );\n\n      value.addListener(\n        \"dataChanged\",\n        this._onTableModelDataChanged,\n        this);\n\n      // Update the status bar\n      this._updateStatusBar();\n\n      this._updateTableData(\n        0, value.getRowCount(),\n        0, value.getColumnCount()\n      );\n      this._onTableModelMetaDataChanged();\n\n      // If the table model has an init() method, call it. We don't, however,\n      // call it if this is the initial setting of the table model, as the\n      // scrollers are not yet initialized. In that case, the init method is\n      // called explicitly by the Table constructor.\n      if (old && value.init && typeof(value.init) == \"function\")\n      {\n        value.init(this);\n      }\n    },\n\n\n    /**\n     * Get the The table column model.\n     *\n     * @return {qx.ui.table.columnmodel.Basic} The table's column model\n     */\n    getTableColumnModel : function()\n    {\n      if (!this.__columnModel)\n      {\n        var columnModel = this.__columnModel = this.getNewTableColumnModel()(this);\n\n        columnModel.addListener(\"visibilityChanged\", this._onColVisibilityChanged, this);\n        columnModel.addListener(\"widthChanged\", this._onColWidthChanged, this);\n        columnModel.addListener(\"orderChanged\", this._onColOrderChanged, this);\n\n        // Get the current table model\n        var tableModel = this.getTableModel();\n        columnModel.init(tableModel.getColumnCount(), this);\n\n        // Reset the table column model in each table pane model\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i=0; i<scrollerArr.length; i++)\n        {\n          var paneScroller = scrollerArr[i];\n          var paneModel = paneScroller.getTablePaneModel();\n          paneModel.setTableColumnModel(columnModel);\n        }\n      }\n      return this.__columnModel;\n    },\n\n\n    // property modifier\n    _applyStatusBarVisible : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"statusbar\");\n      } else {\n        this._excludeChildControl(\"statusbar\");\n      }\n\n      if (value) {\n        this._updateStatusBar();\n      }\n    },\n\n\n    // property modifier\n    _applyAdditionalStatusBarText : function(value, old)\n    {\n      this.__additionalStatusBarText = value;\n      this._updateStatusBar();\n    },\n\n\n    // property modifier\n    _applyColumnVisibilityButtonVisible : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"column-button\");\n      } else {\n        this._excludeChildControl(\"column-button\");\n      }\n    },\n\n\n    // property modifier\n    _applyMetaColumnCounts : function(value, old)\n    {\n      var metaColumnCounts = value;\n      var scrollerArr = this._getPaneScrollerArr();\n      var handlers = { };\n\n      if (value > old)\n      {\n        // Save event listeners on the redirected events so we can re-apply\n        // them to new scrollers.\n        var manager = qx.event.Registration.getManager(scrollerArr[0]);\n        for (var evName in qx.ui.table.Table.__redirectEvents)\n        {\n          handlers[evName] = { };\n          handlers[evName].capture = manager.getListeners(scrollerArr[0],\n                                                          evName,\n                                                          true);\n          handlers[evName].bubble = manager.getListeners(scrollerArr[0],\n                                                         evName,\n                                                         false);\n        }\n      }\n\n      // Remove the panes not needed any more\n      this._cleanUpMetaColumns(metaColumnCounts.length);\n\n      // Update the old panes\n      var leftX = 0;\n\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        var paneScroller = scrollerArr[i];\n        var paneModel = paneScroller.getTablePaneModel();\n        paneModel.setFirstColumnX(leftX);\n        paneModel.setMaxColumnCount(metaColumnCounts[i]);\n        leftX += metaColumnCounts[i];\n      }\n\n      // Add the new panes\n      if (metaColumnCounts.length > scrollerArr.length)\n      {\n        var columnModel = this.getTableColumnModel();\n\n        for (var i=scrollerArr.length; i<metaColumnCounts.length; i++)\n        {\n          var paneModel = this.getNewTablePaneModel()(columnModel);\n          paneModel.setFirstColumnX(leftX);\n          paneModel.setMaxColumnCount(metaColumnCounts[i]);\n          leftX += metaColumnCounts[i];\n\n          var paneScroller = this.getNewTablePaneScroller()(this);\n          paneScroller.setTablePaneModel(paneModel);\n\n          // Register event listener for vertical scrolling\n          paneScroller.addListener(\"changeScrollY\", this._onScrollY, this);\n\n          // Apply redirected events to this new scroller\n          for (evName in qx.ui.table.Table.__redirectEvents)\n          {\n            // On first setting of meta columns (constructing phase), there\n            // are no handlers to deal with yet.\n            if (! handlers[evName])\n            {\n              break;\n            }\n\n            if (handlers[evName].capture &&\n                handlers[evName].capture.length > 0)\n            {\n              var capture = handlers[evName].capture;\n              for (var j = 0; j < capture.length; j++)\n              {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = capture[j].context;\n                if (! context)\n                {\n                  context = this;\n                }\n                else if (context == scrollerArr[0])\n                {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  capture[j].handler,\n                  context,\n                  true);\n              }\n            }\n\n            if (handlers[evName].bubble &&\n                handlers[evName].bubble.length > 0)\n            {\n              var bubble = handlers[evName].bubble;\n              for (var j = 0; j < bubble.length; j++)\n              {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = bubble[j].context;\n                if (! context)\n                {\n                  context = this;\n                }\n                else if (context == scrollerArr[0])\n                {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  bubble[j].handler,\n                  context,\n                  false);\n              }\n            }\n          }\n\n          // last meta column is flexible\n          var flex = (i == metaColumnCounts.length - 1) ? 1 : 0;\n          this.__scrollerParent.add(paneScroller, {flex: flex});\n          scrollerArr = this._getPaneScrollerArr();\n        }\n      }\n\n      // Update all meta columns\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        var paneScroller = scrollerArr[i];\n        var isLast = (i == (scrollerArr.length - 1));\n\n        // Set the right header height\n        paneScroller.getHeader().setHeight(this.getHeaderCellHeight());\n\n        // Put the column visibility button in the top right corner of the last meta column\n        paneScroller.setTopRightWidget(isLast ? this.getChildControl(\"column-button\") : null);\n      }\n\n      if (!this.isColumnVisibilityButtonVisible()) {\n        this._excludeChildControl(\"column-button\");\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n\n    // property modifier\n    _applyFocusCellOnPointerMove : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].setFocusCellOnPointerMove(value);\n      }\n    },\n\n\n    // property modifier\n    _applyShowCellFocusIndicator : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].setShowCellFocusIndicator(value);\n      }\n    },\n\n\n    // property modifier\n    _applyContextMenuFromDataCellsOnly : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].setContextMenuFromDataCellsOnly(value);\n      }\n    },\n\n\n    // property modifier\n    _applyKeepFirstVisibleRowComplete : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onKeepFirstVisibleRowCompleteChanged();\n      }\n    },\n\n\n    // property modifier\n    _applyResetSelectionOnHeaderTap : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnHeaderTap(value);\n      }\n    },\n\n\n    // property modifier\n    _applyResetSelectionOnTapBelowRows : function(value, old)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnTapBelowRows(value);\n      }\n    },\n\n\n    /**\n     * Returns the selection manager.\n     *\n     * @return {qx.ui.table.selection.Manager} the selection manager.\n     */\n    getSelectionManager : function() {\n      return this.__selectionManager;\n    },\n\n\n    /**\n     * Returns an array containing all TablePaneScrollers in this table.\n     *\n     * @return {qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.\n     */\n    _getPaneScrollerArr : function() {\n      return this.__scrollerParent.getChildren();\n    },\n\n\n    /**\n     * Returns a TablePaneScroller of this table.\n     *\n     * @param metaColumn {Integer} the meta column to get the TablePaneScroller for.\n     * @return {qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.\n     */\n    getPaneScroller : function(metaColumn) {\n      return this._getPaneScrollerArr()[metaColumn];\n    },\n\n\n    /**\n     * Cleans up the meta columns.\n     *\n     * @param fromMetaColumn {Integer} the first meta column to clean up. All following\n     *      meta columns will be cleaned up, too. All previous meta columns will\n     *      stay unchanged. If 0 all meta columns will be cleaned up.\n     */\n    _cleanUpMetaColumns : function(fromMetaColumn)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      if (scrollerArr != null)\n      {\n        for (var i=scrollerArr.length-1; i>=fromMetaColumn; i--)\n        {\n          scrollerArr[i].destroy();\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the locale has changed.\n     *\n     * @param evt {Event} the event.\n     */\n    _onChangeLocale : function(evt)\n    {\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n\n    // overridden\n    _onChangeTheme : function() {\n      this.base(arguments);\n\n      this.getDataRowRenderer().initThemeValues();\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onSelectionChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onSelectionChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelMetaDataChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelMetaDataChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelDataChanged : function(evt)\n    {\n      var data = evt.getData();\n\n      this._updateTableData(\n        data.firstRow, data.lastRow,\n        data.firstColumn, data.lastColumn,\n        data.removeStart, data.removeCount\n      );\n    },\n\n\n    // overridden\n    _onContextMenuOpen : function(e)\n    {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n\n    /**\n     * To update the table if the table model has changed and remove selection.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     * @param removeStart {Integer ? null} The first index of the interval (including), to remove selection.\n     * @param removeCount {Integer ? null} The count of the interval, to remove selection.\n     */\n    _updateTableData : function(firstRow, lastRow, firstColumn, lastColumn, removeStart, removeCount)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // update selection if rows were removed\n      if (removeCount) {\n        this.getSelectionModel().removeSelectionInterval(removeStart, removeStart + removeCount - 1, true);\n        // remove focus if the focused row has been removed\n        if (this.__focusedRow >= removeStart && this.__focusedRow < (removeStart + removeCount)) {\n          this.setFocusedCell();\n        }\n      }\n\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        scrollerArr[i].onTableModelDataChanged(\n          firstRow, lastRow,\n          firstColumn, lastColumn\n        );\n      }\n\n      var rowCount = this.getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount)\n      {\n        this.__lastRowCount = rowCount;\n\n        this._updateScrollBarVisibility();\n        this._updateStatusBar();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when a TablePaneScroller has been scrolled vertically.\n     *\n     * @param evt {Map} the event.\n     */\n    _onScrollY : function(evt)\n    {\n      if (!this.__internalChange)\n      {\n        this.__internalChange = true;\n\n        // Set the same scroll position to all meta columns\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i=0; i<scrollerArr.length; i++) {\n          scrollerArr[i].setScrollY(evt.getData());\n        }\n\n        this.__internalChange = false;\n      }\n    },\n\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     * @deprecated {6.0} please use _onKeyDown instead!\n     */\n    _onKeyPress : function(evt)\n    {\n       qx.log.Logger.deprecatedMethodWarning(this._onKeyPress, \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\");\n       qx.log.Logger.deprecateMethodOverriding(this, qx.ui.table.Table, \"_onKeyPress\", \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\");\n       this._onKeyDown(evt);\n    },\n    /**\n     * Event handler. Called when on key down event\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     */\n    _onKeyDown : function(evt)\n    {\n      if (!this.getEnabled()) {\n        return;\n      }\n\n      // No editing mode\n      var oldFocusedRow = this.__focusedRow;\n      var consumed = false;\n\n      // Handle keys that are independent from the modifiers\n      var identifier = evt.getKeyIdentifier();\n\n      if (this.isEditing())\n      {\n        // Editing mode\n        if (evt.getModifiers() == 0)\n        {\n          switch(identifier)\n          {\n            case \"Enter\":\n              this.stopEditing();\n              var oldFocusedRow = this.__focusedRow;\n              this.moveFocusedCell(0, 1);\n\n              if (this.__focusedRow != oldFocusedRow) {\n                consumed = this.startEditing();\n              }\n\n              break;\n\n            case \"Escape\":\n              this.cancelEditing();\n              this.focus();\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        }\n\n      }\n      else\n      {\n        consumed = true;\n        // No editing mode\n        if (evt.isCtrlPressed())\n        {\n          // Handle keys that depend on modifiers\n\n          switch(identifier)\n          {\n            case \"A\": // Ctrl + A\n              var rowCount = this.getTableModel().getRowCount();\n\n              if (rowCount > 0) {\n                this.getSelectionModel().setSelectionInterval(0, rowCount - 1);\n              }\n\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        }\n        else\n        {\n          // Handle keys that are independent from the modifiers\n          switch(identifier)\n          {\n            case \"Space\":\n              this.__selectionManager.handleSelectKeyDown(this.__focusedRow, evt);\n              break;\n\n            case \"F2\":\n            case \"Enter\":\n              this.startEditing();\n              consumed = true;\n              break;\n\n            case \"Home\":\n              this.setFocusedCell(this.__focusedCol, 0, true);\n              break;\n\n            case \"End\":\n              var rowCount = this.getTableModel().getRowCount();\n              this.setFocusedCell(this.__focusedCol, rowCount - 1, true);\n              break;\n\n            case \"Left\":\n              this.moveFocusedCell(-1, 0);\n              break;\n\n            case \"Right\":\n              this.moveFocusedCell(1, 0);\n              break;\n\n            case \"Up\":\n              this.moveFocusedCell(0, -1);\n              break;\n\n            case \"Down\":\n              this.moveFocusedCell(0, 1);\n              break;\n\n            case \"PageUp\":\n            case \"PageDown\":\n              var scroller = this.getPaneScroller(0);\n              var pane = scroller.getTablePane();\n              var rowHeight = this.getRowHeight();\n              var direction = (identifier == \"PageUp\") ? -1 : 1;\n              rowCount = pane.getVisibleRowCount() - 1;\n              scroller.setScrollY(scroller.getScrollY() + direction * rowCount * rowHeight);\n              this.moveFocusedCell(0, direction * rowCount);\n              break;\n\n            default:\n              consumed = false;\n          }\n        }\n      }\n\n      if (oldFocusedRow != this.__focusedRow &&\n          this.getRowFocusChangeModifiesSelection())\n      {\n        // The focus moved -> Let the selection manager handle this event\n        this.__selectionManager.handleMoveKeyDown(this.__focusedRow, evt);\n      }\n\n      if (consumed)\n      {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the table gets the focus.\n     *\n     * @param evt {Map} the event.\n     */\n    _onFocusChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onColVisibilityChanged();\n      }\n\n      var data = evt.getData();\n      if (this.__columnMenuButtons != null && data.col != null &&\n          data.visible != null) {\n        this.__columnMenuButtons[data.col].setColumnVisible(data.visible);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n\n    /**\n     * Event handler. Called when the width of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColWidthChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        var data = evt.getData();\n        scrollerArr[i].setColumnWidth(data.col, data.newWidth);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColOrderChanged : function(evt)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].onColOrderChanged();\n      }\n\n      // A column may have been moved between meta columns\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n\n    /**\n     * Gets the TablePaneScroller at a certain x position in the page. If there is\n     * no TablePaneScroller at this position, null is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller or null.\n     */\n    getTablePaneScrollerAtPageX : function(pageX)\n    {\n      var metaCol = this._getMetaColumnAtPageX(pageX);\n      return (metaCol != -1) ? this.getPaneScroller(metaCol) : null;\n    },\n\n\n    /**\n     * Sets the currently focused cell. A value of <code>null</code> hides the\n     * focus cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param scrollVisible {Boolean ? false} whether to scroll the new focused cell\n     *          visible.\n     */\n    setFocusedCell : function(col, row, scrollVisible)\n    {\n      if (!this.isEditing() && (col != this.__focusedCol || row != this.__focusedRow))\n      {\n        if (col === null) {\n          col = 0;\n        }\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i=0; i<scrollerArr.length; i++) {\n          scrollerArr[i].setFocusedCell(col, row);\n        }\n\n        if (col != null && scrollVisible) {\n          this.scrollCellVisible(col, row);\n        }\n      }\n    },\n\n\n    /**\n     * Resets (clears) the current selection\n     */\n    resetSelection : function() {\n      this.getSelectionModel().resetSelection();\n    },\n\n\n    /**\n     * Resets the focused cell.\n     */\n    resetCellFocus : function() {\n      this.setFocusedCell(null, null, false);\n    },\n\n\n    /**\n     * Returns the column of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn : function() {\n      return this.__focusedCol;\n    },\n\n\n    /**\n     * Returns the row of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow : function() {\n      return this.__focusedRow;\n    },\n\n\n    /**\n     * Select whether the focused row is highlighted\n     *\n     * @param bHighlight {Boolean}\n     *   Flag indicating whether the focused row should be highlighted.\n     *\n     */\n    highlightFocusedRow : function(bHighlight)\n    {\n      this.getDataRowRenderer().setHighlightFocusRow(bHighlight);\n    },\n\n\n    /**\n     * Remove the highlighting of the current focus row.\n     *\n     * This is used to temporarily remove the highlighting of the currently\n     * focused row, and is expected to be used most typically by adding a\n     * listener on the \"pointerout\" event, so that the focus highlighting is\n     * suspended when the pointer leaves the table:\n     *\n     *     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);\n     *\n     * @param evt {qx.event.type.Pointer} Incoming pointer event\n     */\n    clearFocusedRowHighlight : function(evt)\n    {\n      if(evt)\n      {\n        var relatedTarget = evt.getRelatedTarget();\n        if (\n          relatedTarget instanceof qx.ui.table.pane.Pane ||\n          relatedTarget instanceof qx.ui.table.pane.FocusIndicator\n         ) {\n           return ;\n         }\n      }\n\n      // Remove focus from any cell that has it\n      this.resetCellFocus();\n\n      // Now, for each pane scroller...\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        // ... repaint without focus.\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n\n    /**\n     * Moves the focus.\n     *\n     * @param deltaX {Integer} The delta by which the focus should be moved on the x axis.\n     * @param deltaY {Integer} The delta by which the focus should be moved on the y axis.\n     */\n    moveFocusedCell : function(deltaX, deltaY)\n    {\n      var col = this.__focusedCol;\n      var row = this.__focusedRow;\n\n      // could also be undefined [BUG #4676]\n      if (col == null || row == null) {\n        return;\n      }\n\n      if (deltaX != 0)\n      {\n        var columnModel = this.getTableColumnModel();\n        var x = columnModel.getVisibleX(col);\n        var colCount = columnModel.getVisibleColumnCount();\n        x = qx.lang.Number.limit(x + deltaX, 0, colCount - 1);\n        col = columnModel.getVisibleColumnAtX(x);\n      }\n\n      if (deltaY != 0)\n      {\n        var tableModel = this.getTableModel();\n        row = qx.lang.Number.limit(row + deltaY, 0, tableModel.getRowCount() - 1);\n      }\n\n      this.setFocusedCell(col, row, true);\n    },\n\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible : function(col, row)\n    {\n      // get the dom element\n      var elem = this.getContentElement().getDomElement();\n      // if the dom element is not available, the table hasn't been rendered\n      if (!elem) {\n        // postpone the scroll until the table has appeared\n        this.addListenerOnce(\"appear\", function() {\n          this.scrollCellVisible(col, row);\n        }, this);\n      }\n\n      var columnModel = this.getTableColumnModel();\n      var x = columnModel.getVisibleX(col);\n\n      var metaColumn = this._getMetaColumnAtColumnX(x);\n\n      if (metaColumn != -1) {\n        this.getPaneScroller(metaColumn).scrollCellVisible(col, row);\n      }\n    },\n\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing : function()\n    {\n      if (this.__focusedCol != null)\n      {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        return this.getPaneScroller(metaColumn).isEditing();\n      }\n      return false;\n    },\n\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already editing\n     * or if the column is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing : function()\n    {\n      if (this.__focusedCol != null)\n      {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        var started = this.getPaneScroller(metaColumn).startEditing();\n        return started;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing : function()\n    {\n      if (this.__focusedCol != null)\n      {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).stopEditing();\n      }\n    },\n\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing : function()\n    {\n      if (this.__focusedCol != null)\n      {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).cancelEditing();\n      }\n    },\n\n\n    /**\n     * Update the table content of every attached table pane.\n     */\n    updateContent : function() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].getTablePane().updateContent(true);\n      }\n    },\n\n    /**\n     * Activates the blocker widgets on all column headers and the\n     * column button\n     */\n    blockHeaderElements : function()\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().blockContent(20);\n      }\n      this.getChildControl(\"column-button\").getBlocker().blockContent(20);\n    },\n\n\n    /**\n     * Deactivates the blocker widgets on all column headers and the\n     * column button\n     */\n    unblockHeaderElements : function()\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i=0; i<scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().unblock();\n      }\n      this.getChildControl(\"column-button\").getBlocker().unblock();\n    },\n\n    /**\n     * Gets the meta column at a certain x position in the page. If there is no\n     * meta column at this position, -1 is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {Integer} the index of the meta column or -1.\n     */\n    _getMetaColumnAtPageX : function(pageX)\n    {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        var pos = scrollerArr[i].getContentLocation();\n\n        if (pageX >= pos.left && pageX <= pos.right) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Returns the meta column a column is shown in. If the column is not shown at\n     * all, -1 is returned.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the meta column the column is shown in.\n     */\n    _getMetaColumnAtColumnX : function(visXPos)\n    {\n      var metaColumnCounts = this.getMetaColumnCounts();\n      var rightXPos = 0;\n\n      for (var i=0; i<metaColumnCounts.length; i++)\n      {\n        var counts = metaColumnCounts[i];\n        rightXPos += counts;\n\n        if (counts == -1 || visXPos < rightXPos) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Updates the text shown in the status bar.\n     */\n    _updateStatusBar : function()\n    {\n      var tableModel = this.getTableModel();\n\n      if (this.getStatusBarVisible())\n      {\n        var selectedRowCount = this.getSelectionModel().getSelectedCount();\n        var rowCount = tableModel.getRowCount();\n\n        var text;\n\n        if (rowCount >= 0)\n        {\n          if (selectedRowCount == 0) {\n            text = this.trn(\"one row\", \"%1 rows\", rowCount, rowCount);\n          } else {\n            text = this.trn(\"one of one row\", \"%1 of %2 rows\", rowCount, selectedRowCount, rowCount);\n          }\n        }\n\n        if (this.__additionalStatusBarText)\n        {\n          if (text) {\n            text += this.__additionalStatusBarText;\n          } else {\n            text = this.__additionalStatusBarText;\n          }\n        }\n\n        if (text) {\n          this.getChildControl(\"statusbar\").setValue(text);\n        }\n      }\n    },\n\n\n    /**\n     * Updates the widths of all scrollers.\n     */\n    _updateScrollerWidths : function()\n    {\n      // Give all scrollers except for the last one the wanted width\n      // (The last one has a flex with)\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        var isLast = (i == (scrollerArr.length - 1));\n        var width = scrollerArr[i].getTablePaneModel().getTotalWidth();\n        scrollerArr[i].setPaneWidth(width);\n\n        var flex = isLast ? 1 : 0;\n        scrollerArr[i].setLayoutProperties({flex: flex});\n      }\n    },\n\n\n    /**\n     * Updates the visibility of the scrollbars in the meta columns.\n     */\n    _updateScrollBarVisibility : function()\n    {\n      if (!this.getBounds()) {\n        return;\n      }\n\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // Check which scroll bars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n      var excludeScrollerScrollbarsIfNotNeeded;\n\n\n      // Determine whether we need to render horizontal scrollbars for meta\n      // columns that don't themselves actually require it\n      excludeScrollerScrollbarsIfNotNeeded =\n        this.getExcludeScrollerScrollbarsIfNotNeeded();\n\n      if (! excludeScrollerScrollbarsIfNotNeeded)\n      {\n        for (var i=0; i<scrollerArr.length; i++)\n        {\n          var isLast = (i == (scrollerArr.length - 1));\n\n          // Only show the last vertical scrollbar\n          var bars = scrollerArr[i].getNeededScrollBars(horNeeded, !isLast);\n\n          if (bars & horBar) {\n            horNeeded = true;\n          }\n\n          if (isLast && (bars & verBar)) {\n            verNeeded = true;\n          }\n        }\n      }\n\n      // Set the needed scrollbars\n      for (var i=0; i<scrollerArr.length; i++)\n      {\n        isLast = (i == (scrollerArr.length - 1));\n\n        // If we don't want to include scrollbars for meta columns that don't\n        // require it, find out whether this meta column requires it.\n        if (excludeScrollerScrollbarsIfNotNeeded)\n        {\n          horNeeded =\n            !! (scrollerArr[i].getNeededScrollBars(false, !isLast) & horBar);\n\n          // Show the horizontal scrollbar if needed. Specify null to indicate\n          // that the scrollbar should be hidden rather than excluded.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded || null);\n        }\n        else\n        {\n          // Show the horizontal scrollbar if needed.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded);\n        }\n\n        // If this is the last meta-column...\n        if (isLast)\n        {\n          // ... then get the current (old) use of vertical scroll bar\n          verNeeded =\n            !! (scrollerArr[i].getNeededScrollBars(false, false) & verBar);\n          if (this.__hadVerticalScrollBar == null) {\n            this.__hadVerticalScrollBar = scrollerArr[i].getVerticalScrollBarVisible();\n            this.__timer = qx.event.Timer.once(function()\n            {\n              // reset the last visible state of the vertical scroll bar\n              // in a timeout to prevent infinite loops.\n              this.__hadVerticalScrollBar = null;\n              this.__timer = null;\n            }, this, 0);\n          }\n        }\n\n        scrollerArr[i].setVerticalScrollBarVisible(isLast && verNeeded);\n\n        // If this is the last meta-column and the use of a vertical scroll bar\n        // has changed...\n        if (isLast && verNeeded != this.__hadVerticalScrollBar)\n        {\n          // ... then dispatch an event to any awaiting listeners\n          this.fireDataEvent(\"verticalScrollBarChanged\", verNeeded);\n        }\n      }\n    },\n\n\n    /**\n     * Initialize the column menu\n     */\n    _initColumnMenu : function()\n    {\n      var tableModel = this.getTableModel();\n      var columnModel = this.getTableColumnModel();\n\n      var columnButton = this.getChildControl(\"column-button\");\n\n      // Remove all items from the menu. We'll rebuild it here.\n      columnButton.empty();\n\n      // Inform listeners who may want to insert menu items at the beginning\n      var menu = columnButton.getMenu();\n      var data =\n      {\n        table        : this,\n        menu         : menu,\n        columnButton : columnButton\n      };\n      this.fireDataEvent(\"columnVisibilityMenuCreateStart\", data);\n\n      this.__columnMenuButtons = {};\n      for (var col=0, l=tableModel.getColumnCount(); col<l; col++)\n      {\n        var menuButton =\n          columnButton.factory(\"menu-button\",\n                               {\n                                 text     : tableModel.getColumnName(col),\n                                 column   : col,\n                                 bVisible : columnModel.isColumnVisible(col)\n                               });\n\n        qx.core.Assert.assertInterface(menuButton,\n                                       qx.ui.table.IColumnMenuItem);\n\n        menuButton.addListener(\n          \"changeColumnVisible\",\n          this._createColumnVisibilityCheckBoxHandler(col), this);\n        this.__columnMenuButtons[col] = menuButton;\n      }\n\n      // Inform listeners who may want to insert menu items at the end\n      data =\n      {\n        table        : this,\n        menu         : menu,\n        columnButton : columnButton\n      };\n      this.fireDataEvent(\"columnVisibilityMenuCreateEnd\", data);\n    },\n\n\n\n\n\n    /**\n     * Creates a handler for a check box of the column visibility menu.\n     *\n     * @param col {Integer} the model index of column to create the handler for.\n     * @return {Function} The created event handler.\n     */\n    _createColumnVisibilityCheckBoxHandler : function(col)\n    {\n      return function(evt)\n      {\n        var columnModel = this.getTableColumnModel();\n        columnModel.setColumnVisible(col, evt.getData());\n      };\n    },\n\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer} the model index of column.\n     * @param width {Integer} the new width in pixels.\n     */\n    setColumnWidth : function(col, width) {\n      this.getTableColumnModel().setColumnWidth(col, width);\n    },\n\n\n    /**\n     * Resize event handler\n     */\n    _onResize : function()\n    {\n      this.fireEvent(\"tableWidthChanged\");\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n\n    // overridden\n    addListener : function(type, listener, self, capture)\n    {\n      if (this.self(arguments).__redirectEvents[type])\n      {\n        // start the id with the type (needed for removing)\n        var id = [type];\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++)\n        {\n          id.push(arr[i].addListener.apply(arr[i], arguments));\n        }\n        // join the id's of every event with \"\n        return id.join('\"');\n      }\n      else\n      {\n        return this.base(arguments, type, listener, self, capture);\n      }\n    },\n\n\n    // overridden\n    removeListener : function(type, listener, self, capture)\n    {\n      if (this.self(arguments).__redirectEvents[type])\n      {\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++)\n        {\n          arr[i].removeListener.apply(arr[i], arguments);\n        }\n      }\n      else\n      {\n        this.base(arguments, type, listener, self, capture);\n      }\n    },\n\n\n    // overridden\n    removeListenerById : function(id) {\n      var ids = id.split('\"');\n      // type is the first entry of the connected id\n      var type = ids.shift();\n      if (this.self(arguments).__redirectEvents[type])\n      {\n        var removed = true;\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++)\n        {\n          removed = arr[i].removeListenerById.call(arr[i], ids[i]) && removed;\n        }\n        return removed;\n      }\n      else\n      {\n        return this.base(arguments, id);\n      }\n    },\n\n\n    destroy : function()\n    {\n      this.getChildControl(\"column-button\").getMenu().destroy();\n      this.base(arguments);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    // remove the event listener which handled the locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n\n    // we allocated these objects on init so we have to clean them up.\n    var selectionModel = this.getSelectionModel();\n    if (selectionModel) {\n      selectionModel.dispose();\n    }\n\n    var dataRowRenderer = this.getDataRowRenderer();\n    if (dataRowRenderer) {\n      dataRowRenderer.dispose();\n    }\n\n    this._cleanUpMetaColumns(0);\n    this.getTableColumnModel().dispose();\n    this._disposeObjects(\n      \"__selectionManager\", \"__scrollerParent\",\n      \"__emptyTableModel\", \"__emptyTableModel\",\n      \"__columnModel\", \"__timer\"\n    );\n    this._disposeMap(\"__columnMenuButtons\");\n  }\n});\n"
  ]
}