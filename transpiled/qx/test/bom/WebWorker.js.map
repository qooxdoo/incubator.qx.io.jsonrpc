{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/bom/WebWorker.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "_url",
    "_worker",
    "_send",
    "_isBuggyGecko",
    "core",
    "Environment",
    "get",
    "parseInt",
    "setUp",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "RequirementError",
    "bom",
    "WebWorker",
    "message",
    "fn",
    "addListener",
    "e",
    "assertType",
    "getData",
    "call",
    "postMessage",
    "tearDown",
    "dispose",
    "testConstructor",
    "assertInstance",
    "testMessageEvent",
    "mess",
    "assertIdentical",
    "testErrorEvent",
    "assertTrue",
    "test",
    "testPostMessageWithNumber",
    "testPostMessageWithBoolean",
    "testPostMessageWithNull",
    "testPostMessageWithObject",
    "a",
    "b",
    "c",
    "testPostMessageWithArray"
  ],
  "mappings": "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",
  "sourcesContent": [
    "\n\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n/* ************************************************************************\n\n\n************************************************************************ */\n/**\n *\n * @asset(qx/test/webworker.js)\n */\n\nqx.Class.define(\"qx.test.bom.WebWorker\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    _url: null,\n    _worker: null,\n    _send: null,\n\n    /*\n     * Firefox 8+ throws an exception (\"Could not get domain\") when trying\n     * to create a worker using a source URI that doesn't contain a TLD, e.g.\n     * \"localhost\" or an IP address.\n     *\n     * http://bugzilla.qooxdoo.org/show_bug.cgi?id=5565\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n     */\n    _isBuggyGecko : function()\n    {\n      return qx.core.Environment.get(\"engine.name\") === \"gecko\" &&\n        parseInt(qx.core.Environment.get(\"engine.version\"), 10) >= 8 &&\n        parseInt(qx.core.Environment.get(\"engine.version\"), 10) < 9;\n    },\n\n    setUp: function() {\n      this._url = qx.util.ResourceManager.getInstance().toUri(\"qx/test/webworker.js\");\n\n      if (this._isBuggyGecko()) {\n        throw new qx.dev.unit.RequirementError(\"foo\", \"Test skipped due to Firefox bug #683280\");\n      }\n\n      this._worker = new qx.bom.WebWorker(this._url);\n\n      this._send = function(message, fn) {\n        this._worker.addListener(\"message\", function(e) {\n          this.assertType(e.getData(), typeof message);\n          fn.call(this, message, e);\n        }, this);\n        this._worker.postMessage(message);\n      };\n    },\n\n    tearDown: function() {\n      this._worker.dispose();\n      this._worker = null;\n      this._send = null;\n      this._url = null;\n    },\n\n    testConstructor: function() {\n      this.assertInstance(this._worker, qx.bom.WebWorker);\n    },\n\n    testMessageEvent: function() {\n      this._send(\"message\", function(mess, e) {\n        this.assertIdentical(mess, e.getData());\n      });\n    },\n\n    testErrorEvent: function() {\n      var message = \"error\";\n\n      this._worker.addListener(\"error\", function(e) {\n        this.assertTrue(/error/.test(e.getData()));\n      }, this);\n      this._worker.postMessage(message);\n    },\n\n    testPostMessageWithNumber: function() {\n      this._send(1, function(mess, e) {\n        this.assertIdentical(mess, e.getData());\n      });\n    },\n\n    testPostMessageWithBoolean: function() {\n      this._send(true, function(mess, e) {\n        this.assertIdentical(mess, e.getData());\n      });\n    },\n\n    testPostMessageWithNull: function() {\n      this._send(null, function(mess, e) {\n        this.assertIdentical(mess, e.getData());\n      });\n    },\n\n    testPostMessageWithObject: function() {\n      //this._send({a:\"1\", b:2, c:3});\n      this._send({a:\"1\", b:2, c:true}, function(mess, e) {\n        this.assertIdentical(mess.a, e.getData().a);\n        this.assertIdentical(mess.b, e.getData().b);\n        this.assertIdentical(mess.c, e.getData().c);\n      });\n    },\n\n    testPostMessageWithArray: function() {\n      //this._send([\"1\", 2, true]);\n      this._send([\"1\", 2, true], function(mess, e) {\n        this.assertIdentical(mess[0], e.getData()[0]);\n        this.assertIdentical(mess[1], e.getData()[1]);\n        this.assertIdentical(mess[2], e.getData()[2]);\n      });\n    }\n  }\n});\n"
  ]
}