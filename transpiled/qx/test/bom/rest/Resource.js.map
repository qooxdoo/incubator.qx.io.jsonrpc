{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/bom/rest/Resource.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "MMock",
    "members",
    "setUp",
    "setUpDoubleRequest",
    "setUpResource",
    "bom",
    "request",
    "SimpleXhr",
    "restore",
    "req",
    "shallowStub",
    "injectStub",
    "__reqs",
    "push",
    "res",
    "dispose",
    "rest",
    "Resource",
    "map",
    "tearDown",
    "getSandbox",
    "forEach",
    "configureRequest",
    "lang",
    "Function",
    "bind",
    "assertCalledWith",
    "setMethod",
    "assertCalled",
    "setUrl",
    "assertNotCalled",
    "send",
    "get",
    "params",
    "data",
    "callback",
    "spy",
    "_action",
    "_params",
    "_data",
    "assertEquals",
    "_getRequestConfig",
    "method",
    "url",
    "setBaseUrl",
    "assertFunction",
    "require",
    "popular",
    "assertException",
    "Error",
    "invoke",
    "id",
    "stub",
    "returns",
    "description",
    "check",
    "create",
    "result",
    "assertSend",
    "toHashCode",
    "assertNumber",
    "req1",
    "req2",
    "post",
    "assertCalledOnce",
    "getSuccess",
    "addListener",
    "respond",
    "assertCalledTwice",
    "put",
    "article",
    "setRequestData",
    "commentId",
    "setRequestHeader",
    "getRequestHeader",
    "Json",
    "location",
    "stringify",
    "getMethod",
    "withArgs",
    "page",
    "size",
    "tag",
    "REQUIRED",
    "photo",
    "setting",
    "core",
    "Environment",
    "abort",
    "refresh",
    "sandbox",
    "useFakeTimers",
    "poll",
    "clock",
    "tick",
    "undefined",
    "msg",
    "timer",
    "numCalled",
    "stopPollByAction",
    "restartPollByAction",
    "responses",
    "e",
    "response",
    "longPoll",
    "respondSubsequent",
    "assertArrayEquals",
    "i",
    "j",
    "assertCallCount",
    "handlerId",
    "removeListenerById",
    "that",
    "assertEventFired",
    "assertIdentical",
    "action",
    "respondError",
    "listener",
    "on",
    "window",
    "setTimeout",
    "resume",
    "assertTrue",
    "calledOnce",
    "wait",
    "skip",
    "RequirementError",
    "hasDebug",
    "isDone",
    "getResponse",
    "emit",
    "reqIdx",
    "shouldStubResp",
    "validReqIdx",
    "requests",
    "Object",
    "keys",
    "propName",
    "indexOf",
    "Type",
    "isArray",
    "isObject",
    "reqWithin",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * @asset(qx/test/xmlhttp/*)\n */\nqx.Class.define(\"qx.test.bom.rest.Resource\",\n{\n  extend: qx.dev.unit.TestCase,\n\n  include : [qx.dev.unit.MRequirements,\n             qx.dev.unit.MMock],\n\n  members:\n  {\n    setUp: function() {\n      this.setUpDoubleRequest();\n      this.setUpResource();\n    },\n\n    setUpDoubleRequest: function() {\n      // Restore Xhr when wrapped before\n      if (typeof qx.bom.request.SimpleXhr.restore == \"function\") {\n        qx.bom.request.SimpleXhr.restore();\n      }\n\n      var req = this.req = new qx.bom.request.SimpleXhr();\n\n      // Stub request methods, but\n      // - leave event system intact (addListenerOnce)\n      // - leave disposable intact, cause test methods stub it themselves (dispose)\n      req = this.shallowStub(req, qx.bom.request.SimpleXhr, [\"dispose\", \"addListenerOnce\", \"getTransport\"]);\n\n      // Inject double and return\n      this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n\n      // Remember request for later disposal\n      this.__reqs = this.__reqs || [];\n      this.__reqs.push(this.req);\n\n      return req;\n    },\n\n    setUpResource: function() {\n      this.res && this.res.dispose();\n      var res = this.res = new qx.bom.rest.Resource();\n\n      // Default routes\n      res.map(\"get\", \"GET\", \"/photos\");\n      res.map(\"post\", \"POST\", \"/photos\");\n    },\n\n    tearDown: function() {\n      this.getSandbox().restore();\n      this.res.dispose();\n      this.__reqs.forEach(function(req) {\n        req.dispose();\n      });\n    },\n\n    //\n    // Configuration\n    //\n\n    \"test: configure request receives pre-configured but unsent request\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.configureRequest(qx.lang.Function.bind(function(req) {\n        this.assertCalledWith(req.setMethod, \"GET\");\n        this.assertCalled(req.setUrl, \"/photos\");\n        this.assertNotCalled(req.send);\n      }, this));\n\n      res.get();\n    },\n\n    \"test: configure request receives invocation details\": function() {\n      var res = this.res,\n          req = this.req,\n          params = {},\n          data = {},\n          callback;\n\n      callback = this.spy(qx.lang.Function.bind(function(req, _action, _params, _data) {\n        this.assertEquals(\"get\", _action, \"Unexpected action\");\n        this.assertEquals(params, _params, \"Unexpected params\");\n        this.assertEquals(data, _data, \"Unexpected data\");\n      }, this));\n      res.configureRequest(callback);\n\n      res.get(params, data);\n      this.assertCalled(callback);\n    },\n\n    //\n    // Route\n    //\n\n    \"test: map action\": function() {\n      var res = this.res,\n          params;\n\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n    },\n\n    \"test: map action when base URL\": function() {\n      var res = this.res,\n          params;\n\n      res.setBaseUrl(\"http://example.com\");\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"http://example.com/photos\", params.url);\n    },\n\n    \"test: map existing action\": function() {\n      var res = this.res,\n          params;\n\n      res.map(\"post\", \"GET\", \"/articles\");\n      params = res._getRequestConfig(\"post\");\n\n      this.assertEquals(\"/articles\", params.url);\n    },\n\n    \"test: map action creates method\": function() {\n      var res = this.res,\n          req = this.req;\n\n      this.assertFunction(res.get);\n    },\n\n    \"test: map action throws when existing method\": function() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n          req = this.req;\n\n      // For whatever reason\n      res.popular = function() {};\n\n      this.assertException(function() {\n        res.map(\"popular\", \"GET\", \"/photos/popular\");\n      }, Error);\n    },\n\n    \"test: map action does not throw when existing method is empty\": function() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n          req = this.req;\n\n      // For documentation purposes\n      res.get = (function() {});\n\n      res.map(\"get\", \"GET\", \"/photos/popular\");\n    },\n\n    \"test: dynamically created action forwards arguments\": function() {\n      var res = this.res,\n          req = this.req;\n\n      this.spy(res, \"invoke\");\n      res.get({}, 1, 2, 3);\n\n      this.assertCalledWith(res.invoke, \"get\", {}, 1, 2, 3);\n    },\n\n    \"test: dynamically created action returns what invoke returns\": function() {\n      var id = 1;\n      this.stub(this.res, \"invoke\").returns(id);\n      this.assertEquals(id, this.res.get());\n    },\n\n    \"test: map actions from description\": function() {\n      var req = this.req,\n          description,\n          res,\n          check = {},\n          params;\n\n      description =\n      {\n        get: { method: \"GET\", url: \"/photos\" },\n        create: { method: \"POST\", url: \"/photos\", check: check }\n      };\n\n      res = new qx.bom.rest.Resource(description);\n\n      params = res._getRequestConfig(\"get\");\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n\n      params = res._getRequestConfig(\"create\");\n      this.assertEquals(\"POST\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n      this.assertEquals(check, params.check);\n\n      res.dispose();\n    },\n\n    \"test: map action from description throws with non-object\": function() {\n      this.require([\"debug\"]);\n\n      this.assertException(function() {\n        var res = new qx.bom.rest.Resource([]);\n      });\n    },\n\n    \"test: map action from description throws with incomplete route\": function() {\n      this.require([\"debug\"]);\n\n      this.res.dispose();\n      this.assertException(function() {\n        var description =\n        {\n          get: { method: \"GET\"}\n        };\n        this.res = new qx.bom.rest.Resource(description);\n      }, Error, \"URL must be string for route 'get'\");\n    },\n\n    //\n    // Invoke\n    //\n\n    \"test: invoke action generically\": function() {\n      var res = this.res,\n          req = this.req,\n          result;\n\n      result = res.invoke(\"get\");\n\n      this.assertSend();\n    },\n\n    \"test: invoke action\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.get();\n\n      this.assertSend();\n    },\n\n    \"test: invoke action returns id of request\": function() {\n      var res = this.res,\n          req = this.req;\n\n      req.toHashCode.restore();\n\n      this.assertNumber(res.invoke(\"get\"));\n    },\n\n    \"test: invoke action while other is in progress\": function() {\n      var res = this.res,\n          req1, req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.assertCalledOnce(req1.send);\n      this.assertCalledOnce(req2.send);\n    },\n\n    \"test: invoke same action handles multiple requests\": function() {\n      var res = this.res,\n          req1, req2,\n          getSuccess = this.spy();\n\n      res.addListener(\"getSuccess\", getSuccess);\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.respond(\"\", req1);\n      this.respond(\"\", req2);\n\n      this.assertCalledTwice(getSuccess);\n    },\n\n    \"test: invoke action with positional params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({id: \"1\"});\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with positional params that evaluate to false\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({id: 0});\n\n      this.assertCalledWith(req.setUrl, \"/photos/0\");\n    },\n\n    \"test: invoke action with non-string params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({id: 1});\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with params and data\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"put\", \"PUT\", \"/articles/{id}\");\n      res.put({id: \"1\"}, {article: '{title: \"Affe\"}'});\n\n      // Note that with method GET, parameters are appended to the URLs query part.\n      // Please refer to the API docs of qx.io.request.AbstractRequest#requestData.\n      //\n      // res.get({id: \"1\"}, {lang: \"de\"});\n      // --> /articles/1/?lang=de\n\n      this.assertCalledWith(req.setRequestData, {article: '{title: \"Affe\"}'});\n    },\n\n    \"test: invoke action with multiple positional params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments/{commentId}\");\n      res.get({id: \"1\", commentId: \"2\"});\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments/2\");\n    },\n\n    \"test: invoke action with positional params in query\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments?id={commentId}\");\n      res.get({id: \"1\", commentId: \"2\"});\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments?id=2\");\n    },\n\n    \"test: invoke action with undefined params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.get();\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action with null params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.get(null);\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action when content type json\": function() {\n      var res = this.res,\n          req = this.req;\n\n      req.setRequestHeader.restore();\n      req.getRequestHeader.restore();\n\n      res.configureRequest(function(req) {\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n      });\n\n      this.spy(qx.lang.Json, \"stringify\");\n      var data = {location: \"Karlsruhe\"};\n      res.map(\"post\", \"POST\", \"/photos/{id}/meta\");\n      res.post({id: 1}, data);\n\n      this.assertCalledWith(req.setRequestData, '{\"location\":\"Karlsruhe\"}');\n      this.assertCalledWith(qx.lang.Json.stringify, data);\n    },\n\n    \"test: invoke action when content type json and get\": function() {\n      var res = this.res,\n          req = this.req;\n\n      req.setMethod.restore();\n      req.getMethod.restore();\n\n      this.spy(qx.lang.Json, \"stringify\");\n      req.getRequestHeader.withArgs(\"Content-Type\").returns(\"application/json\");\n      res.get();\n\n      this.assertNotCalled(qx.lang.Json.stringify);\n    },\n\n    \"test: invoke action for url with port\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"http://example.com:8080/photos/{id}\");\n      res.get({id: \"1\"});\n\n      this.assertCalledWith(req.setUrl, \"http://example.com:8080/photos/1\");\n    },\n\n    \"test: invoke action for relative url\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"{page}\");\n      res.get({page: \"index\"});\n      this.assertCalledWith(req.setUrl, \"index\");\n    },\n\n    \"test: invoke action for relative url with dots\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"../{page}\");\n      res.get({page: \"index\"});\n      this.assertCalledWith(req.setUrl, \"../index\");\n    },\n\n    \"test: invoke action for route with check\": function() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/zoom/{id}\", {id: /\\d+/});\n      res.get({id: \"123\"});\n\n      this.assertSend(\"GET\", \"/photos/zoom/123\");\n    },\n\n    \"test: invoke action fills in empty string when missing param and no default\": function() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag}\");\n      res.get();\n\n      this.assertSend(\"GET\", \"/photos/\");\n    },\n\n    \"test: invoke action fills in default when missing param\": function() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag=recent}/{size}\");\n      res.get({size: \"large\"});\n\n      this.assertSend(\"GET\", \"/photos/recent/large\");\n    },\n\n    \"test: invoke action throws when missing required positional param\": function() {\n      var res = this.res;\n\n      // Require positional param\n      res.map(\"get\", \"GET\", \"/photos/{tag}\", {tag: qx.bom.rest.Resource.REQUIRED});\n      this.assertException(function() {\n        res.get();\n      }, Error, \"Missing parameter 'tag'\");\n    },\n\n    \"test: invoke action throws when missing required request param\": function() {\n      var res = new qx.bom.rest.Resource();\n\n      // Require request body param\n      res.map(\"post\", \"POST\", \"/photos/\", {photo: qx.bom.rest.Resource.REQUIRED});\n      this.assertException(function() {\n        res.post();\n      }, Error, \"Missing parameter 'photo'\");\n    },\n\n    \"test: invoke action throws when param not match check\": function() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n      this.assertException(function() {\n        res.get({id: \"FAIL\"});\n      }, Error, \"Parameter 'id' is invalid\");\n    },\n\n    \"test: invoke action ignores invalid check in production\": function() {\n      this.require([\"debug\"]);\n\n      var res = this.res;\n\n      var setting = this.stub(qx.core.Environment, \"get\").withArgs(\"qx.debug\");\n      setting.returns(false);\n\n      // Invalid check\n      res.map(\"get\", \"GET\", \"/photos/{id}\", {id: \"\"});\n      res.get({id: 1});\n    },\n\n    //\n    // Abort\n    //\n\n    \"test: abort action\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.get();\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    \"test: abort action when multiple requests\": function() {\n      var res = this.res,\n          req1, req2;\n\n      req1 = this.setUpDoubleRequest();\n      res.get();\n\n      req2 = this.setUpDoubleRequest();\n      res.get();\n\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req1.abort);\n      this.assertCalledOnce(req2.abort);\n    },\n\n    \"test: abort by action id\": function() {\n      var res = this.res,\n          req = this.req;\n\n      req.toHashCode.restore();\n\n      var id = res.get();\n      res.abort(id);\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    //\n    // Helper\n    //\n\n    \"test: refresh action\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.get();\n      this.assertSend();\n\n      res.refresh(\"get\");\n      this.assertSend();\n    },\n\n    \"test: refresh action replaying previous params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({id: \"1\"});\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.refresh(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledWith(res.refresh, \"get\");\n      this.assertCalledOnce(res.refresh);\n    },\n\n    \"test: not poll action when no response received yet\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      sandbox.clock.tick(20);\n\n      this.assertNotCalled(res.refresh);\n    },\n\n    \"test: poll action immediately\": function() {\n      var res = this.res;\n\n      this.spy(res, \"invoke\");\n      res.poll(\"get\", 10, undefined, true);\n      this.assertCalled(res.invoke);\n    },\n\n    \"test: poll action sets initial params\": function() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      this.stub(res, \"invoke\");\n\n      res.poll(\"get\", 10, {id: \"1\"}, true);\n      this.assertCalledWith(res.invoke, \"get\", {id: \"1\"});\n    },\n\n    \"test: poll action replaying previous params\": function() {\n      var res = this.res,\n          req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({id: \"1\"});\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.poll(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action repeatedly ends previous timer\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox(),\n          msg;\n\n      sandbox.useFakeTimers();\n      this.stub(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      res.poll(\"get\", 100);\n      this.respond();\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    \"test: poll many actions\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox(),\n          spy,\n          get,\n          post;\n\n      this.stub(this.req, \"dispose\");\n      sandbox.useFakeTimers();\n\n      spy = this.spy(res, \"refresh\");\n      get = spy.withArgs(\"get\");\n      post = spy.withArgs(\"post\");\n\n      res.poll(\"get\", 10);\n      res.poll(\"post\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledOnce(get);\n      this.assertCalledOnce(post);\n\n      this.req.dispose.restore();\n      this.req.dispose();\n    },\n\n    \"test: end poll action\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox(),\n          timer,\n          numCalled;\n\n      sandbox.useFakeTimers();\n\n      this.spy(res, \"refresh\");\n      res.poll(\"get\", 10);\n      this.respond();\n\n      // 10ms invoke, 20ms refresh, 30ms refresh\n      sandbox.clock.tick(30);\n      res.stopPollByAction(\"get\");\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    \"test: end poll action does not end polling of other action\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox(),\n          timer,\n          spy;\n\n      sandbox.useFakeTimers();\n      spy = this.spy(res, \"refresh\").withArgs(\"get\");\n      this.respond();\n\n      res.poll(\"get\", 10);\n      res.poll(\"post\", 10);\n      sandbox.clock.tick(20);\n      res.stopPollByAction(\"post\");\n      sandbox.clock.tick(10);\n\n      this.assertCalledTwice(spy);\n    },\n\n    \"test: restart poll action\": function() {\n      var res = this.res,\n          sandbox = this.getSandbox(),\n          timer;\n\n      sandbox.useFakeTimers();\n      this.respond();\n\n      res.poll(\"get\", 10);\n      sandbox.clock.tick(10);\n      res.stopPollByAction(\"get\");\n\n      this.spy(res, \"refresh\");\n      res.restartPollByAction(\"get\");\n      sandbox.clock.tick(10);\n      this.assertCalled(res.refresh);\n    },\n\n    \"test: long poll action\": function() {\n      var res = this.res,\n          req = this.req,\n          responses = [];\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      res.addListener(\"getSuccess\", function(e) {\n        responses.push(e.response);\n      }, this);\n      res.longPoll(\"get\");\n\n      // longPoll() sets up new request when receiving a response\n      this.respondSubsequent(\"1\", 0, true);\n      this.respondSubsequent(\"2\", 1, true);\n      this.respondSubsequent(\"3\", 2, true);\n\n      this.assertArrayEquals([\"1\", \"2\", \"3\"], responses);\n    },\n\n    \"test: throttle long poll\": function() {\n      var res = this.res,\n          req = this.req;\n\n      this.stub(req, \"dispose\");\n      this.spy(res, \"refresh\");\n      this.stub(qx.bom.rest.Resource, \"POLL_THROTTLE_COUNT\", \"3\");\n\n      res.longPoll(\"get\");\n\n      // A number of immediate responses, above count\n      for (var i=0; i < 4; i++) {\n        this.respond();\n      }\n\n      res.refresh = function() {\n        throw new Error(\"With throttling in effect, \" +\n          \"must not make new request.\");\n      };\n\n      // Throttling\n      this.respond();\n    },\n\n    \"test: not throttle long poll when not received within limit\": function() {\n      var res = this.res,\n          req = this.req,\n          sandbox = this.getSandbox();\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of delayed responses, above count\n      for (var i=0; i < 31; i++) {\n        sandbox.clock.tick(101);\n        this.respondSubsequent(null, i);\n      }\n\n      this.spy(res, \"refresh\");\n      sandbox.clock.tick(101);\n\n      this.respondSubsequent(null, i);\n      this.assertCalled(res.refresh);\n    },\n\n    \"test: not throttle long poll when not received subsequently\": function() {\n      var res = this.res,\n          req = this.req,\n          sandbox = this.getSandbox();\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of immediate responses\n      for (var i=0; i < 30; i++) {\n        this.respondSubsequent(null, i);\n      }\n\n      // Delayed response\n      sandbox.clock.tick(101);\n      this.respondSubsequent(null, i++);\n\n      // // More immediate responses, total count above limit\n      this.spy(res, \"refresh\");\n      for (var j=0; j < 10; j++) {\n        this.respondSubsequent(null, (i+j));\n      }\n\n      this.assertCallCount(res.refresh, 10);\n    },\n\n    \"test: end long poll action\": function() {\n      var res = this.res,\n          req = this.req,\n          handlerId,\n          msg;\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n      this.spy(res, \"refresh\");\n\n      handlerId = res.longPoll(\"get\");\n\n      this.respondSubsequent(null, 0);\n      this.respondSubsequent(null, 1);\n\n      res.removeListenerById(handlerId);\n      this.respondSubsequent(null, 2);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    //\n    // Events\n    //\n\n    \"test: fire actionSuccess\": function() {\n      var res = this.res,\n          req = this.req,\n          that = this;\n\n      res.get();\n      this.assertEventFired(res, \"getSuccess\", function() {\n        that.respond(\"Affe\");\n      }, function(e) {\n        that.assertEquals(\"Affe\", e.response);\n        that.assertIdentical(req, e.request);\n        that.assertEquals(\"get\", e.action);\n      });\n    },\n\n    \"test: fire success\": function() {\n      var res = this.res,\n          req = this.req,\n          that = this;\n\n      res.get();\n      this.assertEventFired(res, \"success\", function() {\n        that.respond(\"Affe\");\n      }, function(e) {\n        that.assertEquals(\"Affe\", e.response);\n        that.assertIdentical(req, e.request);\n        that.assertEquals(\"get\", e.action);\n      });\n    },\n\n    \"test: fire actionError\": function() {\n      var res = this.res,\n          req = this.req,\n          that = this;\n\n      res.get();\n      this.assertEventFired(res, \"getError\", function() {\n        that.respondError();\n      }, function(e) {\n        that.assertIdentical(req, e.request);\n        that.assertEquals(\"get\", e.action);\n      });\n    },\n\n    \"test: fire error\": function() {\n      var res = this.res,\n          req = this.req,\n          that = this;\n\n      res.get();\n      this.assertEventFired(res, \"error\", function() {\n        that.respondError();\n      }, function(e) {\n        that.assertIdentical(req, e.request);\n        that.assertEquals(\"get\", e.action);\n      });\n    },\n\n    \"test: fire started\" : function() {\n\n      qx.bom.request.SimpleXhr.restore();\n\n      var res = this.res,\n          req = this.req,\n          that = this;\n\n      var listener = this.spy();\n      res.on(\"started\", listener);\n      res.get();\n\n      window.setTimeout(function() {\n        this.resume(function() {\n          this.assertTrue(listener.calledOnce);\n        }, this);\n      }.bind(this), 200);\n\n      this.wait(500);\n    },\n\n    //\n    // Dispose\n    //\n\n    \"test: dispose requests\": function() {\n      var res = this.res,\n          req1, req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose requests of same action\": function() {\n      var res = this.res,\n          req1, req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose request on loadEnd\": function() {\n      var res = this.res,\n          req = this.req;\n\n      this.spy(req, \"dispose\");\n\n      res.get();\n      this.respond();\n\n      window.setTimeout(function() {\n        this.resume(function() {\n          this.assertCalledOnce(req.dispose);\n        }, this);\n      }.bind(this), 100);\n\n      this.wait(200);\n    },\n\n    assertSend: function(method, url) {\n      var req = this.req;\n\n      method = method || \"GET\";\n      url = url || \"/photos\";\n\n      this.assertCalledWith(req.setMethod, method);\n      this.assertCalledWith(req.setUrl, url);\n      this.assertCalled(req.send);\n    },\n\n    skip: function(msg) {\n      throw new qx.dev.unit.RequirementError(null, msg);\n    },\n\n    hasDebug: function() {\n      return qx.core.Environment.get(\"qx.debug\");\n    },\n\n    // Fake response\n    respond: function(response, req) {\n      req = req || this.req;\n      response = response || \"\";\n\n      req.isDone.returns(true);\n      req.getResponse.returns(response);\n      req.emit(\"success\");\n      req.emit(\"loadEnd\");\n    },\n\n    // Fake response but find and manipulate matching requests *within* res\n    // which is important for tests with more than one request (e.g. poll and long poll)\n    respondSubsequent: function(response, reqIdx, shouldStubResp) {\n      var response = response || \"\",\n          validReqIdx = (reqIdx !== undefined);\n\n      // this.res.__requests isn't available after 'privates' optimization\n      // so find it by some kind of feature detection - this isn't beautiful,\n      // but adding a protected getter just for that is worse\n      var requests = \"\";\n      Object.keys(this.res).forEach(function(propName) {\n        if (propName.indexOf(\"__\") === 0 &&\n            \"get\" in this.res[propName] &&\n            qx.lang.Type.isArray(this.res[propName].get) &&\n            qx.lang.Type.isObject(this.res[propName].get[0]) &&\n            \"$$hash\" in this.res[propName].get[0]) {\n          requests = propName;\n        }\n      }, this);\n\n      if (validReqIdx && requests) {\n        var reqWithin = this.res[requests].get[reqIdx];\n        if (shouldStubResp) {\n          this.stub(reqWithin, \"isDone\");\n          this.stub(reqWithin, \"getResponse\");\n          reqWithin.isDone.returns(true);\n          reqWithin.getResponse.returns(response);\n        }\n        reqWithin.emit(\"success\");\n        reqWithin.emit(\"loadEnd\");\n        this.res[requests].get[reqIdx] = reqWithin;\n      }\n    },\n\n    // Fake erroneous response\n    respondError: function() {\n      var req = this.req;\n      req.emit(\"fail\");\n      req.emit(\"loadEnd\");\n    }\n\n  }\n});\n"
  ]
}