{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/bom/storage/WebStorageTestCase.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "_storage",
    "setUp",
    "_getStorage",
    "clear",
    "tearDown",
    "testItem",
    "assertNull",
    "getItem",
    "setItem",
    "assertEquals",
    "removeItem",
    "assertArrayEquals",
    "assertMap",
    "testGetKey",
    "assertNotEquals",
    "Object",
    "keys",
    "getStorage",
    "indexOf",
    "testLength",
    "getLength",
    "i",
    "testClear",
    "testForEach",
    "forEach",
    "key",
    "item",
    "test",
    "bom",
    "storage",
    "WebStorageTestCase"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.bom.storage.WebStorageTestCase\",\n{\n  type : \"abstract\",\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    _storage: null,\n\n    setUp : function() {\n      this._storage = this._getStorage();\n      this._storage.clear();\n    },\n\n    tearDown : function() {\n      this._storage = null;\n    },\n\n    testItem: function() {\n      this.assertNull(this._storage.getItem(\"key1\"));\n\n      this._storage.setItem(\"key1\",\"value1\");\n      this.assertEquals(\"value1\", this._storage.getItem(\"key1\"));\n\n      this._storage.removeItem(\"key1\");\n      this.assertNull(this._storage.getItem(\"key1\"));\n\n      this._storage.setItem(\"key2\", [1,\"a\"]);\n      this.assertArrayEquals([1,\"a\"], this._storage.getItem(\"key2\"));\n\n      this._storage.setItem(\"key2\", {\"a\": 1, \"b\": \"c\"});\n      this.assertMap({\"a\": 1, \"b\": \"c\"}, this._storage.getItem(\"key2\"));\n\n      //overriding\n      this._storage.setItem(\"key2\", 12);\n      this.assertEquals(12, this._storage.getItem(\"key2\"));\n    },\n\n    testGetKey: function() {\n      // the order is unreliable, so just test that the getKey works\n      this._storage.setItem(\"key1\",\"value\");\n      this.assertNotEquals(-1, Object.keys(this._storage.getStorage()).indexOf(\"key1\"));\n    },\n\n    testLength: function() {\n      this.assertEquals(0, this._storage.getLength());\n\n      for (var i=0; i<10; i++) {\n        this._storage.setItem(\"key\"+i,\"value\");\n      }\n\n      this.assertEquals(10, this._storage.getLength());\n    },\n\n    testClear: function() {\n      for (var i=0; i<10; i++) {\n        this._storage.setItem(\"key\"+i,\"value\");\n      }\n      this.assertEquals(10, this._storage.getLength());\n      this._storage.clear();\n      this.assertEquals(0, this._storage.getLength());\n    },\n\n    testForEach: function() {\n      var i;\n      for (i=0; i<10; i++) {\n        this._storage.setItem(\"key\"+i,\"value\");\n      }\n      //don't rely on the order\n      i = 0;\n      this._storage.forEach(function(key, item) {\n        this.assertEquals(this._storage.getItem(key), item);\n        i++;\n      }, this);\n      this.assertEquals(10, i);\n    }\n  }\n});\n"
  ]
}