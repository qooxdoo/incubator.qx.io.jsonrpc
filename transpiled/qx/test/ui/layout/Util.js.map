{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/ui/layout/Util.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testFlex",
    "numRuns",
    "run",
    "len",
    "Math",
    "round",
    "random",
    "sumMin",
    "sumMax",
    "sumValue",
    "flexibles",
    "j",
    "min",
    "max",
    "value",
    "flex",
    "ceil",
    "availWidth",
    "result",
    "ui",
    "layout",
    "Util",
    "computeFlexOffsets",
    "sum",
    "i",
    "newSize",
    "offset",
    "assert",
    "assertEquals",
    "testFlexFairness",
    "sumWeights",
    "offsets",
    "error",
    "assertTrue",
    "abs",
    "test"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAkBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,GAAH,CAAOC,IAAP,CAAYC,QADvB;AAGEC,IAAAA,OAAO,EACP;AACEC,MAAAA,QAAQ,EAAG,oBACX;AACE,YAAIC,OAAO,GAAG,GAAd;;AAEA,aAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACD,OAApB,EAA6BC,GAAG,EAAhC,EACA;AACE,cAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA3C;AACA,cAAIC,MAAM,GAAG,CAAb;AACA,cAAIC,MAAM,GAAG,CAAb;AACA,cAAIC,QAAQ,GAAG,CAAf;AACA,cAAIC,SAAS,GAAG,EAAhB;;AAEA,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACR,GAAhB,EAAqBQ,CAAC,EAAtB,EACA;AACE,gBAAIC,GAAG,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAV;AACA,gBAAIO,GAAG,GAAGD,GAAG,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAN,GAAuC,CAAjD;AACA,gBAAIQ,KAAK,GAAGF,GAAG,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBO,GAAG,GAAGD,GAAvB,CAAX,CAAlB;AAEAJ,YAAAA,MAAM,IAAIK,GAAV;AACAN,YAAAA,MAAM,IAAIK,GAAV;AACAH,YAAAA,QAAQ,IAAIK,KAAZ;AAEAJ,YAAAA,SAAS,CAACC,CAAD,CAAT,GAAe;AACbC,cAAAA,GAAG,EAAEA,GADQ;AAEbE,cAAAA,KAAK,EAAEA,KAFM;AAGbD,cAAAA,GAAG,EAAEA,GAHQ;AAIbE,cAAAA,IAAI,EAAGX,IAAI,CAACY,IAAL,CAAUZ,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAJM,CAIuB;;AAJvB,aAAf;AAMD;;AAED,cAAIW,UAAU,GAAGb,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAjB;AAEA,cAAIY,MAAM,GAAG7B,EAAE,CAAC8B,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkBC,kBAAlB,CAAqCZ,SAArC,EAAgDO,UAAhD,EAA4DR,QAA5D,CAAb,CA3BF,CA6BE;;AACA,cAAIc,GAAG,GAAG,CAAV;;AACA,eAAK,IAAIC,CAAT,IAAcN,MAAd,EACA;AACE,gBAAIO,OAAO,GAAGf,SAAS,CAACc,CAAD,CAAT,CAAaV,KAAb,GAAqBI,MAAM,CAACM,CAAD,CAAN,CAAUE,MAA7C;AAEAH,YAAAA,GAAG,IAAIE,OAAP;AACA,iBAAKE,MAAL,CAAYjB,SAAS,CAACc,CAAD,CAAT,CAAaZ,GAAb,IAAoBa,OAAhC;AACA,iBAAKE,MAAL,CAAYjB,SAAS,CAACc,CAAD,CAAT,CAAaX,GAAb,IAAoBY,OAAhC;AACD;;AAED,cAAIR,UAAU,KAAKM,GAAnB,EAAwB;AACtB,iBAAKI,MAAL,CAAYJ,GAAG,IAAIhB,MAAP,IAAiBgB,GAAG,IAAIf,MAApC;AACD,WAFD,MAEO;AACL,iBAAKoB,YAAL,CAAkBX,UAAlB,EAA8BM,GAA9B;AACD;AACF;AACF,OApDH;;AAuDE;;;AAGAM,MAAAA,gBAAgB,EAAG,4BACnB;AACE,YAAI5B,OAAO,GAAG,GAAd;;AAEA,aAAK,IAAIC,GAAG,GAAC,CAAb,EAAgBA,GAAG,GAACD,OAApB,EAA6BC,GAAG,EAAhC,EACA;AACE,cAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAA3C;AACA,cAAIC,MAAM,GAAG,CAAb;AACA,cAAIC,MAAM,GAAG,CAAb;AACA,cAAIC,QAAQ,GAAG,CAAf;AACA,cAAIqB,UAAU,GAAG,CAAjB;AACA,cAAIpB,SAAS,GAAG,EAAhB;;AAEA,eAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACR,GAAhB,EAAqBQ,CAAC,EAAtB,EACA;AACE,gBAAIC,GAAG,GAAG,CAAV;AACA,gBAAIC,GAAG,GAAG,KAAV;AACA,gBAAIC,KAAK,GAAGV,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAZ;AAEAE,YAAAA,MAAM,IAAIK,GAAV;AACAN,YAAAA,MAAM,IAAIK,GAAV;AACAH,YAAAA,QAAQ,IAAIK,KAAZ;AAEAJ,YAAAA,SAAS,CAACC,CAAD,CAAT,GAAe;AACbC,cAAAA,GAAG,EAAEA,GADQ;AAEbE,cAAAA,KAAK,EAAEA,KAFM;AAGbD,cAAAA,GAAG,EAAEA,GAHQ;AAIbE,cAAAA,IAAI,EAAG,IAAIX,IAAI,CAACY,IAAL,CAAUZ,IAAI,CAACE,MAAL,KAAgB,CAA1B,CAJE,CAI2B;;AAJ3B,aAAf;AAMAwB,YAAAA,UAAU,IAAIpB,SAAS,CAACC,CAAD,CAAT,CAAaI,IAA3B;AACD;;AAED,cAAIE,UAAU,GAAGR,QAAQ,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAA5B;AACA,cAAIY,MAAM,GAAG7B,EAAE,CAAC8B,EAAH,CAAMC,MAAN,CAAaC,IAAb,CAAkBC,kBAAlB,CAAqCZ,SAArC,EAAgDO,UAAhD,EAA4DR,QAA5D,CAAb;AAEA,cAAIsB,OAAO,GAAG,CAAd;;AACA,eAAK,IAAIP,CAAT,IAAcN,MAAd,EAAsB;AACpBa,YAAAA,OAAO,IAAIb,MAAM,CAACM,CAAD,CAAN,CAAUE,MAArB;AACD;;AAED,cAAII,UAAU,GAAG,CAAjB,EACA;AACE,gBAAIjC,IAAI,GAAGkC,OAAO,GAAGD,UAArB;;AACA,iBAAK,IAAInB,CAAT,IAAcO,MAAd,EACA;AACE,kBAAIc,KAAK,GAAGd,MAAM,CAACP,CAAD,CAAN,CAAUe,MAAV,GAAoB7B,IAAI,GAAGa,SAAS,CAACC,CAAD,CAAT,CAAaI,IAApD;AACA,mBAAKkB,UAAL,CAAgB7B,IAAI,CAAC8B,GAAL,CAASF,KAAT,KAAmB,CAAnC,EAAsC,sCAAtC;AACD;AACF;AACF;AACF;AA5GH;AAJF,GADA;AAlBA3C,EAAAA,EAAE,CAAC8C,IAAH,CAAQhB,EAAR,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB7B,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.layout.Util\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    testFlex : function()\n    {\n      var numRuns = 500;\n\n      for (var run=0; run<numRuns; run++)\n      {\n        var len = Math.round(Math.random() * 20) + 1;\n        var sumMin = 0;\n        var sumMax = 0;\n        var sumValue = 0;\n        var flexibles = {};\n\n        for (var j=0; j<len; j++)\n        {\n          var min = Math.round(Math.random() * 20);\n          var max = min + Math.round(Math.random() * 50) + 1;\n          var value = min + Math.round(Math.random() * (max - min));\n\n          sumMax += max;\n          sumMin += min;\n          sumValue += value;\n\n          flexibles[j] = {\n            min: min,\n            value: value,\n            max: max,\n            flex : Math.ceil(Math.random() * 5) // flex range from 1 .. 5\n          };\n        }\n\n        var availWidth = Math.round(Math.random() * 500);\n\n        var result = qx.ui.layout.Util.computeFlexOffsets(flexibles, availWidth, sumValue);\n\n        // check sum\n        var sum = 0;\n        for (var i in result)\n        {\n          var newSize = flexibles[i].value + result[i].offset;\n\n          sum += newSize;\n          this.assert(flexibles[i].min <= newSize);\n          this.assert(flexibles[i].max >= newSize);\n        }\n\n        if (availWidth !== sum) {\n          this.assert(sum == sumMin || sum == sumMax);\n        } else {\n          this.assertEquals(availWidth, sum);\n        }\n      }\n    },\n\n\n    /**\n     * Test whether flex distributes the value fair concerning the flex factors\n     */\n    testFlexFairness : function()\n    {\n      var numRuns = 500;\n\n      for (var run=0; run<numRuns; run++)\n      {\n        var len = Math.round(Math.random() * 20) + 1;\n        var sumMin = 0;\n        var sumMax = 0;\n        var sumValue = 0;\n        var sumWeights = 0;\n        var flexibles = {};\n\n        for (var j=0; j<len; j++)\n        {\n          var min = 0;\n          var max = 32000;\n          var value = Math.round(Math.random() * 20);\n\n          sumMax += max;\n          sumMin += min;\n          sumValue += value;\n\n          flexibles[j] = {\n            min: min,\n            value: value,\n            max: max,\n            flex : 1 + Math.ceil(Math.random() * 5) // flex range from 1 .. 5\n          };\n          sumWeights += flexibles[j].flex;\n        }\n\n        var availWidth = sumValue + Math.round(Math.random() * 100);\n        var result = qx.ui.layout.Util.computeFlexOffsets(flexibles, availWidth, sumValue);\n\n        var offsets = 0;\n        for (var i in result) {\n          offsets += result[i].offset;\n        }\n\n        if (sumWeights > 0)\n        {\n          var unit = offsets / sumWeights;\n          for (var j in result)\n          {\n            var error = result[j].offset - (unit * flexibles[j].flex);\n            this.assertTrue(Math.abs(error) <= 1, \"The error must be at most one pixel!\");\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}