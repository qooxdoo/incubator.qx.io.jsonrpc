{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/ui/tree/virtual/OneSelection.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "tree",
    "virtual",
    "SingleSelection",
    "members",
    "setUp",
    "setSelectionMode",
    "testSelectionWithClosedNode",
    "root",
    "createModelAndSetModel",
    "selection",
    "getSelection",
    "parent",
    "getChildren",
    "getItem",
    "itemToSelect",
    "openNode",
    "push",
    "assertEquals",
    "getLength",
    "selectionOnManager",
    "_manager",
    "length",
    "getLookupTable",
    "indexOf",
    "self",
    "assertEventFired",
    "closeNode",
    "e",
    "testSelectionWithClosedParentNode",
    "nodeToClose",
    "openNodeAndParents",
    "testRemoveItem",
    "removeAt",
    "dispose",
    "OneSelection"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.tree.virtual.OneSelection\",\n{\n  extend : qx.test.ui.tree.virtual.SingleSelection,\n\n  members :\n  {\n    setUp : function()\n    {\n      this.base(arguments);\n\n      this.tree.setSelectionMode(\"one\");\n    },\n\n\n    testSelectionWithClosedNode : function()\n    {\n      var root = this.createModelAndSetModel(2);\n      var selection = this.tree.getSelection();\n\n      var parent = root.getChildren().getItem(0);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNode(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree\n      this.assertEquals(1, selection.getLength(), \"On Tree\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree\");\n\n      // check selection from manager\n      var selectionOnManager = this.tree._manager.getSelection();\n      this.assertEquals(1, selectionOnManager.length);\n      this.assertEquals(this.tree.getLookupTable().indexOf(itemToSelect), selectionOnManager[0]);\n\n      var self = this;\n      this.assertEventFired(selection, \"change\",\n        function()\n        {\n          self.tree.closeNode(parent);\n        },\n        function(e)\n        {\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(1, selection.getLength(), \"Selection not reset on Tree\");\n          self.assertEquals(parent, selection.getItem(0), \"Selection not reset on Tree\");\n          self.assertEquals(1, selectionOnManager.length, \"Selection not reset on manager\");\n          self.assertEquals(self.tree.getLookupTable().indexOf(parent), selectionOnManager[0], \"Selection not reset on manager\");\n        }\n      );\n    },\n\n\n    testSelectionWithClosedParentNode : function()\n    {\n      var root = this.createModelAndSetModel(3);\n      var selection = this.tree.getSelection();\n\n      var nodeToClose = root.getChildren().getItem(0);\n      var parent = nodeToClose.getChildren().getItem(1);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNodeAndParents(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree\n      this.assertEquals(1, selection.getLength(), \"On Tree\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree\");\n\n      // check selection from manager\n      var selectionOnManager = this.tree._manager.getSelection();\n      this.assertEquals(1, selectionOnManager.length);\n      this.assertEquals(this.tree.getLookupTable().indexOf(itemToSelect), selectionOnManager[0]);\n\n      var self = this;\n      this.assertEventFired(selection, \"change\",\n        function()\n        {\n          self.tree.closeNode(nodeToClose);\n        },\n        function(e)\n        {\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(1, selection.getLength(), \"Selection not reset on Tree\");\n          self.assertEquals(nodeToClose, selection.getItem(0), \"Selection not reset on Tree\");\n          self.assertEquals(1, selectionOnManager.length, \"Selection not reset on manager\");\n          self.assertEquals(self.tree.getLookupTable().indexOf(nodeToClose), selectionOnManager[0], \"Selection not reset on manager\");\n        }\n      );\n    },\n\n    testRemoveItem : function()\n    {\n      var root = this.createModelAndSetModel(2);\n      var selection = this.tree.getSelection();\n\n      var parent = root.getChildren().getItem(0);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNode(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree before remove item\n      this.assertEquals(1, selection.getLength(), \"On Tree (setup)\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree (setup)\");\n\n      var self = this;\n      this.assertEventFired(selection, \"change\",\n        function()\n        {\n          // remove selected item\n          parent.getChildren().removeAt(2).dispose();\n        },\n        function(e)\n        {\n          // check selection from list\n          self.assertEquals(1, selection.getLength(), \"On Tree\");\n          self.assertEquals(parent, selection.getItem(0), \"On Tree\");\n\n          // check selection from manager\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(1, selectionOnManager.length, \"On Manager\");\n          self.assertEquals(self.tree.getLookupTable().indexOf(parent), selectionOnManager[0], \"On Manager\");\n        }\n      );\n    }\n  }\n});\n"
  ]
}