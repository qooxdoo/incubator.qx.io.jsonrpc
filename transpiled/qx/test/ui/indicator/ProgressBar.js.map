{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/ui/indicator/ProgressBar.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "__pb",
    "tearDown",
    "destroy",
    "testConstructor",
    "val",
    "max",
    "ui",
    "indicator",
    "ProgressBar",
    "assertIdentical",
    "getValue",
    "getMaximum",
    "dispose",
    "testValue",
    "setValue",
    "testLimitValueToZero",
    "testLimitValueToMaximum",
    "testMaximum",
    "setMaximum",
    "testDoNothingIfMaximumIsSetToZero",
    "testLimitMaximumToValue",
    "testChangeEvent",
    "that",
    "assertEventFired",
    "e",
    "getOldData",
    "getData",
    "testCompleteEvent",
    "testCompleteEventFiresOnTime",
    "assertEventNotFired",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\nqx.Class.define(\"qx.test.ui.indicator.ProgressBar\",\n{\n  extend : qx.dev.unit.TestCase,\n\n\n  members :\n  {\n    __pb : null,\n\n\n    tearDown : function() {\n      this.__pb.destroy();\n    },\n\n\n    testConstructor: function() {\n      //defaults\n      var val = 0, max = 100;\n\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.assertIdentical(val, this.__pb.getValue());\n      this.assertIdentical(max, this.__pb.getMaximum());\n\n      //value\n      val = 10;\n      this.__pb.dispose();\n      this.__pb = new qx.ui.indicator.ProgressBar(val);\n      this.assertIdentical(val, this.__pb.getValue());\n      this.assertIdentical(max, this.__pb.getMaximum());\n\n      //value, max\n      max = 120;\n      this.__pb.dispose();\n      this.__pb = new qx.ui.indicator.ProgressBar(val, max);\n      this.assertIdentical(val, this.__pb.getValue());\n      this.assertIdentical(max, this.__pb.getMaximum());\n\n      //limit value to max\n      this.__pb.dispose();\n      this.__pb = new qx.ui.indicator.ProgressBar(1200, 1000);\n      this.assertIdentical(1000, this.__pb.getValue());\n      this.assertIdentical(1000, this.__pb.getMaximum());\n    },\n\n\n    testValue: function() {\n      var val = 20;\n\n      this.__pb = new qx.ui.indicator.ProgressBar();\n\n      //returns exactly what was set\n      this.assertIdentical(val, this.__pb.setValue(val));\n\n      this.assertIdentical(val, this.__pb.getValue());\n    },\n\n    testLimitValueToZero: function() {\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.__pb.setValue(-20);\n      this.assertIdentical(0, this.__pb.getValue());\n    },\n\n    testLimitValueToMaximum: function() {\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.__pb.setValue(this.__pb.getMaximum() + 1);\n      this.assertIdentical(this.__pb.getMaximum(), this.__pb.getValue());\n    },\n\n\n    testMaximum: function() {\n      var max = 200;\n      this.__pb = new qx.ui.indicator.ProgressBar();\n\n      //returns exactly what was set\n      this.assertIdentical(max, this.__pb.setMaximum(max));\n\n      this.assertIdentical(max, this.__pb.getMaximum());\n    },\n\n    testDoNothingIfMaximumIsSetToZero: function() {\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.__pb.setMaximum(0);\n\n      //default is 100\n      this.assertIdentical(100, this.__pb.getMaximum());\n    },\n\n    testLimitMaximumToValue: function() {\n      var val = 20;\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.__pb.setValue(val);\n      this.__pb.setMaximum(val-1);\n      this.assertIdentical(val, this.__pb.getMaximum());\n    },\n\n    testChangeEvent : function() {\n      var that = this, val = 10;\n\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.assertEventFired(this.__pb, \"change\", function() {\n        that.__pb.setValue(val);\n      }, function(e){\n        that.assertIdentical(0, e.getOldData());\n        that.assertIdentical(val, e.getData());\n      }, \"event not fired.\");\n    },\n\n\n    testCompleteEvent : function() {\n      var that = this, max = this.__pb.getMaximum();\n\n      this.__pb = new qx.ui.indicator.ProgressBar();\n      this.assertEventFired(this.__pb, \"complete\", function() {\n        that.__pb.setValue(max);\n      }, null, \"event not fired.\");\n\n      max = 200;\n      this.__pb.dispose();\n      this.__pb = new qx.ui.indicator.ProgressBar(0, max);\n      this.assertEventFired(this.__pb, \"complete\", function() {\n        that.__pb.setValue(max);\n      }, null, \"event not fired.\");\n    },\n\n    testCompleteEventFiresOnTime: function() {\n      var that = this, max = 200;\n\n      this.__pb = new qx.ui.indicator.ProgressBar(0, max);\n\n      this.assertEventNotFired(this.__pb, \"complete\", function() {\n        that.__pb.setValue(max-1);\n      }, null, \"event fired.\");\n\n      this.assertEventFired(this.__pb, \"complete\", function() {\n        that.__pb.setValue(max);\n      }, null, \"event not fired.\");\n    }\n  }\n});\n\n"
  ]
}