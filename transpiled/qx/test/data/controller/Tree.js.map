{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/data/controller/Tree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MMock",
    "construct",
    "core",
    "Object",
    "setChildren",
    "data",
    "Array",
    "setAltChildren",
    "properties",
    "children",
    "check",
    "event",
    "nullable",
    "altChildren",
    "name",
    "init",
    "name2",
    "icon",
    "icon2",
    "color",
    "destruct",
    "getChildren",
    "setAutoDisposeItems",
    "dispose",
    "getAltChildren",
    "members",
    "__tree",
    "__model",
    "__controller",
    "__a",
    "__b",
    "__c",
    "setUp",
    "stub",
    "io",
    "ImageLoader",
    "ui",
    "tree",
    "Tree",
    "test",
    "TreeNode",
    "set",
    "push",
    "controller",
    "setIconPath",
    "tearDown",
    "getSandbox",
    "restore",
    "testRemoveBindingsRecursive",
    "remove",
    "cFolder",
    "getRoot",
    "assertNotNull",
    "assertEquals",
    "getLabel",
    "setName",
    "wait",
    "assertTrue",
    "isDisposed",
    "testModelChange",
    "setModel",
    "d",
    "model",
    "testFolderCreation",
    "testFolderLabelInitial",
    "testFolderLabelChangeName",
    "testFolderLabelPropertyChange",
    "setLabelPath",
    "testChildPush",
    "testChildPop",
    "pop",
    "assertUndefined",
    "testChildShift",
    "shift",
    "testChildUnshift",
    "unshift",
    "testTreeDeep",
    "testBig",
    "aa",
    "bb",
    "cc",
    "bbb",
    "AA",
    "testChildReverse",
    "reverse",
    "testChangeChildPath",
    "setChildPath",
    "testChangeTarget",
    "setTarget",
    "assertNull",
    "testChangeModel",
    "a",
    "b",
    "testIconPath",
    "getIcon",
    "testIconPathChange",
    "testIconChange",
    "setIcon",
    "testSelection",
    "setOpen",
    "addToSelection",
    "getSelection",
    "getItem",
    "length",
    "testSelectionBackMultiple",
    "setSelectionMode",
    "testSelectionAfterDelete",
    "temp",
    "splice",
    "contains",
    "testSelectInvisible",
    "testLabelOptions",
    "options",
    "converter",
    "getName2",
    "setLabelOptions",
    "testIconOptions",
    "getName",
    "setIconOptions",
    "testItemWithoutChildren",
    "endNode",
    "TreeEndNode",
    "testSetLateModel",
    "testSetLateTarget",
    "testSetLateTargetAndModel",
    "testSetLateChildPath",
    "testSetLateLabelPath",
    "testSetLateAll",
    "testDelegateConfigure",
    "delegate",
    "configureItem",
    "item",
    "setUserData",
    "setDelegate",
    "getUserData",
    "testDelegateConfigureLate",
    "testDelegateCreateLate",
    "createItem",
    "folder",
    "TreeFolder",
    "testDelegateCreateFirst",
    "destroy",
    "testDelegateBindLate",
    "bindItem",
    "id",
    "bindDefaultProperties",
    "bindProperty",
    "getTextColor",
    "setColor",
    "testDelegateBindFirst",
    "testDelegateBindPropertyReverse",
    "bindPropertyReverse",
    "getAppearance",
    "setAppearance",
    "setBackgroundColor",
    "getColor",
    "testDelegateAddItem",
    "queue",
    "Dispose",
    "flush",
    "testResetModel",
    "resetModel",
    "testChangeChildrenArray",
    "oldChildren",
    "assertNotUndefined",
    "testInheritedChildren",
    "MyTreeNode",
    "testRemoveEvents",
    "nodes",
    "i",
    "parseInt",
    "Math",
    "random",
    "removeAll",
    "testBindItemDouble",
    "self",
    "assertException",
    "Error",
    "g",
    "testBindItemDoubleReverse"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * @ignore(qx.test.MyTreeNode)\n * @ignore(qx.test.TreeEndNode)\n * @ignore(qx.test.TreeNode)\n */\n\nqx.Class.define(\"qx.test.data.controller.Tree\",\n{\n  extend : qx.dev.unit.TestCase,\n  include : qx.dev.unit.MMock,\n\n  construct : function() {\n    this.base(arguments);\n\n    // define a test class\n    qx.Class.define(\"qx.test.TreeNode\",\n    {\n      extend : qx.core.Object,\n\n      construct : function() {\n        this.base(arguments);\n\n        this.setChildren(new qx.data.Array());\n        this.setAltChildren(new qx.data.Array());\n      },\n\n      properties :\n      {\n        children : {\n          check : \"qx.data.Array\",\n          event : \"changeChild\",\n          nullable : true\n        },\n\n        altChildren : {\n          check : \"qx.data.Array\",\n          event : \"changeChild\",\n          nullable : true\n        },\n\n        name : {\n          check : \"String\",\n          init : \"root\",\n          event : \"changeName\"\n        },\n\n        name2 : {\n          check : \"String\",\n          init : \"root2\",\n          event : \"changeName\"\n        },\n\n        icon : {\n          check : \"String\",\n          event: \"changeIcon\",\n          nullable: true\n        },\n\n        icon2 : {\n          check : \"String\",\n          event: \"changeIcon2\",\n          nullable: true\n        },\n\n        color : {\n          check : \"String\",\n          event : \"changeColor\",\n          init: \"green\",\n          nullable: true\n        }\n      },\n\n      destruct : function()\n      {\n        if (this.getChildren()) {\n          this.getChildren().setAutoDisposeItems(true);\n          this.getChildren().dispose();\n        }\n        if (this.getAltChildren()) {\n          this.getAltChildren().setAutoDisposeItems(true);\n          this.getAltChildren().dispose();\n        }\n      }\n    });\n  },\n\n\n  members :\n  {\n\n    __tree: null,\n    __model: null,\n    __controller: null,\n\n    __a: null,\n    __b: null,\n    __c: null,\n\n    setUp : function()\n    {\n      // prevent the icon load error with this stub\n      this.stub(qx.io.ImageLoader, \"load\");\n\n      this.__tree = new qx.ui.tree.Tree();\n\n      // create a model\n      //        this.__model\n      //        /    |      \\\n      // this.__a  this.__b  this.__c\n      this.__model = new qx.test.TreeNode();\n\n      this.__a = new qx.test.TreeNode();\n      this.__a.set({\n        name: \"a\",\n        name2: \"a2\",\n        icon: \"icon a\",\n        icon2: \"icon a2\",\n        color: \"red\"\n      });\n\n      this.__b = new qx.test.TreeNode();\n      this.__b.set({\n       name: \"b\",\n       name2: \"b2\",\n       icon: \"icon b\",\n       icon2: \"icon b2\",\n       color: \"blue\"\n      });\n\n      this.__c = new qx.test.TreeNode();\n      this.__c.set({\n        name: \"c\",\n        name2: \"c2\",\n        icon: \"icon c\",\n        icon2: \"icon c2\",\n        color: \"white\"\n      });\n\n      this.__model.getChildren().push(this.__a, this.__b, this.__c);\n      this.__model.getAltChildren().push(this.__c, this.__b, this.__a);\n\n      // create the controller\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, \"children\", \"name\");\n      this.__controller.setIconPath(\"icon\");\n    },\n\n\n    tearDown : function()\n    {\n      this.__controller.dispose();\n      this.__model.dispose();\n      this.__tree.dispose();\n\n      // clear the stub\n      this.getSandbox().restore();\n    },\n\n\n    testRemoveBindingsRecursive: function(){\n      // reform the model tree\n      this.__model.getChildren().remove(this.__c);\n      this.__a.getChildren().push(this.__c);\n\n      var cFolder = this.__tree.getRoot().getChildren()[0].getChildren()[0];\n      this.assertNotNull(cFolder, \"Third node does not exist\");\n      this.assertEquals(\"c\", cFolder.getLabel());\n\n      // remove the model node\n      this.__a.getChildren().remove(this.__c);\n      // check if its disposed and the bindings have been removed\n      this.__c.setName(\"affe\");\n      this.assertEquals(\"c\", cFolder.getLabel());\n\n      // destroy is async --> wait for it!\n      this.wait(100, function() {\n        this.assertTrue(cFolder.isDisposed());\n      }, this);\n    },\n\n\n    testModelChange: function(){\n      // set model to null\n      this.__controller.setModel(null);\n\n      // set the same model again (forces the tree to redraw)\n      this.__controller.setModel(this.__model);\n\n      var d  = new qx.test.TreeNode();\n      d.setName(\"d\");\n\n      var model = this.__model;\n      // add the new model\n      this.wait(100, function() {\n        model.getChildren().push(d);\n      });\n\n      // d will be disposed by the model\n    },\n\n\n    testFolderCreation: function() {\n      // Test if the tree nodes exist\n      this.assertNotNull(this.__tree.getRoot(), \"Root node does not exist\");\n      this.assertNotNull(this.__tree.getRoot().getChildren()[0], \"First node does not exist\");\n      this.assertNotNull(this.__tree.getRoot().getChildren()[1], \"Second node does not exist\");\n      this.assertNotNull(this.__tree.getRoot().getChildren()[2], \"Third node does not exist\");\n    },\n\n\n    testFolderLabelInitial: function() {\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testFolderLabelChangeName: function() {\n      // change the names\n      this.__model.setName(\"ROOT\");\n      this.__a.setName(\"A\");\n      this.__b.setName(\"B\");\n      this.__c.setName(\"C\");\n      // check the initial Labels\n      this.assertEquals(\"ROOT\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"A\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"B\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"C\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testFolderLabelPropertyChange: function() {\n      // change the label path\n      this.__controller.setLabelPath(\"name2\");\n      // check the initial Labels\n      this.assertEquals(\"root2\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a2\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b2\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c2\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testChildPush: function() {\n      var d = new qx.test.TreeNode();\n      d.setName(\"d\");\n      var children = this.__model.getChildren();\n      children.push(d);\n\n      // Test if the tree nodes exist\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n      this.assertEquals(\"d\", this.__tree.getRoot().getChildren()[3].getLabel(), \"New node has a wrong name\");\n    },\n\n\n    testChildPop: function() {\n      var children = this.__model.getChildren();\n      children.pop();\n\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertUndefined(this.__tree.getRoot().getChildren()[2], \"There is still a third node!\");\n    },\n\n    testChildShift: function() {\n      var children = this.__model.getChildren();\n      children.shift();\n\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertUndefined(this.__tree.getRoot().getChildren()[2], \"There is still a third node!\");\n    },\n\n\n    testChildUnshift: function() {\n      var d = new qx.test.TreeNode();\n      d.setName(\"d\");\n      var children = this.__model.getChildren();\n      children.unshift(d);\n\n      // Test if the tree nodes exist\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"d\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[3].getLabel(), \"Fourth node has a wrong name\");\n    },\n\n\n    testTreeDeep: function() {\n      // remove all children\n      this.__model.getChildren().pop();\n      this.__model.getChildren().pop();\n      this.__model.getChildren().pop();\n\n      // create a straight tree\n      // this.__model\n      //      \\\n      //    this.__a\n      //        \\\n      //      this.__b\n      //          \\\n      //        this.__c\n      this.__model.getChildren().push(this.__a);\n      this.__a.getChildren().push(this.__b);\n      this.__b.getChildren().push(this.__c);\n\n      // test for the model\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[0].getChildren()[0].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[0].getChildren()[0].getChildren()[0].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testBig: function() {\n      // build up the model instances\n      var aa = new qx.test.TreeNode();\n      aa.setName(\"aa\");\n      var bb = new qx.test.TreeNode();\n      bb.setName(\"bb\");\n      var cc = new qx.test.TreeNode();\n      cc.setName(\"cc\");\n      var bbb = new qx.test.TreeNode();\n      bbb.setName(\"bbb\");\n      var AA = new qx.test.TreeNode();\n      AA.setName(\"AA\");\n\n      // tie the model together\n      //          this.__model\n      //          /     |      \\\n      //   this.__a  this.__b  this.__c\n      //     /  \\        |         |\n      //    aa  AA      bb        cc\n      //                 |\n      //                bbb\n      bb.getChildren().push(bbb);\n      this.__b.getChildren().push(bb);\n      this.__a.getChildren().push(aa, AA);\n      this.__c.getChildren().push(cc);\n\n      // check the initial Labels\n      // root layer\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      // first layer\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"a node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"b node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"c node has a wrong name\");\n      // second layer\n      this.assertEquals(\"aa\", this.__tree.getRoot().getChildren()[0].getChildren()[0].getLabel(), \"aa node has a wrong name\");\n      this.assertEquals(\"AA\", this.__tree.getRoot().getChildren()[0].getChildren()[1].getLabel(), \"AA node has a wrong name\");\n      this.assertEquals(\"bb\", this.__tree.getRoot().getChildren()[1].getChildren()[0].getLabel(), \"bb node has a wrong name\");\n      this.assertEquals(\"cc\", this.__tree.getRoot().getChildren()[2].getChildren()[0].getLabel(), \"cc node has a wrong name\");\n      // third layer\n      this.assertEquals(\"bbb\", this.__tree.getRoot().getChildren()[1].getChildren()[0].getChildren()[0].getLabel(), \"bbb node has a wrong name\");\n    },\n\n\n    testChildReverse: function() {\n      // reverse the children\n      this.__model.getChildren().reverse();\n      // check the labels\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[2].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[0].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testChangeChildPath: function() {\n      // change the child path\n      this.__controller.setChildPath(\"altChildren\");\n      // check the labels\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testChangeTarget: function() {\n      // create a new tree\n      var tree = new qx.ui.tree.Tree();\n\n      // set the new tree as target\n      this.__controller.setTarget(tree);\n\n      // check the new folders\n      this.assertEquals(\"a\", tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // check if the old tree is empty\n      this.assertNull(this.__tree.getRoot(), \"Former tree is not empty.\");\n      tree.dispose();\n    },\n\n\n    testChangeModel: function() {\n      // create a new model\n      //     this.__model\n      //        /    \\\n      // this.__a  this.__b\n      var model = new qx.test.TreeNode();\n      var a = new qx.test.TreeNode();\n      a.setName(\"A\");\n      var b = new qx.test.TreeNode();\n      b.setName(\"B\");\n      model.getChildren().push(a, b);\n\n      // set the new model\n      this.__controller.setModel(model);\n\n      // check the folders\n      this.assertEquals(\"A\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"B\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n\n      this.__controller.setModel(null);\n      model.dispose();\n    },\n\n\n    testIconPath: function() {\n      this.assertEquals(null, this.__tree.getRoot().getIcon(), \"Root node has a wrong icon\");\n      this.assertEquals(\"icon a\", this.__tree.getRoot().getChildren()[0].getIcon(), \"First node has a wrong icon\");\n      this.assertEquals(\"icon b\", this.__tree.getRoot().getChildren()[1].getIcon(), \"Second node has a wrong icon\");\n      this.assertEquals(\"icon c\", this.__tree.getRoot().getChildren()[2].getIcon(), \"Third node has a wrong icon\");\n    },\n\n\n    testIconPathChange: function() {\n      // change the icon path\n      this.__controller.setIconPath(\"icon2\");\n\n      // test the binding\n      this.assertEquals(null, this.__tree.getRoot().getIcon(), \"Root node has a wrong icon\");\n      this.assertEquals(\"icon a2\", this.__tree.getRoot().getChildren()[0].getIcon(), \"First node has a wrong icon\");\n      this.assertEquals(\"icon b2\", this.__tree.getRoot().getChildren()[1].getIcon(), \"Second node has a wrong icon\");\n      this.assertEquals(\"icon c2\", this.__tree.getRoot().getChildren()[2].getIcon(), \"Third node has a wrong icon\");\n    },\n\n    testIconChange: function() {\n      // change the icon values\n      this.__model.setIcon(\"AFFE\");\n      this.__a.setIcon(\"ICON A\");\n      this.__b.setIcon(\"ICON B\");\n      this.__c.setIcon(\"ICON C\");\n\n      // test the new icon values\n      this.assertEquals(\"AFFE\", this.__tree.getRoot().getIcon(), \"Root node has a wrong icon\");\n      this.assertEquals(\"ICON A\", this.__tree.getRoot().getChildren()[0].getIcon(), \"First node has a wrong icon\");\n      this.assertEquals(\"ICON B\", this.__tree.getRoot().getChildren()[1].getIcon(), \"Second node has a wrong icon\");\n      this.assertEquals(\"ICON C\", this.__tree.getRoot().getChildren()[2].getIcon(), \"Third node has a wrong icon\");\n    },\n\n\n    testSelection: function() {\n      // open the tree so that the selection can be done\n      this.__tree.getRoot().setOpen(true);\n      // select the first object\n      this.__tree.addToSelection(this.__tree.getRoot().getChildren()[0]);\n      // test the selection\n      this.assertEquals(this.__a, this.__controller.getSelection().getItem(0), \"Selection does not work.\");\n\n      // test for the length\n      this.assertEquals(1, this.__controller.getSelection().length, \"Selection length is wrong.\");\n\n      // select the second object\n      this.__tree.addToSelection(this.__tree.getRoot().getChildren()[1]);\n      // test the selection\n      this.assertEquals(this.__b, this.__controller.getSelection().getItem(0), \"Selection does not work.\");\n      // test for the length\n      this.assertEquals(1, this.__controller.getSelection().length, \"Selection length is wrong.\");\n    },\n\n\n    testSelectionBackMultiple: function() {\n      // open the tree so that the selection can be done\n      this.__tree.getRoot().setOpen(true);\n      // select the second and third object\n      this.__tree.setSelectionMode(\"multi\");\n\n      // add the some elements to the selection\n      this.__controller.getSelection().push(this.__a);\n      this.__controller.getSelection().push(this.__b);\n\n      // test the selection\n      this.assertEquals(this.__a, this.__controller.getSelection().getItem(0), \"Add to selection does not work.\");\n      this.assertEquals(this.__b, this.__controller.getSelection().getItem(1), \"Add to selection does not work.\");\n    },\n\n\n    testSelectionAfterDelete: function() {\n      // open the tree so that the selection can be done\n      this.__tree.getRoot().setOpen(true);\n\n      // add c to the selection\n      this.__controller.getSelection().push(this.__c);\n      // remove the c node\n      var temp = this.__model.getChildren().splice(2, 1);\n      temp.setAutoDisposeItems(true);\n      temp.dispose();\n      // check if the selection is empty\n      this.assertEquals(0, this.__controller.getSelection().length, \"Remove from selection does not work!\");\n\n      // add b to the selection\n      this.__controller.getSelection().push(this.__b);\n\n      // remove the first element of the controller 'this.__a'\n      temp = this.__model.getChildren().shift();\n      temp.dispose();\n\n      // check if the selected item in the list is \"b\"\n      this.assertTrue(this.__controller.getSelection().contains(this.__b), \"Selection array wrong!\");\n      this.assertEquals(\"b\", this.__tree.getSelection()[0].getLabel(), \"Remove from selection does not work!\");\n    },\n\n\n    testSelectInvisible: function() {\n      // add c to the selection\n      this.__controller.getSelection().push(this.__c);\n\n      // check if the selection worked\n      this.assertEquals(1, this.__controller.getSelection().length, \"Adding of an non visible element should not work.\");\n    },\n\n\n    testLabelOptions: function() {\n      // create the options\n      var options = {\n        converter: function(data, model) {\n          return data + model.getName2();\n        }\n      };\n\n      // create the controller\n      this.__controller.dispose();\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, \"children\", \"name\");\n      this.__controller.setLabelOptions(options);\n\n      // test the converter\n      this.assertEquals(\"rootroot2\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"aa2\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"bb2\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"cc2\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testIconOptions: function() {\n      // create the options\n      var options = {\n        converter: function(data, model) {\n          if (data != null) {\n             return data + model.getName();\n          }\n          return null;\n        }\n      };\n\n      // create the controller\n      this.__controller.dispose();\n\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, \"children\", \"name\");\n      this.__controller.setIconPath(\"icon\");\n      this.__controller.setIconOptions(options);\n\n      // test the converter\n      this.assertNull(this.__tree.getRoot().getIcon(), \"Root node has a wrong icon\");\n      this.assertEquals(\"icon aa\", this.__tree.getRoot().getChildren()[0].getIcon(), \"First node has a wrong icon\");\n      this.assertEquals(\"icon bb\", this.__tree.getRoot().getChildren()[1].getIcon(), \"Second node has a wrong icon\");\n      this.assertEquals(\"icon cc\", this.__tree.getRoot().getChildren()[2].getIcon(), \"Third node has a wrong icon\");\n    },\n\n\n    testItemWithoutChildren: function() {\n      // create new Object\n      qx.Class.define(\"qx.test.TreeEndNode\",\n      {\n        extend : qx.core.Object,\n\n        properties :\n        {\n          name : {\n            check : \"String\",\n            init : \"root\",\n            event : \"changeName\"\n          },\n\n          icon : {\n            check : \"String\",\n            event : \"changeIcon\",\n            nullable : true\n          }\n        }\n      });\n\n      var endNode = new qx.test.TreeEndNode();\n      endNode.setName(\"ENDE\");\n      this.__model.getChildren().push(endNode);\n\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n      this.assertEquals(\"ENDE\", this.__tree.getRoot().getChildren()[3].getLabel(), \"Fourth node has a wrong name\");\n    },\n\n\n    testSetLateModel: function() {\n      this.__controller.dispose();\n      // create the controller\n      this.__controller = new qx.data.controller.Tree(null, this.__tree, \"children\", \"name\");\n\n      this.__controller.setModel(this.__model);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testSetLateTarget: function() {\n      this.__controller.dispose();\n      // create the controller\n      this.__controller = new qx.data.controller.Tree(this.__model, null, \"children\", \"name\");\n\n      this.__controller.setTarget(this.__tree);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testSetLateTargetAndModel: function() {\n      this.__controller.dispose();\n      this.__controller = new qx.data.controller.Tree(null, null, \"children\", \"name\");\n\n      this.__controller.setTarget(this.__tree);\n      this.__controller.setModel(this.__model);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // redo the test and set the modeln and target in different order\n      this.__controller.dispose();\n      this.__controller = new qx.data.controller.Tree(null, null, \"children\", \"name\");\n\n      this.__controller.setModel(this.__model);\n      this.__controller.setTarget(this.__tree);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testSetLateChildPath: function() {\n      this.__controller.dispose();\n\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, null, \"name\");\n\n      this.__controller.setChildPath(\"children\");\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testSetLateLabelPath: function() {\n      this.__controller.dispose();\n\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, \"children\");\n\n      this.__controller.setLabelPath(\"name\");\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testSetLateAll: function() {\n      this.__controller.dispose();\n\n      this.__controller = new qx.data.controller.Tree();\n\n      // set the needed properties\n      this.__controller.setLabelPath(\"name\");\n      this.__controller.setChildPath(\"children\");\n      this.__controller.setModel(this.__model);\n      this.__controller.setTarget(this.__tree);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testDelegateConfigure: function() {\n      // create the delegate\n      var delegate = new qx.core.Object();\n      delegate.configureItem = function(item) {\n        item.setUserData(\"a\", true);\n      };\n\n      this.__controller.setDelegate(delegate);\n\n      // check the initial Labels\n      this.assertTrue(this.__tree.getRoot().getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[0].getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[1].getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[2].getUserData(\"a\"), \"Delegation not working.\");\n\n      this.__controller.setDelegate(null);\n      delegate.dispose();\n    },\n\n\n    testDelegateConfigureLate : function()\n    {\n      // clear up the setup\n      this.__controller.dispose();\n\n      var controller = new qx.data.controller.Tree(null, this.__tree, \"children\", \"name\");\n\n      var delegate = {\n        configureItem: function(item) {\n          item.setUserData(\"a\", true);\n        }\n      };\n\n      controller.setDelegate(delegate);\n      controller.setModel(this.__model);\n\n      // check the initial Labels\n      this.assertTrue(this.__tree.getRoot().getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[0].getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[1].getUserData(\"a\"), \"Delegation not working.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[2].getUserData(\"a\"), \"Delegation not working.\");\n\n      controller.dispose();\n    },\n\n\n    testDelegateCreateLate: function () {\n      var delegate = {\n        createItem : function() {\n          var folder = new qx.ui.tree.TreeFolder();\n          folder.setUserData(\"my\", true);\n          return folder;\n        }\n      };\n      this.__controller.setDelegate(delegate);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // check if the folders are the self created folders\n      this.assertTrue(this.__tree.getRoot().getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[0].getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[1].getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(this.__tree.getRoot().getChildren()[2].getUserData(\"my\"), \"Default folders found.\");\n    },\n\n\n    testDelegateCreateFirst: function () {\n      this.__controller.dispose();\n\n      this.__controller = new qx.data.controller.Tree();\n      var delegate = {\n        createItem : function() {\n          var folder = new qx.ui.tree.TreeFolder();\n          folder.setUserData(\"my\", true);\n          return folder;\n        }\n      };\n\n      var tree = new qx.ui.tree.Tree();\n      this.__controller.setDelegate(delegate);\n      this.__controller.setChildPath(\"children\");\n      this.__controller.setLabelPath(\"name\");\n      this.__controller.setModel(this.__model);\n      this.__controller.setTarget(tree);\n\n\n      // check the initial Labels\n      this.assertEquals(\"root\", tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // check if the folders are the self created folders\n      this.assertTrue(tree.getRoot().getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(tree.getRoot().getChildren()[0].getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(tree.getRoot().getChildren()[1].getUserData(\"my\"), \"Default folders found.\");\n      this.assertTrue(tree.getRoot().getChildren()[2].getUserData(\"my\"), \"Default folders found.\");\n\n      tree.destroy();\n    },\n\n\n    testDelegateBindLate: function () {\n      var delegate = {\n        bindItem : function(controller, item, id) {\n          controller.bindDefaultProperties(item, id);\n          controller.bindProperty(\"color\", \"textColor\", null, item, id);\n        }\n      };\n      this.__controller.setDelegate(delegate);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // check the names\n      this.assertEquals(\"green\", this.__tree.getRoot().getTextColor(), \"Root node has a wrong name\");\n      this.assertEquals(\"red\", this.__tree.getRoot().getChildren()[0].getTextColor(), \"First node has a wrong name\");\n      this.assertEquals(\"blue\", this.__tree.getRoot().getChildren()[1].getTextColor(), \"Second node has a wrong name\");\n      this.assertEquals(\"white\", this.__tree.getRoot().getChildren()[2].getTextColor(), \"Third node has a wrong name\");\n\n      this.__model.setColor(\"black\");\n      this.assertEquals(\"black\", this.__tree.getRoot().getTextColor(), \"Root node has a wrong name\");\n    },\n\n\n\n    testDelegateBindFirst: function () {\n      var delegate = {\n        bindItem : function(controller, item, id) {\n          controller.bindDefaultProperties(item, id);\n          controller.bindProperty(\"color\", \"textColor\", null, item, id);\n        }\n      };\n      var tree = new qx.ui.tree.Tree();\n      this.__controller.setDelegate(delegate);\n      this.__controller.setChildPath(\"children\");\n      this.__controller.setLabelPath(\"name\");\n      this.__controller.setModel(this.__model);\n      this.__controller.setTarget(tree);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n\n      // check the names\n      this.assertEquals(\"green\", tree.getRoot().getTextColor(), \"Root node has a wrong name\");\n      this.assertEquals(\"red\", tree.getRoot().getChildren()[0].getTextColor(), \"First node has a wrong name\");\n      this.assertEquals(\"blue\", tree.getRoot().getChildren()[1].getTextColor(), \"Second node has a wrong name\");\n      this.assertEquals(\"white\", tree.getRoot().getChildren()[2].getTextColor(), \"Third node has a wrong name\");\n\n      this.__model.setColor(\"black\");\n      this.assertEquals(\"black\", tree.getRoot().getTextColor(), \"Root node has a wrong name\");\n\n      tree.dispose();\n    },\n\n\n    testDelegateBindPropertyReverse: function () {\n      var delegate = {\n        bindItem : function(controller, item, id) {\n          controller.bindProperty(\"name\", \"appearance\", null, item, id);\n          controller.bindPropertyReverse(\"name\", \"appearance\", null, item, id);\n          controller.bindPropertyReverse(\"color\", \"backgroundColor\", null, item, id);\n        }\n      };\n      this.__controller.setDelegate(delegate);\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getAppearance(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getAppearance(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getAppearance(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getAppearance(), \"Third node has a wrong name\");\n\n      // check the reverse binding\n      this.__tree.getRoot().setAppearance(\"ROOT\");\n      this.assertEquals(\"ROOT\", this.__model.getName(), \"Reverse binding not ok!\");\n      this.__tree.getRoot().getChildren()[0].setBackgroundColor(\"#123456\");\n      this.assertEquals(\"#123456\", this.__a.getColor(), \"Reverse binding not ok!\");\n\n      // invoke a removing and setting of the bindings with the new bindItem\n      delegate.bindItem = function(controller, item, id) {\n        controller.bindProperty(\"name\", \"appearance\", null, item, id);\n      };\n      this.__controller.setDelegate(null);\n      this.__controller.setDelegate(delegate);\n\n      this.__tree.getRoot().setAppearance(\"123\");\n      this.assertEquals(\"ROOT\", this.__model.getName(), \"Removing not ok\");\n      this.__tree.getRoot().getChildren()[0].setBackgroundColor(\"#654321\");\n      this.assertEquals(\"#123456\", this.__a.getColor(), \"Removing not ok\");\n    },\n\n\n    testDelegateAddItem: function() {\n      var a = new qx.test.TreeNode();\n      a.setName(\"new\");\n      // set a delegate\n      this.__controller.setDelegate({\n        createItem : function() {\n          return new qx.ui.tree.TreeFolder();\n        }\n      });\n\n      // flush the dispose queue\n      qx.ui.core.queue.Dispose.flush();\n      // add the new model\n      this.__model.getChildren().push(a);\n    },\n\n\n    testResetModel: function() {\n      this.__controller.resetModel();\n      this.assertNull(this.__tree.getRoot(), \"Tree is not empty.\");\n    },\n\n\n    testChangeChildrenArray : function() {\n      // create the new children array\n      var children = new qx.data.Array();\n      var a = new qx.test.TreeNode();\n      a.setName(\"new\");\n      children.push(a);\n\n      var oldChildren = this.__a.getChildren();\n\n      // change the children array\n      //        this.__model\n      //        /    |      \\\n      // this.__a  this.__b  this.__c\n      //    |\n      //   a\n      this.__a.setChildren(children);\n\n      oldChildren.dispose();\n\n      // Test if the tree nodes exist\n      this.assertNotUndefined(this.__tree.getRoot(), \"Root node does not exist\");\n      this.assertNotUndefined(this.__tree.getRoot().getChildren()[0], \"First node does not exist\");\n      this.assertNotUndefined(this.__tree.getRoot().getChildren()[0].getChildren()[0], \"New node does not exist\");\n\n      // test if its the proper node\n      this.assertEquals(\"new\", this.__tree.getRoot().getChildren()[0].getChildren()[0].getLabel());\n    },\n\n\n    testInheritedChildren : function()\n    {\n      qx.Class.define(\"qx.test.MyTreeNode\", {\n        extend : qx.test.TreeNode\n      });\n\n      // init (copy of setUp)\n      this.__tree.dispose();\n      this.__model.dispose();\n      this.__a.dispose();\n      this.__b.dispose();\n      this.__c.dispose();\n      this.__tree = new qx.ui.tree.Tree();\n\n      // create a model\n      //        this.__model\n      //        /    |      \\\n      // this.__a  this.__b  this.__c\n      this.__model = new qx.test.MyTreeNode();\n\n      this.__a = new qx.test.MyTreeNode();\n      this.__a.set({\n        name: \"a\",\n        name2: \"a2\",\n        icon: \"icon a\",\n        icon2: \"icon a2\",\n        color: \"red\"\n      });\n\n      this.__b = new qx.test.MyTreeNode();\n      this.__b.set({\n       name: \"b\",\n       name2: \"b2\",\n       icon: \"icon b\",\n       icon2: \"icon b2\",\n       color: \"blue\"\n      });\n\n      this.__c = new qx.test.MyTreeNode();\n      this.__c.set({\n        name: \"c\",\n        name2: \"c2\",\n        icon: \"icon c\",\n        icon2: \"icon c2\",\n        color: \"white\"\n      });\n\n      this.__model.getChildren().push(this.__a, this.__b, this.__c);\n      this.__model.getAltChildren().push(this.__c, this.__b, this.__a);\n\n      // create the controller\n      this.__controller.dispose();\n      this.__controller = new qx.data.controller.Tree(this.__model, this.__tree, \"children\", \"name\");\n\n      // check the initial Labels\n      this.assertEquals(\"root\", this.__tree.getRoot().getLabel(), \"Root node has a wrong name\");\n      this.assertEquals(\"a\", this.__tree.getRoot().getChildren()[0].getLabel(), \"First node has a wrong name\");\n      this.assertEquals(\"b\", this.__tree.getRoot().getChildren()[1].getLabel(), \"Second node has a wrong name\");\n      this.assertEquals(\"c\", this.__tree.getRoot().getChildren()[2].getLabel(), \"Third node has a wrong name\");\n    },\n\n\n    testRemoveEvents : function()\n    {\n      // BUG #3566\n\n      var nodes = [];\n      for (var i = 0; i < 50; ++i)\n      {\n        nodes[i] = new qx.test.TreeNode();\n        if (i != 0) {\n          nodes[parseInt(Math.random() * i, 10)].getChildren().push(nodes[i]);\n        }\n      }\n\n      var tree = new qx.ui.tree.Tree();\n      var controller = new qx.data.controller.Tree(nodes[0], tree, \"children\", \"name\");\n\n      for (var i = 0; i < nodes.length; ++i) {\n        nodes[i].getChildren().removeAll(); // THIS THROWS AN EXCEPTION ON 2ND ELEMENT...\n      }\n\n      controller.dispose();\n      tree.dispose();\n\n      for (var i = 0; i < nodes.length; ++i) {\n        nodes[i].dispose();\n      }\n    },\n\n\n    testBindItemDouble: function(){\n      var delegate = {\n        bindItem : function(controller, item, id) {\n          controller.bindProperty(\"color\", \"textColor\", null, item, id);\n          controller.bindProperty(\"color\", \"textColor\", null, item, id);\n        }\n      };\n      var self = this;\n      this.assertException(function() {\n        self.__controller.setDelegate(delegate);\n      }, Error, /textColor/.g);\n    },\n\n\n    testBindItemDoubleReverse: function(){\n      var delegate = {\n        bindItem : function(controller, item, id) {\n          controller.bindPropertyReverse(\"color\", \"textColor\", null, item, id);\n          controller.bindPropertyReverse(\"color\", \"textColor\", null, item, id);\n        }\n      };\n      var self = this;\n      this.assertException(function() {\n        self.__controller.setDelegate(delegate);\n      }, Error, /textColor/.g);\n    }\n  }\n});\n"
  ]
}