{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/toolchain/VariantOptimization.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "members",
    "setUp",
    "require",
    "hasVariantsOptimized",
    "a",
    "core",
    "Environment",
    "getChecks",
    "get",
    "assertEquals",
    "select",
    "test",
    "toolchain",
    "VariantOptimization"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-20011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Thomas Herchenroeder (thron7)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.toolchain.VariantOptimization\",\n{\n  extend : qx.dev.unit.TestCase,\n  include: qx.dev.unit.MRequirements,\n\n  members :\n  {\n    setUp : function () {\n      this.require([\"variantsOptimized\"]);  // run the tests only when this code is variant-optimized\n    },\n\n    hasVariantsOptimized : function () {\n      return qx.core.Environment.get(\"qx.optimization.variants\");\n    },\n\n    /*\n     * 1.\n     *\n     * The next tests whether the generator optimized an 'if' statement, so that\n     * only the 'then' branch made it into the optimized code.\n     */\n    \"test If 'if' statement is pruned by the generator\": function () {\n      var a = 0;\n      /*\n       * \"qx.test.bool_true\" and \"qx.test.bool_false\" are custom environment\n       * keys that are set in config.json for the framework's AUT.\n       *\n       * Faking \"qx.test.bool_true\" to temporarily evaluate to false here.\n       * (Undone in the \"tearDown\" method).\n       */\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return false;};\n      /*\n       * The 'if' statement should be optimized by the generator, as the value\n       * of \"qx.test.bool_true\" is known at compile time, so that only \"a = 1\"\n       * makes it into the generated code.\n       *\n       * If the 'if' is not optimized, the .get call will actually be performed\n       * returning 'false' (see above), and the else branch will be executed.\n       */\n      if (qx.core.Environment.get(\"qx.test.bool_true\")) {\n        a = 1;\n      } else {\n        a = 2;\n      }\n      // The next will fail if the 'else' branch has been chosen, due to missing\n      // or wrong optimization.\n      this.assertEquals(1,a);\n    },\n\n    \"tearDown If 'if' statement is pruned by the generator\" : function () {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return true;};\n    },\n\n    /*\n     * 2.\n     *\n     * In the next test, we apply the same trick as above, to check that a .select\n     * expression has been optimized.\n     */\n    \"test If 'select' call is pruned by the generator\": function () {\n      // Fake \"qx.test.bool_true\" to be false at run time.\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return false;};\n      // Under optimization, the .select call will have been gone at run time.\n      var a = qx.core.Environment.select(\"qx.test.bool_true\", {\n        \"true\" : 1,\n        \"false\": 2\n      });\n      this.assertEquals(1,a);\n    },\n\n    \"tearDown If 'select' call is pruned by the generator\": function () {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return true;};\n   },\n\n    /*\n     * 3.\n     *\n     * Check if a simple .get call is optimized.\n     */\n    \"test If simple 'get' call is pruned by the generator\": function () {\n      // Fake \"qx.test.bool_true\" to be false at run time.\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return false;};\n      // Under optimization, the .get call will have been gone at run time.\n      var a = qx.core.Environment.get(\"qx.test.bool_true\");\n      this.assertEquals(true,a);\n    },\n\n    \"tearDown If simple 'get' call is pruned by the generator\": function () {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function(){return true;};\n    }\n  }\n});\n"
  ]
}