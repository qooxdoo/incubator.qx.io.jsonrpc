{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/io/rest/ResourceWithRemote.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "test",
    "io",
    "MRemoteTest",
    "members",
    "setUp",
    "require",
    "res",
    "rest",
    "Resource",
    "tearDown",
    "dispose",
    "url",
    "getUrl",
    "map",
    "addListener",
    "e",
    "resume",
    "assertEquals",
    "getData",
    "get",
    "wait",
    "getPhase",
    "getAction",
    "count",
    "previousResponse",
    "response",
    "assert",
    "length",
    "assertNotEquals",
    "poll",
    "responses",
    "push",
    "parseFloat",
    "longPoll",
    "ResourceWithRemote"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/* ************************************************************************\n\n\n************************************************************************ */\n/**\n *\n * @asset(qx/test/xmlhttp/random.php)\n * @asset(qx/test/xmlhttp/long_poll.php)\n * @asset(qx/test/xmlhttp/sample.txt)\n */\n\nqx.Class.define(\"qx.test.io.rest.ResourceWithRemote\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  include : [qx.dev.unit.MRequirements,\n             qx.test.io.MRemoteTest],\n\n  members :\n  {\n    setUp: function() {\n      this.require([\"http\"]);\n      this.res = new qx.io.rest.Resource();\n    },\n\n    tearDown: function() {\n      this.res.dispose();\n    },\n\n    \"test: invoke action and handle response\": function() {\n      // Handles GET\n      var url = this.getUrl(\"qx/test/xmlhttp/sample.txt\"),\n          res = this.res;\n\n      res.map(\"get\", \"GET\", url);\n      res.addListener(\"getSuccess\", function(e) {\n        this.resume(function() {\n          this.assertEquals(\"SAMPLE\", e.getData());\n        }, this);\n      }, this);\n\n      res.get();\n      this.wait();\n    },\n\n    \"test: invoke action and handle failure\": function() {\n      this.require([\"http\"]);\n\n      var url = \"/not-found\",\n          res = this.res;\n\n      res.map(\"get\", \"GET\", url);\n      res.addListener(\"error\", function(e) {\n        this.resume(function() {\n          this.assertEquals(\"statusError\", e.getPhase());\n          this.assertEquals(\"get\", e.getAction());\n        }, this);\n      }, this);\n\n      res.get();\n      this.wait();\n    },\n\n    \"test: poll action\": function() {\n      // Handles GET\n      var url = this.getUrl(\"qx/test/xmlhttp/random.php\"),\n          res = this.res,\n          count = 0,\n          previousResponse = \"\";\n\n      res.map(\"get\", \"GET\", url);\n\n      // Response headers must contain explicit cache control for this\n      // to work in IE\n      res.addListener(\"getSuccess\", function(e) {\n        var response = e.getData();\n        count++;\n\n        this.assert(response.length === 32, \"Response must be MD5\");\n        this.assertNotEquals(previousResponse, response,\n          \"Response must be different from previous\");\n        previousResponse = response;\n\n        if (count >= 10) {\n          this.resume();\n        }\n\n      }, this);\n\n      res.poll(\"get\", 100);\n      this.wait();\n    },\n\n    \"test: long poll\": function() {\n      var res = this.res,\n          url = this.getUrl(\"qx/test/xmlhttp/long_poll.php\"),\n          count = 0,\n          responses = [];\n\n      res.map(\"get\", \"GET\", url);\n      res.addListener(\"getSuccess\", function(e) {\n        var response = e.getData();\n        responses.push(response);\n\n        if (++count >= 5) {\n          this.resume(function() {\n            this.assert(parseFloat(responses[4]) > parseFloat(responses[0]),\n              \"Must increase\");\n          }, this);\n        }\n      }, this);\n\n      res.longPoll(\"get\");\n      this.wait();\n    }\n\n  }\n});\n"
  ]
}