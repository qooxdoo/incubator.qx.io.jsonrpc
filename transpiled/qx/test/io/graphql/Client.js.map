{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/test/io/graphql/Client.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "test",
    "io",
    "MAssert",
    "statics",
    "TEST_ENDPOINT",
    "construct",
    "client",
    "graphql",
    "Client",
    "constructor",
    "members",
    "runQuery",
    "query",
    "expected",
    "req",
    "protocol",
    "Request",
    "result",
    "send",
    "assertDeepEquals",
    "runQueryWithVariables",
    "variables",
    "setVariables",
    "e",
    "assertInstance",
    "exception",
    "Protocol",
    "assertEquals",
    "message",
    "Error",
    "Math",
    "random",
    "request",
    "response",
    "Transport"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.io.graphql.Client\",\n  {\n    extend : qx.dev.unit.TestCase,\n    include : [qx.test.io.MAssert],\n    statics: {\n      TEST_ENDPOINT: \"https://countries-274616.ew.r.appspot.com/\"\n    },\n    construct() {\n      this.base(arguments);\n      this.client = new qx.io.graphql.Client(this.constructor.TEST_ENDPOINT);\n    },\n    members : {\n\n      async runQuery(query, expected) {\n        let req = new qx.io.graphql.protocol.Request({query});\n        let result = await this.client.send(req);\n        this.assertDeepEquals(expected, result)\n      },\n\n      async runQueryWithVariables(query, variables, expected) {\n        let req = new qx.io.graphql.protocol.Request({query});\n        req.setVariables(variables);\n        let result = await this.client.send(req);\n        this.assertDeepEquals(expected, result)\n      },\n\n      async \"test: execute query\"() {\n        await this.runQuery(`query {\n          Country(name: \"Switzerland\") {\n            name, nativeName, flag {svgFile},\n            officialLanguages {name}\n          }\n        }`, {\n          \"Country\": [\n            {\n              \"name\": \"Switzerland\",\n              \"nativeName\": \"Schweiz\",\n              \"flag\": {\n                \"svgFile\": \"https://restcountries.eu/data/che.svg\"\n              },\n              \"officialLanguages\": [\n                {\n                  \"name\": \"Italian\"\n                },\n                {\n                  \"name\": \"French\"\n                },\n                {\n                  \"name\": \"German\"\n                }\n              ]\n            }\n          ]\n        });\n      },\n\n      async \"test: execute query with variables\"() {\n        await this.runQueryWithVariables(`query($country:String!) {\n         Country(name: $country) {\n           nativeName\n           officialLanguages { name }\n         }\n       }`, {\"country\": \"Belgium\"}, {\n          \"Country\": [{\n              \"nativeName\": \"BelgiÃ«\",\n              \"officialLanguages\": [\n                {\"name\": \"German\" },\n                {\"name\": \"French\" },\n                {\"name\": \"Dutch\" }\n              ]\n            }]\n        });\n      },\n\n      async \"test: expect protocol error\"() {\n        try {\n          await this.runQuery(`query { invalid}`);\n        } catch (e) {\n          this.assertInstance(e, qx.io.exception.Protocol);\n          this.assertEquals(\"Cannot query field \\\"invalid\\\" on type \\\"Query\\\".\", e.message);\n          return;\n        }\n        throw new Error(\"Query should throw qx.io.exception.Protocol\");\n      },\n\n      async \"test: expect transport error\"() {\n        try {\n          const client = new qx.io.graphql.Client(\"https://doesnotexist.org/\"+Math.random());\n          const query = \"query { doesnotmatter }\";\n          const request = new qx.io.graphql.protocol.Request({query});\n          const response = await client.send(request);\n        } catch (e) {\n          this.assertInstance(e, qx.io.exception.Transport);\n          return;\n        }\n        throw new Error(\"Query should throw qx.io.exception.Transport\");\n      }\n    }\n  });\n"
  ]
}