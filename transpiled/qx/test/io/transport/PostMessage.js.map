{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/test/io/transport/PostMessage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "setUp",
    "createWorker",
    "fn",
    "blob",
    "Blob",
    "toString",
    "type",
    "Worker",
    "URL",
    "createObjectURL",
    "worker",
    "evt",
    "self",
    "postMessage",
    "data",
    "transport",
    "io",
    "PostMessage",
    "message",
    "Promise",
    "resolve",
    "reject",
    "addListenerOnce",
    "assertEquals",
    "getData",
    "send",
    "then",
    "catch",
    "test"
  ],
  "mappings": ";;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAMAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kCAAhB,EAAoD;AAClDC,IAAAA,MAAM,EAAEN,EAAE,CAACO,GAAH,CAAOC,IAAP,CAAYC,QAD8B;AAGlDC,IAAAA,OAAO,EAAE;AAEPC,MAAAA,KAAK,GAAG;AACN;AACA,iBAASC,YAAT,CAAsBC,EAAtB,EAA0B;AACxB,cAAIC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,mBAAD,EAAsBF,EAAE,CAACG,QAAH,EAAtB,CAAT,EAA+C;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAA/C,CAAX;AACA,iBAAO,IAAIC,MAAJ,CAAWC,GAAG,CAACC,eAAJ,CAAoBN,IAApB,CAAX,CAAP;AACD,SALK,CAMN;;;AACA,cAAMO,MAAM,GAAGT,YAAY,CAACU,GAAG,IAAI;AACjCC,UAAAA,IAAI,CAACC,WAAL,CAAiBF,GAAG,CAACG,IAArB;AACD,SAF0B,CAA3B;AAGA,aAAKC,SAAL,GAAiB,IAAI1B,EAAE,CAAC2B,EAAH,CAAMD,SAAN,CAAgBE,WAApB,CAAgCP,MAAhC,CAAjB;AACD,OAbM;;AAeP,YAAM,iDAAN,GAA0D;AACxD,YAAIQ,OAAO,GAAG,cAAd;AACA,cAAM,IAAI7B,EAAE,CAAC8B,OAAP,CAAe,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxC,eAAKN,SAAL,CAAeO,eAAf,CAA+B,SAA/B,EAA0CX,GAAG,IAAI;AAC/C,iBAAKY,YAAL,CAAkBL,OAAlB,EAA2BP,GAAG,CAACa,OAAJ,EAA3B;AACD,WAFD;AAGA,eAAKT,SAAL,CAAeU,IAAf,CAAoBP,OAApB,EACGQ,IADH,CACQN,OADR,EAEGO,KAFH,CAESN,MAFT;AAGD,SAPK,CAAN;AAQD;;AAzBM;AAHyC,GAApD;AAzBAhC,EAAAA,EAAE,CAACuC,IAAH,CAAQZ,EAAR,CAAWD,SAAX,CAAqBE,WAArB,CAAiCzB,aAAjC,GAAiDA,aAAjD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de & contributors\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * Tests for the postMessage transport\n * @ignore(URL)\n * @ignore(Worker)\n * @ignore(self)\n */\nqx.Class.define(\"qx.test.io.transport.PostMessage\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n\n    setUp() {\n      // see https://medium.com/@dee_bloo/make-multithreading-easier-with-inline-web-workers-a58723428a42\n      function createWorker(fn) {\n        let blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });\n        return new Worker(URL.createObjectURL(blob));\n      }\n      // create echo server\n      const worker = createWorker(evt => {\n        self.postMessage(evt.data);\n      });\n      this.transport = new qx.io.transport.PostMessage(worker);\n    },\n\n    async \"test: send message to worker and check response\"() {\n      let message = \"Hello World!\";\n      await new qx.Promise((resolve, reject) => {\n        this.transport.addListenerOnce(\"message\", evt => {\n          this.assertEquals(message, evt.getData());\n        });\n        this.transport.send(message)\n          .then(resolve)\n          .catch(reject);\n      });\n    }\n  }\n});\n"
  ]
}