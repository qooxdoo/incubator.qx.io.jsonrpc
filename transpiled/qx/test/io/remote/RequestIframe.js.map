{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/io/remote/RequestIframe.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "io",
    "remote",
    "AbstractRequest",
    "members",
    "_createRequest",
    "url",
    "getUrl",
    "Request",
    "set",
    "fileUpload",
    "testAsynchronous",
    "isLocal",
    "needsPHPWarning",
    "completedCount",
    "i",
    "_requests",
    "length",
    "request",
    "emptyContent",
    "setParameter",
    "addListener",
    "e",
    "core",
    "Environment",
    "get",
    "getContent",
    "warn",
    "response",
    "lang",
    "Json",
    "parse",
    "getTarget",
    "assertEquals",
    "getParameter",
    "send",
    "that",
    "wait",
    "testAsynchronousSingle",
    "RequestIframe"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;;AAkBA;;;AAEA;;;;AAKAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,EAAR,CAAWC,MAAX,CAAkBC,eAD7B;AAGEC,IAAAA,OAAO,EACP;AACE;AACAC,MAAAA,cAAc,EAAG,0BAAW;AAC1B,YAAIC,GAAG,GAAG,KAAKC,MAAL,CAAY,uCAAZ,CAAV;AACA,eAAO,IAAId,EAAE,CAACQ,EAAH,CAAMC,MAAN,CAAaM,OAAjB,CAAyBF,GAAzB,EAA8B,KAA9B,EAAqC,YAArC,EAAmDG,GAAnD,CAAuD;AAC5DC,UAAAA,UAAU,EAAE;AADgD,SAAvD,CAAP;AAGD,OAPH;AASEC,MAAAA,gBAAgB,EAAG,4BACnB;AACE,YAAI,KAAKC,OAAL,EAAJ,EAAoB;AAClB,eAAKC,eAAL;AACA;AACD;;AAED,YAAIC,cAAc,GAAG,CAArB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,SAAL,CAAeC,MAAnC,EAA2CF,CAAC,EAA5C,EACA;AACE,cAAIG,OAAO,GAAG,KAAKF,SAAL,CAAeD,CAAf,CAAd;AAAA,cACII,YADJ;AAGAD,UAAAA,OAAO,CAACE,YAAR,CAAqB,MAArB,EAA6B,SAASL,CAAtC;AAEAG,UAAAA,OAAO,CAACG,WAAR,CAAoB,WAApB,EAAiC,UAASC,CAAT,EACjC;AACER,YAAAA,cAAc,GADhB,CAGE;AACA;AACA;AACA;AACA;;AACA,gBAAIrB,EAAE,CAAC8B,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,MAA2C,QAA3C,IACFH,CAAC,CAACI,UAAF,OAAmB,EADjB,IACuB,CAACP,YAD5B,EAC0C;AACxC,mBAAKQ,IAAL,CAAU,qEAAV;AACAR,cAAAA,YAAY,GAAG,IAAf;AACA;AACD;;AAED,gBAAI,CAACA,YAAL,EAAmB;AACjB,kBAAIS,QAAQ,GAAGnC,EAAE,CAACoC,IAAH,CAAQC,IAAR,CAAaC,KAAb,CAAmBT,CAAC,CAACI,UAAF,EAAnB,CAAf;AACAR,cAAAA,OAAO,GAAGI,CAAC,CAACU,SAAF,EAAV;AACA,mBAAKC,YAAL,CAAkBf,OAAO,CAACgB,YAAR,CAAqB,MAArB,CAAlB,EAAgDN,QAAQ,CAAC,MAAD,CAAxD;AACD;AACF,WArBD,EAqBG,IArBH;AAuBAV,UAAAA,OAAO,CAACiB,IAAR;AACD;;AAED,YAAIC,IAAI,GAAG,IAAX;AACA,aAAKC,IAAL,CAAU,IAAV,EAAgB,YAChB;AACED,UAAAA,IAAI,CAACH,YAAL,CAAkBlB,CAAlB,EAAqBD,cAArB;AACD,SAHD;AAID,OAxDH;AA0DEwB,MAAAA,sBAAsB,EAAE,kCAAW;AACjC,YAAIpB,OAAO,GAAG,KAAKF,SAAL,CAAe,CAAf,CAAd;AACAE,QAAAA,OAAO,CAACE,YAAR,CAAqB,MAArB,EAA6B,MAA7B;AACAF,QAAAA,OAAO,CAACG,WAAR,CAAoB,WAApB,EAAiC,UAASC,CAAT,EAAY;AAC3C,cAAIM,QAAQ,GAAGnC,EAAE,CAACoC,IAAH,CAAQC,IAAR,CAAaC,KAAb,CAAmBT,CAAC,CAACI,UAAF,EAAnB,CAAf;AACA,eAAKO,YAAL,CAAkB,MAAlB,EAA0BL,QAAQ,CAAC,MAAD,CAAlC;AACD,SAHD,EAGG,IAHH;AAIAV,QAAAA,OAAO,CAACiB,IAAR;AACD;AAlEH;AAJF,GADA;AAzBA1C,EAAAA,EAAE,CAACO,IAAH,CAAQC,EAAR,CAAWC,MAAX,CAAkBqC,aAAlB,CAAgC3C,aAAhC,GAAgDA,aAAhD",
  "sourcesContent": [
    "/* ************************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n  2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\n     MIT: https://opensource.org/licenses/MIT\n  See the LICENSE file in the project's top-level directory for details.\n\nAuthors:\n  * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/*\n*/\n/**\n *\n * @asset(qx/test/*)\n */\n\nqx.Class.define(\"qx.test.io.remote.RequestIframe\",\n{\n  extend : qx.test.io.remote.AbstractRequest,\n\n  members :\n  {\n    // Overridden\n    _createRequest : function() {\n      var url = this.getUrl(\"qx/test/xmlhttp/echo_form_request.php\");\n      return new qx.io.remote.Request(url, \"GET\", \"text/plain\").set({\n        fileUpload: true\n      });\n    },\n\n    testAsynchronous : function()\n    {\n      if (this.isLocal()) {\n        this.needsPHPWarning();\n        return;\n      }\n\n      var completedCount = 0;\n\n      for (var i = 0; i < this._requests.length; i++)\n      {\n        var request = this._requests[i],\n            emptyContent;\n\n        request.setParameter(\"test\", \"test\" + i);\n\n        request.addListener(\"completed\", function(e)\n        {\n          completedCount++;\n\n          // Skip test when response is empty. Occuring seemingly randomly\n          // in IE when many requests are made.\n          //\n          // May be due to timing issue showing under rare and obscure\n          // circumstances (clean cache, build variant, fresh browser window).\n          if (qx.core.Environment.get(\"engine.name\") === \"mshtml\" &&\n            e.getContent() === \"\" && !emptyContent) {\n            this.warn(\"Skipping test due to empty content in one of the request's response\");\n            emptyContent = true;\n            return;\n          }\n\n          if (!emptyContent) {\n            var response = qx.lang.Json.parse(e.getContent());\n            request = e.getTarget();\n            this.assertEquals(request.getParameter(\"test\"), response[\"test\"]);\n          }\n        }, this);\n\n        request.send();\n      }\n\n      var that = this;\n      this.wait(5000, function()\n      {\n        that.assertEquals(i, completedCount);\n      });\n    },\n\n    testAsynchronousSingle: function() {\n      var request = this._requests[0];\n      request.setParameter(\"test\", \"affe\");\n      request.addListener(\"completed\", function(e) {\n        var response = qx.lang.Json.parse(e.getContent());\n        this.assertEquals(\"affe\", response[\"test\"]);\n      }, this);\n      request.send();\n    }\n  }\n});\n"
  ]
}