{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/source/class/qx/test/io/jsonrpc/HttpTransport.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MMock",
    "test",
    "io",
    "jsonrpc",
    "MAssert",
    "members",
    "setUp",
    "sinon",
    "Sinon",
    "getSinon",
    "setUpRequest",
    "setUpFakeTransport",
    "protocol",
    "Request",
    "resetId",
    "req",
    "dispose",
    "request",
    "Xhr",
    "setUrl",
    "transport",
    "send",
    "restore",
    "injectStub",
    "prototype",
    "setUpFakeXhr",
    "getSandbox",
    "useFakeXMLHttpRequest",
    "setUpFakeServer",
    "response",
    "useFakeServer",
    "getServer",
    "respondWith",
    "autoRespond",
    "assertExceptionThrown",
    "exception",
    "lang",
    "Type",
    "isNumber",
    "isSubClassOf",
    "Exception",
    "Error",
    "message_out",
    "client",
    "Client",
    "errorCallback",
    "spy",
    "err",
    "assertEquals",
    "code",
    "assertInstance",
    "classname",
    "getPromise",
    "catch",
    "addListener",
    "evt",
    "getData",
    "wait",
    "Transport",
    "DUPLICATE_ID",
    "Protocol",
    "assertCalledTwice",
    "assertCalledThrice",
    "tearDown",
    "auth",
    "call",
    "key",
    "credentials",
    "authentication",
    "Bearer",
    "setAuthentication",
    "setRequestHeader",
    "getCall",
    "exec",
    "args",
    "Json",
    "stringify",
    "UNKNOWN_ID",
    "result",
    "message_in",
    "Result",
    "getId",
    "toString",
    "value",
    "then",
    "assertCalled",
    "Batch",
    "add",
    "addRequest",
    "addNotification",
    "INVALID_JSON",
    "NO_DATA",
    "spies",
    "batch",
    "i",
    "error",
    "sendBatch",
    "assertCalledWith",
    "message",
    "toObject",
    "assertDeepEquals",
    "shift",
    "sendNotification",
    "HttpTransport"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de & contributors\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * Tests for qx.io.jsonrpc.transport.Http\n * Based on qx.test.io.request.Xhr\n */\nqx.Class.define(\"qx.test.io.jsonrpc.HttpTransport\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  include : [\n    qx.dev.unit.MMock,\n    qx.test.io.jsonrpc.MAssert\n  ],\n\n  members : {\n\n    setUp() {\n      this.sinon = qx.dev.unit.Sinon.getSinon();\n      this.setUpRequest();\n      this.setUpFakeTransport();\n      qx.io.jsonrpc.protocol.Request.resetId();\n    },\n\n    setUpRequest: function () {\n      this.req && this.req.dispose();\n      this.req = new qx.io.request.Xhr();\n      this.req.setUrl(\"url\");\n    },\n\n    setUpFakeTransport: function () {\n      if (this.transport && this.transport.send.restore) {\n        return;\n      }\n      this.transport = this.injectStub(qx.io.request.Xhr.prototype, \"_createTransport\");\n      this.setUpRequest();\n    },\n\n    setUpFakeXhr: function () {\n      // Not fake transport\n      this.getSandbox().restore();\n      this.useFakeXMLHttpRequest();\n      this.setUpRequest();\n    },\n\n    /**\n     * Sets up the fake server and instructs it to send the given response(s)\n     * @param {String} response The server response to the first request\n     */\n    setUpFakeServer: function (response) {\n      // Not fake transport\n      this.getSandbox().restore();\n      this.useFakeServer();\n      this.setUpRequest();\n      this.getServer().respondWith(\n        \"POST\", /.*/,\n        [200, {\"Content-Type\": \"application/json; charset=utf-8\"}, response]\n      );\n      this.getServer().autoRespond = true;\n    },\n\n    /**\n     * Assert that the given exception is thrown on receiving the given result\n     * @param {String} response\n     * @param {Class|Number} exception If class, the exception class, which must\n     * be a subclass of qx.io.exception.Exception. If number, the error number\n     */\n    assertExceptionThrown: function (response, exception) {\n      if (!(qx.lang.Type.isNumber(exception) || qx.Class.isSubClassOf(exception, qx.io.exception.Exception))) {\n        throw new Error(\"Second argument must be a Number or a subclass of qx.io.exception.Exception\");\n      }\n      this.setUpFakeServer(response);\n      const message_out = new qx.io.jsonrpc.protocol.Request(\"foo\",[1,2,3]);\n      const client = new qx.io.jsonrpc.Client(\"http://jsonrpc\");\n      const errorCallback = this.spy(err => {\n        //console.warn(err);\n        if (qx.lang.Type.isNumber(exception)) {\n          if (!(err instanceof qx.io.exception.Exception)) {\n            throw err;\n          }\n          this.assertEquals(exception, err.code,`Error code does not match`);\n        } else {\n          this.assertInstance(err, exception,\n            `Exception class does not match. Expected ${exception.classname}, got ${err}.`);\n        }\n      });\n      // check message promise\n      message_out.getPromise().catch(errorCallback);\n      // check event\n      client.addListener(\"error\", evt => errorCallback(evt.getData()));\n      // check transport promise\n      client.send(message_out).catch(errorCallback);\n      this.wait(100, () => {\n        if (\n          // the request promise will not be called since the promise is already rejected\n          exception === qx.io.exception.Transport.DUPLICATE_ID\n          // or the send promise will not be rejected because we have a server-side error\n          || exception === qx.io.exception.Protocol) {\n          this.assertCalledTwice(errorCallback)\n        } else {\n          // the error handler will be called three times\n          this.assertCalledThrice(errorCallback)\n        }\n      });\n    },\n\n    tearDown: function () {\n      this.getSandbox().restore();\n      this.req.dispose();\n    },\n\n    resetId(){\n      qx.io.jsonrpc.protocol.Request.resetId();\n    },\n\n    //\n    // Auth, should be moved into qx.test.io.request.Xhr\n    //\n\n    \"test: Bearer authentication\": function () {\n      this.setUpFakeTransport();\n\n      var transport = this.transport, auth, call, key, credentials;\n\n      auth = new qx.io.request.authentication.Bearer(\"TOKEN\");\n      this.req.setAuthentication(auth);\n      this.req.send();\n\n      call = transport.setRequestHeader.getCall(1);\n      key = \"Authorization\";\n      credentials = /Bearer\\s(.*)/.exec(call.args[1])[1];\n      this.assertEquals(key, call.args[0]);\n      this.assertEquals(\"TOKEN\", credentials);\n    },\n\n    //\n    // JSON-RPC\n    //\n\n    \"test: throw on invalid response id\" : function() {\n      this.resetId();\n      var response = qx.lang.Json.stringify({\"jsonrpc\": \"2.0\", \"result\": 19, \"id\": 2});\n      this.assertExceptionThrown(response, qx.io.exception.Transport.UNKNOWN_ID);\n    },\n\n    \"test: throw on duplicate response id\" : function() {\n      this.resetId();\n      var response = qx.lang.Json.stringify([\n        {\"jsonrpc\": \"2.0\", \"result\": 19, \"id\": 1},\n        {\"jsonrpc\": \"2.0\", \"result\": 19, \"id\": 1}\n      ]);\n      this.assertExceptionThrown(response, qx.io.exception.Transport.DUPLICATE_ID);\n    },\n\n    \"test: call jsonrpc method and receive response with single result\" : async function() {\n      this.resetId();\n      let message_out = new qx.io.jsonrpc.protocol.Request(\"foo\", [\"bar\"]);\n      let result = \"Hello World!\";\n      let message_in  = new qx.io.jsonrpc.protocol.Result(message_out.getId(), result);\n      this.setUpFakeServer(message_in.toString());\n      const client = new qx.io.jsonrpc.Client(\"http://jsonrpc\");\n      let spy = this.spy(value => this.assertEquals(result, value));\n      message_out.getPromise().then(spy);\n      await client.send(message_out);\n      this.assertCalled(spy);\n    },\n\n    \"test: call jsonrpc method and receive batched response\" : async function() {\n      this.resetId();\n      let message_out = new qx.io.jsonrpc.protocol.Request(\"foo\", [\"bar\"]);\n      let result = \"Hello World!\";\n      let response = (new qx.io.jsonrpc.protocol.Batch())\n        .add(new qx.io.jsonrpc.protocol.Result(message_out.getId(), result))\n        .addRequest(\"foo\", [\"bar\"])\n        .addNotification(\"logout\")\n        .toString();\n      this.setUpFakeServer(response);\n      const client = new qx.io.jsonrpc.Client(\"http://jsonrpc\");\n      let spy = this.spy(value => this.assertEquals(result, value));\n      message_out.getPromise().then(spy);\n      await client.send(message_out);\n      this.assertCalled(spy);\n    },\n\n    \"test: call jsonrpc method and expect error on invalid reponse \"() {\n      this.assertExceptionThrown(\"helloworld!\", qx.io.exception.Transport.INVALID_JSON);\n    },\n\n    \"test: call jsonrpc method and expect error on invalid reponse - missing result\" () {\n      this.assertExceptionThrown(\"null\", qx.io.exception.Transport.NO_DATA);\n    },\n\n    \"test: call jsonrpc method and expect error response\"() {\n      this.resetId();\n      var response = qx.lang.Json.stringify({\"jsonrpc\": \"2.0\", \"error\" : {\"code\": -32600, \"message\": \"Division by zero!\"}, \"id\": 1});\n      this.assertExceptionThrown(response, qx.io.exception.Protocol);\n    },\n\n    \"test: send batched requests\"() {\n      this.resetId();\n      var response = qx.lang.Json.stringify([\n        {\"jsonrpc\": \"2.0\", \"result\": 7, \"id\": 1},\n        {\"jsonrpc\": \"2.0\", \"result\": \"foo\", \"id\": 2},\n        {\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32600, \"message\": \"Invalid Request\"}, \"id\": 3},\n        {\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32601, \"message\": \"Method not found\"}, \"id\": 4},\n        {\"jsonrpc\": \"2.0\", \"result\": [\"hello\", 5], \"id\": 5}]);\n      this.setUpFakeServer(response);\n      var client = new qx.io.jsonrpc.Client(\"http://jsonrpc\");\n      var spies = [];\n      var batch = new qx.io.jsonrpc.protocol.Batch();\n      for( var i=1; i < 6; i++) {\n        spies[i] = { result: this.spy(), error: this.spy() };\n        let request = new qx.io.jsonrpc.protocol.Request(\"someMethod\", []);\n        request.getPromise()\n          .then(spies[i].result)\n          .catch(spies[i].error);\n        batch.add(request);\n      }\n      client.sendBatch(batch).catch(err => {\n        this.assertInstance(err, qx.io.exception.Protocol);\n      });\n      this.wait(100, function(){\n        this.assertCalledWith(spies[1].result, 7);\n        this.assertCalledWith(spies[2].result, \"foo\");\n        this.assertCalled(spies[3].error);\n        this.assertCalled(spies[4].error);\n        this.assertCalledWith(spies[5].result, [\"hello\", 5]);\n      },this);\n    },\n\n    \"test: receive jsonrpc requests from server\" : function() {\n      this.resetId();\n      var response = [\n        {\"jsonrpc\": \"2.0\", \"method\": \"clientMethod\", \"params\": [\"foo\", \"bar\"], \"id\": 1},\n        {\"jsonrpc\": \"2.0\", \"method\": \"clientNotification\", \"params\": []}\n      ];\n      this.setUpFakeServer(qx.lang.Json.stringify(response));\n      var client = new qx.io.jsonrpc.Client(\"http://jsonrpc\");\n      var spy = this.spy();\n      client.addListener(\"incomingRequest\", (evt) => {\n        let message = evt.getData().toObject();\n        this.assertDeepEquals(response.shift(), message);\n        spy(message);\n      });\n      client.sendNotification(\"ping\");\n      this.wait(100, function(){\n        this.assertCalledTwice(spy);\n      },this);\n    }\n  }\n});\n"
  ]
}