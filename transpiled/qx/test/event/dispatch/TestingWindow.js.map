{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/event/dispatch/TestingWindow.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "members",
    "addEventListener",
    "type",
    "callback",
    "capture",
    "addListener",
    "attachEvent",
    "test",
    "event",
    "dispatch",
    "TestingWindow"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;;;AAkBAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,MADnB;AAGEC,IAAAA,MAAM,EACN;AACE,gBAAW,qBADb;AAEE,kBAAa;AAFf,KAJF;AAUEC,IAAAA,OAAO,EACP;AACEC,MAAAA,gBAAgB,EAAG,0BAASC,IAAT,EAAeC,QAAf,EAAyBC,OAAzB,EAAkC;AACnD,eAAO,KAAKC,WAAL,CAAiBH,IAAjB,EAAuBC,QAAvB,EAAiC,IAAjC,EAAuCC,OAAvC,CAAP;AACD,OAHH;AAKEE,MAAAA,WAAW,EAAG,qBAASJ,IAAT,EAAeC,QAAf,EAAyB;AACrC,eAAO,KAAKE,WAAL,CAAiBH,IAAjB,EAAuBC,QAAvB,CAAP;AACD;AAPH;AAXF,GADA;AAlBAb,EAAAA,EAAE,CAACiB,IAAH,CAAQC,KAAR,CAAcC,QAAd,CAAuBC,aAAvB,CAAqCjB,aAArC,GAAqDA,aAArD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.event.dispatch.TestingWindow\",\n{\n  extend : qx.core.Object,\n\n  events :\n  {\n    \"unload\" : \"qx.event.type.Event\",\n    \"onunload\" : \"qx.event.type.Event\"\n  },\n\n\n  members :\n  {\n    addEventListener : function(type, callback, capture) {\n      return this.addListener(type, callback, this, capture);\n    },\n\n    attachEvent : function(type, callback) {\n      return this.addListener(type, callback);\n    }\n  }\n});\n"
  ]
}