{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/dev/StackTrace.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "tearDown",
    "StackTrace",
    "FILENAME_TO_CLASSNAME",
    "FORMAT_STACKTRACE",
    "testGetStackTraceFromError",
    "core",
    "Environment",
    "get",
    "skip",
    "trace",
    "Error",
    "ex",
    "getStackTraceFromError",
    "Assert",
    "assertNotEquals",
    "length",
    "testGetStackTraceFromErrorQx",
    "qxErrorClasses",
    "type",
    "BaseError",
    "GlobalError",
    "WindowError",
    "RequirementError",
    "i",
    "l",
    "cls",
    "e",
    "toString",
    "indexOf",
    "assertNotIdentical",
    "testFilenameConverterDefault",
    "stack",
    "assertMatch",
    "testFilenameConverterCustom",
    "converter",
    "fileName",
    "assertString",
    "lang",
    "Function",
    "bind",
    "testFormatStackTrace",
    "formatter",
    "assertArray",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.dev.StackTrace\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    tearDown : function()\n    {\n      qx.dev.StackTrace.FILENAME_TO_CLASSNAME = null;\n      qx.dev.StackTrace.FORMAT_STACKTRACE = null;\n    },\n\n\n    testGetStackTraceFromError : function()\n    {\n      if (!qx.core.Environment.get(\"ecmascript.error.stacktrace\")) {\n        this.skip(\"Test skipped since the client doesn't provide stack traces\");\n      }\n      var trace = [];\n      try {\n        throw new Error(\"Expected exception\");\n      } catch(ex) {\n        trace = qx.dev.StackTrace.getStackTraceFromError(ex);\n      }\n      qx.core.Assert.assertNotEquals(0, trace.length, \"No stack trace information returned!\");\n    },\n\n\n    testGetStackTraceFromErrorQx : function()\n    {\n      if (!qx.core.Environment.get(\"ecmascript.error.stacktrace\")) {\n        this.skip(\"Test skipped since the client doesn't provide stack traces\");\n      }\n      var qxErrorClasses = [qx.type.BaseError, qx.core.GlobalError,\n        qx.core.WindowError, qx.dev.unit.RequirementError];\n      for (var i=0, l=qxErrorClasses.length; i<l; i++) {\n        var cls = qxErrorClasses[i];\n        var e;\n        if (cls.toString().indexOf(\"GlobalError\") > 0) {\n          e = new cls(new Error());\n        }\n        else {\n          e = new cls();\n        }\n        try {\n          throw e;\n        }\n        catch(ex) {\n          var trace = qx.dev.StackTrace.getStackTraceFromError(ex);\n          this.assertNotIdentical(0, trace.length, \"Didn't get stack trace from \" + cls.toString());\n        }\n      }\n    },\n\n\n    testFilenameConverterDefault : function()\n    {\n      var ex = new Error(\"Just a test\");\n      var stack = qx.dev.StackTrace.getStackTraceFromError(ex);\n      for (var i=0, l=stack.length; i<l; i++) {\n        this.assertMatch(stack[i], /((?:test\\.dev\\.StackTrace)|(?:dev\\.unit)|(?:testrunner\\.js)|(?:tests\\.js)|(?:qooxdoo-adapter\\.js))/);\n      }\n    },\n\n\n    testFilenameConverterCustom : function()\n    {\n      var converter = function(fileName) {\n        this.assertString(fileName);\n        return \"FOO\";\n      };\n\n      qx.dev.StackTrace.FILENAME_TO_CLASSNAME = qx.lang.Function.bind(converter, this);\n      var ex = new Error(\"Just a test\");\n      var stack = qx.dev.StackTrace.getStackTraceFromError(ex);\n      for (var i=0, l=stack.length; i<l; i++) {\n        this.assertMatch(stack[i], /FOO/);\n      }\n    },\n\n\n    testFormatStackTrace : function()\n    {\n      var formatter = function(trace) {\n        this.assertArray(trace);\n        for (var i=0, l=trace.length; i<l; i++) {\n          trace[i] = \"BAR \" + trace[i];\n        }\n        return trace;\n      };\n\n      qx.dev.StackTrace.FORMAT_STACKTRACE = qx.lang.Function.bind(formatter, this);\n      var ex = new Error(\"Just a test\");\n      var stack = qx.dev.StackTrace.getStackTraceFromError(ex);\n      for (var i=0, l=stack.length; i<l; i++) {\n        this.assertMatch(stack[i], /^BAR/);\n      }\n    }\n  }\n});\n"
  ]
}