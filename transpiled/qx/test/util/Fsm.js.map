{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/util/Fsm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testAddRemoveObject",
    "before",
    "intermediate",
    "after",
    "fsm",
    "obj",
    "obj2",
    "util",
    "FiniteStateMachine",
    "core",
    "Object",
    "lang",
    "Json",
    "stringify",
    "_getInternalData",
    "addObject",
    "removeObject",
    "assertEquals",
    "test",
    "Fsm"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.Fsm\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    /**\n     * Ensure that objects added with fsm.addObject() get cleaned up properly\n     * by fsm.removeObject()\n     */\n    testAddRemoveObject : function()\n    {\n      var             before;\n      var             intermediate;\n      var             after;\n      var             fsm;\n      var             obj;\n      var             obj2;\n\n      //\n      // Simple test: object with no groups\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj);\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before,\n                        after,\n                        \"simple add/remove (\" + intermediate + \")\");\n\n      //\n      // Single group\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n      //\n      // Multiple groups\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, [ \"group1\", \"group2\" ]);\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n\n      //\n      // Multiple objects in a single group\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n      obj2 = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Add another object\n      fsm.addObject(\"obj2\", obj2, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the second object\n      fsm.removeObject(\"obj2\");\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n      //\n      // Multiple objects in a single group, ensuring that state is correct\n      // after only one object is removed\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n      obj2 = new qx.core.Object();\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add another object\n      fsm.addObject(\"obj2\", obj2, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the second object\n      fsm.removeObject(\"obj2\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n    }\n  }\n});\n"
  ]
}