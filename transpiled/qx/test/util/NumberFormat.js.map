{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/util/NumberFormat.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "__nf",
    "__oldLocale",
    "setUp",
    "assertNotUndefined",
    "util",
    "format",
    "NumberFormat",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "setLocale",
    "tearDown",
    "dispose",
    "testNumberFormatConstructor",
    "wrongArgs",
    "undefined",
    "NaN",
    "Infinity",
    "correctArgs",
    "nf",
    "i",
    "len",
    "e",
    "fail",
    "length",
    "testNumberFormat",
    "assertEquals",
    "ninfinity",
    "infinity",
    "nan",
    "Math",
    "sqrt",
    "testNumberParse",
    "goodNumbers",
    "number",
    "parse",
    "badNumberStrings",
    "badNumberStr",
    "assertException",
    "Error",
    "testLocaleSwitch",
    "setMinimumFractionDigits",
    "setMaximumFractionDigits",
    "numberStr",
    "testNumberFormatChange",
    "setPostfix",
    "testParseWithPrefixOrPostfix",
    "spinner",
    "ui",
    "form",
    "Spinner",
    "prefix",
    "postfix",
    "numberFormat",
    "set",
    "maximumFractionDigits",
    "minimumFractionDigits",
    "setNumberFormat",
    "getChildControl",
    "setValue",
    "getValue",
    "destroy",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.NumberFormat\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    __nf : null,\n    __oldLocale : null,\n\n    setUp : function() {\n      this.assertNotUndefined(qx.util.format.NumberFormat);\n\n      this.__oldLocale = qx.locale.Manager.getInstance().getLocale();\n      qx.locale.Manager.getInstance().setLocale(\"de_DE\");\n\n      this.__nf = new qx.util.format.NumberFormat();\n    },\n\n\n    tearDown : function() {\n      this.__nf.dispose();\n      qx.locale.Manager.getInstance().setLocale(this.__oldLocale);\n    },\n\n    testNumberFormatConstructor: function() {\n      var wrongArgs = [null, undefined, NaN, Infinity, 1, {}, [], true],\n          correctArgs = [\"de_DE\"],\n          nf, i, len;\n\n      try {\n        nf = new qx.util.format.NumberFormat();\n      } catch (e) {\n        this.fail(\"Failed on an empty arguments list\");\n      }\n      try {\n        nf.dispose();\n      }\n      catch(e) {\n      }\n\n      try {\n        nf = new qx.util.format.NumberFormat(\"de_DE\", true);\n        this.fail(\"Did not fail on wrong arguments number\");\n      } catch (e) {\n\n      }\n      try {\n        nf.dispose();\n      }\n      catch(e) {\n      }\n\n      for (i = 0, len= wrongArgs.length; i < len; i += 1) {\n        try {\n          nf = new qx.util.format.NumberFormat(wrongArgs[i]);\n          this.fail(\"A wrong argument did not raise an error: \" + wrongArgs[i]);\n        } catch (e) {\n\n        }\n        try {\n          nf.dispose();\n        }\n        catch(e) {\n        }\n      }\n\n      for (i = 0, len= correctArgs.length; i < len; i += 1) {\n        try {\n          nf = new qx.util.format.NumberFormat(correctArgs[i]);\n        } catch (e) {\n          this.fail(\"A correct argument did raise an error: \" + correctArgs[i]);\n        }\n        try {\n          nf.dispose();\n        }\n        catch(e) {\n        }\n      }\n    },\n\n    testNumberFormat : function()\n    {\n      var nf = this.__nf;\n\n      // this failed due to a rounding error\n      this.assertEquals(\"1.000.000\", nf.format(1000000));\n\n      this.assertEquals(\"-1.000.000\", nf.format(-1000000));\n      this.assertEquals(\"-1.000.000\", nf.format(-1000000));\n\n      this.assertEquals(\"0\", nf.format(0));\n      this.assertEquals(\"0\", nf.format(-0));\n\n      this.assertEquals(\"12,12\", nf.format(12.12));\n\n      var ninfinity = -1 / 0;\n      this.assertEquals(\"-Infinity\", nf.format(ninfinity));\n\n      var infinity = 1 / 0;\n      this.assertEquals(\"Infinity\", nf.format(infinity));\n\n      var nan = Math.sqrt(-1);\n      this.assertEquals(\"NaN\", nf.format(nan));\n    },\n\n    testNumberParse : function()\n    {\n      var nf = this.__nf;\n\n      var goodNumbers = {\n        \"1000\" : 1000,\n        \"-0,02\" : -0.02,\n        \"0,02\" : 0.02,\n        \",02\" : 0.02,\n        \"-,02\" : -0.02,\n        \"+,02\" : 0.02,\n        \"-1.111.111,2\" : -1111111.2,\n        \"-1.000.000\" : -1000000,\n        \"+1.000,12\" : 1000.12\n      };\n\n      for (var number in goodNumbers) {\n        this.assertEquals(nf.parse(number), goodNumbers[number]);\n      }\n\n      var badNumberStrings = [\n        \"2hastalavista\",\n        \"2.3.4.5.6\",\n        \"12.10,10\",\n        \"10,1,12\"\n      ];\n\n      var badNumberStr;\n\n      for (var i=0; i<badNumberStrings.length; i++)\n      {\n        badNumberStr = badNumberStrings[i];\n\n        this.assertException(\n          function() {\n            nf.format(nf.parse(badNumberStr));\n          },\n          Error,\n          \"does not match the number format\",\n          \"testing if parsing fails on string '\" + badNumberStr + \"'\"\n        );\n      }\n\n    },\n\n    testLocaleSwitch : function()\n    {\n      var nf = this.__nf;\n      nf.setMinimumFractionDigits(0);\n      nf.setMaximumFractionDigits(2);\n\n      var numberStr = \"0.5\";\n\n      this.assertException(\n        function() {\n          nf.parse(numberStr);\n        },\n        Error,\n        \"does not match the number format\",\n        \"testing if parsing fails on string '\" + numberStr + \"'\"\n      );\n\n      qx.locale.Manager.getInstance().setLocale(\"en_US\");\n\n      this.assertEquals(0.5, nf.parse(\"0.5\"),\n        \"parsing failed after locale change\");\n    },\n\n    testNumberFormatChange : function()\n    {\n      var nf = this.__nf;\n      nf.setPostfix(\" %\");\n\n      var numberStr = \"5 Percent\";\n\n      this.assertException(\n        function() {\n          nf.parse(numberStr);\n        },\n        Error,\n        \"does not match the number format\",\n        \"testing if parsing fails on string '\" + numberStr + \"'\"\n      );\n\n      nf.setPostfix(\" Percent\");\n      this.assertEquals(5, nf.parse(numberStr),\n        \"parsing failed after number format change\");\n    },\n\n    testParseWithPrefixOrPostfix : function()\n    {\n      var spinner = new qx.ui.form.Spinner();\n      var prefix = \"$ \";\n      var postfix = \" €\";\n      var numberFormat = new qx.util.format.NumberFormat(\"de\").set({\n        maximumFractionDigits: 2,\n        minimumFractionDigits: 2,\n        prefix: prefix,\n        postfix: postfix\n      });\n\n      spinner.setNumberFormat(numberFormat);\n      spinner.getChildControl(\"textfield\").setValue(\"$ 1,23 €\");\n\n      this.assertEquals(prefix + \"1,23\" + postfix, spinner.getChildControl(\"textfield\").getValue());\n      \n      spinner.destroy();\n      numberFormat.dispose();\n    }\n  }\n});\n"
  ]
}