{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/util/StringSplit.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testSplit",
    "testCode",
    "undefined",
    "i",
    "length",
    "result",
    "eval",
    "assertArrayEquals",
    "ecmaSampleRe",
    "util",
    "StringSplit",
    "split",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Cross-Browser Split\n     http://stevenlevithan.com/demo/split.cfm\n\n     Copyright:\n       (c) 2006-2007, Steven Levithan <http://stevenlevithan.com>\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Steven Levithan\n\n************************************************************************ */\n\n\nqx.Class.define(\"qx.test.util.StringSplit\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    /**\n     * @lint ignoreDeprecated(eval)\n     */\n    testSplit : function()\n    {\n      var testCode = [\n        [\"qx.util.StringSplit.split('')\",                       [\"\"]],\n        [\"qx.util.StringSplit.split('', /./)\",                  [\"\"]],\n        [\"qx.util.StringSplit.split('', /.?/)\",                 []],\n        [\"qx.util.StringSplit.split('', /.??/)\",                []],\n        [\"qx.util.StringSplit.split('ab', /a*/)\",               [\"\", \"b\"]],\n        [\"qx.util.StringSplit.split('ab', /a*?/)\",              [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('ab', /(?:ab)/)\",           [\"\", \"\"]],\n        [\"qx.util.StringSplit.split('ab', /(?:ab)*/)\",          [\"\", \"\"]],\n        [\"qx.util.StringSplit.split('ab', /(?:ab)*?/)\",         [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('test', '')\",               [\"t\", \"e\", \"s\", \"t\"]],\n        [\"qx.util.StringSplit.split('test')\",                   [\"test\"]],\n        [\"qx.util.StringSplit.split('111', 1)\",                 [\"\", \"\", \"\", \"\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, 2)\",        [\"t\", \"e\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, -1)\",       [\"t\", \"e\", \"s\", \"t\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, undefined)\",[\"t\", \"e\", \"s\", \"t\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, null)\",     []],\n        [\"qx.util.StringSplit.split('test', /(?:)/, NaN)\",      []],\n        [\"qx.util.StringSplit.split('test', /(?:)/, true)\",     [\"t\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, '2')\",      [\"t\", \"e\"]],\n        [\"qx.util.StringSplit.split('test', /(?:)/, 'two')\",    []],\n        [\"qx.util.StringSplit.split('a', /-/)\",                 [\"a\"]],\n        [\"qx.util.StringSplit.split('a', /-?/)\",                [\"a\"]],\n        [\"qx.util.StringSplit.split('a', /-??/)\",               [\"a\"]],\n        [\"qx.util.StringSplit.split('a', /a/)\",                 [\"\", \"\"]],\n        [\"qx.util.StringSplit.split('a', /a?/)\",                [\"\", \"\"]],\n        [\"qx.util.StringSplit.split('a', /a??/)\",               [\"a\"]],\n        [\"qx.util.StringSplit.split('ab', /-/)\",                [\"ab\"]],\n        [\"qx.util.StringSplit.split('ab', /-?/)\",               [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('ab', /-??/)\",              [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('a-b', /-/)\",               [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('a-b', /-?/)\",              [\"a\", \"b\"]],\n        [\"qx.util.StringSplit.split('a-b', /-??/)\",             [\"a\", \"-\", \"b\"]],\n        [\"qx.util.StringSplit.split('a--b', /-/)\",              [\"a\", \"\", \"b\"]],\n        [\"qx.util.StringSplit.split('a--b', /-?/)\",             [\"a\", \"\", \"b\"]],\n        [\"qx.util.StringSplit.split('a--b', /-??/)\",            [\"a\", \"-\", \"-\", \"b\"]],\n        [\"qx.util.StringSplit.split('', /()()/)\",               []],\n        [\"qx.util.StringSplit.split('.', /()()/)\",              [\".\"]],\n        [\"qx.util.StringSplit.split('.', /(.?)(.?)/)\",          [\"\", \".\", \"\", \"\"]],\n        [\"qx.util.StringSplit.split('.', /(.??)(.??)/)\",        [\".\"]],\n        [\"qx.util.StringSplit.split('.', /(.)?(.)?/)\",          [\"\", \".\", undefined, \"\"]],\n        [\"qx.util.StringSplit.split('tesst', /(s)*/)\",          [\"t\", undefined, \"e\", \"s\", \"t\"]],\n        [\"qx.util.StringSplit.split('tesst', /(s)*?/)\",         [\"t\", undefined, \"e\", undefined, \"s\", undefined, \"s\", undefined, \"t\"]],\n        [\"qx.util.StringSplit.split('tesst', /(s*)/)\",          [\"t\", \"\", \"e\", \"ss\", \"t\"]],\n        [\"qx.util.StringSplit.split('tesst', /(s*?)/)\",         [\"t\", \"\", \"e\", \"\", \"s\", \"\", \"s\", \"\", \"t\"]],\n        [\"qx.util.StringSplit.split('tesst', /(?:s)*/)\",        [\"t\", \"e\", \"t\"]],\n        [\"qx.util.StringSplit.split('tesst', /(?=s+)/)\",        [\"te\", \"s\", \"st\"]],\n        [\"qx.util.StringSplit.split('test', 't')\",              [\"\", \"es\", \"\"]],\n        [\"qx.util.StringSplit.split('test', 'es')\",             [\"t\", \"t\"]],\n        [\"qx.util.StringSplit.split('test', /t/)\",              [\"\", \"es\", \"\"]],\n        [\"qx.util.StringSplit.split('test', /es/)\",             [\"t\", \"t\"]],\n        [\"qx.util.StringSplit.split('test', /(t)/)\",            [\"\", \"t\", \"es\", \"t\", \"\"]],\n        [\"qx.util.StringSplit.split('test', /(es)/)\",           [\"t\", \"es\", \"t\"]],\n        [\"qx.util.StringSplit.split('test', /(t)(e)(s)(t)/)\",   [\"\", \"t\", \"e\", \"s\", \"t\", \"\"]],\n        [\"qx.util.StringSplit.split('.', /(((.((.??)))))/)\",    [\"\", \".\", \".\", \".\", \"\", \"\", \"\"]],\n        [\"qx.util.StringSplit.split('.', /(((((.??)))))/)\",     [\".\"]]\n      ];\n\n      for (var i = 0; i < testCode.length; i++)\n      {\n        var result = eval(testCode[i][0]);\n        this.assertArrayEquals(testCode[i][1], result);\n      }\n\n      var ecmaSampleRe = /<(\\/)?([^<>]+)>/;\n      this.assertArrayEquals([\"A\", undefined, \"B\", \"bold\", \"/\", \"B\", \"and\", undefined, \"CODE\", \"coded\", \"/\", \"CODE\", \"\"],\n                             qx.util.StringSplit.split('A<B>bold</B>and<CODE>coded</CODE>', ecmaSampleRe));\n\n    }\n  }\n});\n\n"
  ]
}