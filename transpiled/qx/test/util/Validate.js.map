{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/util/Validate.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testNumber",
    "util",
    "Validate",
    "number",
    "assertException",
    "core",
    "ValidationError",
    "testEmail",
    "email",
    "testString",
    "string",
    "testUrl",
    "url",
    "testColor",
    "color",
    "testRange",
    "range",
    "testInArray",
    "inArray",
    "testRegex",
    "validator",
    "regExp",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n\nqx.Class.define(\"qx.test.util.Validate\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    testNumber : function()\n    {\n      //The number is valid if an error isn't raised\n      qx.util.Validate.number()(2);\n\n      //ValidationError raised if not a number\n      this.assertException(function() {\n        qx.util.Validate.number()(\"not a number\");\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.number(\"Custom Error Message\")(\"not a number\");\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testEmail : function()\n    {\n      //The email is valid if an error isn't raised\n      qx.util.Validate.email()(\"an@email.ro\");\n\n      //ValidationError raised if not an email\n      this.assertException(function() {\n        qx.util.Validate.email()(\"not an email\");\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.email(\"Custom Error Message\")(\"not an email\");\n      }, qx.core.ValidationError, \"Custom Error Message\");\n\n      //Valid since new domain extensions\n      qx.util.Validate.email()(\"foo@bar.qooxdoo\");\n\n      //'+' allowed (gmail aliases)\n      qx.util.Validate.email()(\"foobar+alias@qooxdoo.org\");\n    },\n\n    testString : function()\n    {\n      //The string is valid if an error isn't raised\n      qx.util.Validate.string()(\"I'm a string\");\n\n      //ValidationError raised if not a string\n      this.assertException(function() {\n        qx.util.Validate.string()(1);\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.string(\"Custom Error Message\")(1);\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testUrl : function()\n    {\n      //The url is valid if an error isn't raised\n      qx.util.Validate.url()(\"http://anurl.ro\");\n\n      //ValidationError raised if not an url\n      this.assertException(function() {\n        qx.util.Validate.url()(\"not an url\");\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.url(\"Custom Error Message\")(\"not an url\");\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testColor : function()\n    {\n      //The color value is valid if an error isn't raised\n      qx.util.Validate.color()(\"#667788\");\n\n      //ValidationError raised if not a color value\n      this.assertException(function() {\n        qx.util.Validate.color()(\"not a color value\");\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.color(\"Custom Error Message\")(\"not a color value\");\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testRange : function()\n    {\n      //The value is valid if it's in the range\n      qx.util.Validate.range(2,4)(3);\n\n      //ValidationError raised if the value isn't in the range\n      this.assertException(function() {\n        qx.util.Validate.range(2,4)(5);\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.range(2,4,\"Custom Error Message\")(5);\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testInArray : function()\n    {\n      //The value is valid if it's in the range\n      qx.util.Validate.inArray([2,3])(3);\n\n      //ValidationError raised if the value isn't in array\n      this.assertException(function() {\n        qx.util.Validate.inArray([2,3])(4);\n      }, qx.core.ValidationError);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.inArray([2,3],\"Custom Error Message\")(4);\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    },\n\n    testRegex : function()\n    {\n      var validator = qx.util.Validate.regExp(/^\\dand\\d$/);\n      validator(\"1and1\");\n\n      //ValidationError raised if the value isn't in array\n      this.assertException(function() {\n        validator(\"oneandone\");\n      }, qx.core.ValidationError, /oneandone/g);\n\n      //ValidationError raised if the value isn't in array\n      this.assertException(function() {\n        validator(\"xyz\");\n      }, qx.core.ValidationError, /xyz/g);\n\n      // ValidationError raised with a custom message\n      this.assertException(function() {\n        qx.util.Validate.regExp(/^\\dand\\d$/,\"Custom Error Message\")(\"oneandone\");\n      }, qx.core.ValidationError, \"Custom Error Message\");\n    }\n  }\n});\n\n"
  ]
}