{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/test/util/ResourceManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testHasResource",
    "ResourceManager",
    "util",
    "getInstance",
    "assertTrue",
    "has",
    "testGetData",
    "resourceData",
    "assertArrayEquals",
    "getData",
    "testGetImageWidth",
    "assertEquals",
    "getImageWidth",
    "testGetImageHeight",
    "testGetImageFormat",
    "getImageFormat",
    "testIsFontUri",
    "isFontUri",
    "assertFalse",
    "undefined",
    "testIsClippedImage",
    "getCombinedFormat",
    "testToUri",
    "resourceUri",
    "$$libraries",
    "core",
    "Environment",
    "get",
    "href",
    "window",
    "location",
    "substring",
    "lastIndexOf",
    "toUri",
    "test"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.ResourceManager\",\n{\n  extend : qx.dev.unit.TestCase,\n\n  members :\n  {\n    testHasResource : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertTrue(ResourceManager.has(\"qx/static/blank.gif\"));\n    },\n\n    testGetData : function() {\n      var resourceData = [ 1, 1, \"gif\", \"qx\" ];\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertArrayEquals(ResourceManager.getData(\"qx/static/blank.gif\"),\n                        resourceData, \"Resource data not identical\");\n    },\n\n    testGetImageWidth : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertEquals(ResourceManager.getImageWidth(\"qx/static/blank.gif\"), 1);\n    },\n\n    testGetImageHeight : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertEquals(ResourceManager.getImageWidth(\"qx/static/blank.gif\"), 1);\n    },\n\n    testGetImageFormat : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertEquals(ResourceManager.getImageFormat(\"qx/static/blank.gif\"), \"gif\");\n      this.assertEquals(ResourceManager.getImageFormat(\"@FontAwesome/heart\"), \"font\");\n    },\n\n    testIsFontUri : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertTrue(ResourceManager.isFontUri(\"@FontAwesome/heart\"));\n      this.assertFalse(ResourceManager.isFontUri(\"qx/static/blank.gif\"));\n      this.assertFalse(ResourceManager.isFontUri(undefined));\n    },\n\n    testIsClippedImage : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      this.assertFalse(ResourceManager.getCombinedFormat(\"qx/static/blank.gif\") != \"\");\n    },\n\n    testToUri : function()\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var resourceUri = qx.$$libraries[\"qx\"].resourceUri + \"/\" + \"qx/static/blank.gif\";\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n        qx.core.Environment.get(\"io.ssl\"))\n      {\n        var href = window.location.href;\n        resourceUri = href.substring(0, href.lastIndexOf(\"/\") + 1) + resourceUri;\n      }\n      this.assertEquals(resourceUri, ResourceManager.toUri(\"qx/static/blank.gif\"));\n    }\n  }\n});\n"
  ]
}