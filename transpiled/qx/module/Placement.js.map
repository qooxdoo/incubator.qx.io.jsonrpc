{
  "version": 3,
  "sources": [
    "/home/travis/build/qooxdoo/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/Placement.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "_getAxis",
    "mode",
    "util",
    "placement",
    "KeepAlignAxis",
    "BestFitAxis",
    "DirectAxis",
    "_computePlacement",
    "axes",
    "size",
    "area",
    "target",
    "offsets",
    "position",
    "left",
    "x",
    "computeStart",
    "width",
    "start",
    "end",
    "right",
    "top",
    "y",
    "height",
    "bottom",
    "_getPositionX",
    "edge",
    "align",
    "_getPositionY",
    "members",
    "placeTo",
    "modeX",
    "modeY",
    "qxWeb",
    "visible",
    "isRendered",
    "offsetWidth",
    "offsetHeight",
    "displayStyleValue",
    "visibilityStyleValue",
    "style",
    "display",
    "visibility",
    "setStyles",
    "module",
    "Placement",
    "getWidth",
    "getHeight",
    "parent",
    "getParents",
    "split",
    "newPosition",
    "targetLocation",
    "parentPositioning",
    "getStyle",
    "getOffset",
    "targetPos",
    "getPosition",
    "newLocation",
    "length",
    "offset",
    "borderTop",
    "parseInt",
    "borderLeft",
    "defer",
    "$attachAll"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * The Placement module provides a convenient way to align two elements relative\n * to each other using various pre-defined algorithms.\n *\n * @require(qx.util.placement.KeepAlignAxis#computeStart)\n * @require(qx.util.placement.BestFitAxis#computeStart)\n * @require(qx.util.placement.DirectAxis#computeStart)\n */\nqx.Bootstrap.define(\"qx.module.Placement\", {\n\n  statics: {\n    /**\n     * Returns the appropriate axis implementation for the given placement\n     * mode\n     *\n     * @param mode {String} Placement mode\n     * @return {Object} Placement axis class\n     */\n    _getAxis : function(mode)\n    {\n      switch(mode)\n      {\n        case \"keep-align\":\n          return qx.util.placement.KeepAlignAxis;\n\n        case \"best-fit\":\n          return qx.util.placement.BestFitAxis;\n\n        case \"direct\":\n        default:\n          return qx.util.placement.DirectAxis;\n      }\n    },\n\n    /**\n     * Returns the computed coordinates for the element to be placed\n     *\n     * @param axes {Map} Map with the keys <code>x</code> and <code>y</code>. Values\n     * are the axis implementations\n     * @param size {Map} Map with the keys <code>width</code> and <code>height</code>\n     * containing the size of the placement target\n     * @param area {Map} Map with the keys <code>width</code> and <code>height</code>\n     * containing the size of the two elements' common parent (available space for\n     * placement)\n     * @param target {Map} Location of the object to align the object to. This map\n     * should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     * and <code>bottom</code>\n     * @param offsets {Map} Map of offsets (top, right, bottom, left)\n     * @param position {Map} Map with the keys <code>x</code> and <code>y</code>,\n     * containing the type of positioning for each axis\n     * @return {Map} Map with the keys <code>left</code> and <code>top</code>\n     * containing the computed coordinates to which the element should be moved\n     */\n    _computePlacement : function(axes, size, area, target, offsets, position)\n    {\n      var left = axes.x.computeStart(\n        size.width,\n        {start: target.left, end: target.right},\n        {start: offsets.left, end: offsets.right},\n        area.width,\n        position.x\n      );\n\n      var top = axes.y.computeStart(\n        size.height,\n        {start: target.top, end: target.bottom},\n        {start: offsets.top, end: offsets.bottom},\n        area.height,\n        position.y\n      );\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n\n    /**\n     * Returns the X axis positioning type for the given edge and alignment\n     * values\n     *\n     * @param edge {String} edge value\n     * @param align {String} align value\n     * @return {String} X positioning type\n     */\n    _getPositionX : function(edge, align)\n    {\n      if (edge == \"left\") {\n        return \"edge-start\";\n      } else if (edge == \"right\") {\n        return \"edge-end\";\n      } else if (align == \"left\") {\n        return \"align-start\";\n      } else if (align == \"center\") {\n        return \"align-center\";\n      } else if (align == \"right\") {\n        return \"align-end\";\n      }\n    },\n\n\n    /**\n     * Returns the Y axis positioning type for the given edge and alignment\n     * values\n     *\n     * @param edge {String} edge value\n     * @param align {String} align value\n     * @return {String} Y positioning type\n     */\n    _getPositionY : function(edge, align)\n    {\n      if (edge == \"top\") {\n        return \"edge-start\";\n      } else if (edge == \"bottom\") {\n        return \"edge-end\";\n      } else if (align == \"top\") {\n        return \"align-start\";\n      } else if (align == \"middle\") {\n        return \"align-center\";\n      } else if (align == \"bottom\") {\n        return \"align-end\";\n      }\n    }\n  },\n\n  members :\n  {\n    /**\n     * Moves the first element in the collection, aligning it with the given\n     * target.\n     *\n     * <div>\n     * <strong>NOTE:</strong> The <code>placeTo</code> method also works for hidden\n     * elements. However, the visibility / display styles are only manipulated during\n     * the placement operation. As a result a previously hidden element <strong>stays hidden</strong>\n     * </div>\n     *\n     * <div>\n     * <strong>NOTE:</strong> If the target is changing its position due e.g. a DOM manipulation the\n     * placed element <strong>is not</strong> updated automatically. You have to call <code>placeTo</code>\n     * again to place the element to the target. The element is <strong>always</strong> positioned by using\n     * <code>position:absolute</code> independently on the chosen <code>position</code> and <code>mode</code>.\n     * </div>\n     *\n     * @attach{qxWeb}\n     * @param target {Element} Placement target\n     * @param position {String} Alignment of the object with the target, any of\n     * <code>\"top-left\"</code>, <code>\"top-center\"</code>, <code>\"top-right\"</code>,\n     * <code>\"bottom-left\"</code>, <code>\"bottom-center\"</code>, <code>\"bottom-right\"</code>,\n     * <code>\"left-top\"</code>, <code>\"left-middle\"</code>, <code>\"left-bottom\"</code>,\n     * <code>\"right-top\"</code>, <code>\"right-middle\"</code>, <code>\"right-bottom\"</code>\n     * @param offsets {Map?null} Map with the desired offsets between the two elements.\n     * Must contain the keys <code>left</code>, <code>top</code>,\n     * <code>right</code> and <code>bottom</code>\n     * @param modeX {String?\"direct\"} Horizontal placement mode. Valid values are:\n     *   <ul>\n     *   <li><code>direct</code>: place the element directly at the given\n     *   location.</li>\n     *   <li><code>keep-align</code>: if the element is partially outside of the\n     *   visible area, it is moved to the best fitting 'edge' and 'alignment' of\n     *   the target.\n     *   It is guaranteed the the new position attaches the object to one of the\n     *   target edges and that it is aligned with a target edge.</li>\n     *   <li><code>best-fit</code>: If the element is partially outside of the visible\n     *   area, it is moved into the view port, ignoring any offset and position\n     *   values.</li>\n     *   </ul>\n     * @param modeY {String?\"direct\"} Vertical placement mode. Accepts the same values as\n     *   the 'modeX' argument.\n     * @return {qxWeb} The collection for chaining\n     */\n    placeTo : function(target, position, offsets, modeX, modeY) {\n      if (!this[0] || !target) {\n        return this;\n      }\n\n      target = qxWeb(target);\n\n      // make sure the DOM elements are rendered so we can get the size of them.\n      // It's not necessary to move them out of the viewport - just out of the\n      // layout flow.\n      var visible = this.isRendered() && this[0].offsetWidth > 0 && this[0].offsetHeight > 0;\n      var displayStyleValue = null;\n      var visibilityStyleValue = null;\n      if (!visible) {\n        // do not use the computed style value otherwise we will mess up the styles\n        // when resetting them, since these styles might also be set via a CSS class.\n        displayStyleValue = this[0].style.display;\n        visibilityStyleValue = this[0].style.visibility;\n        this.setStyles({\n          position: \"absolute\",\n          visibility: \"hidden\",\n          display: \"block\"\n        });\n      }\n\n      var axes = {\n        x : qx.module.Placement._getAxis(modeX),\n        y : qx.module.Placement._getAxis(modeY)\n      };\n\n      var size = {\n        width: this.getWidth(),\n        height: this.getHeight()\n      };\n\n      var parent = this.getParents();\n      var area = {\n        width : parent.getWidth(),\n        height : parent.getHeight()\n      };\n\n      offsets = offsets || {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      };\n\n      var split = position.split(\"-\");\n      var edge = split[0];\n      var align = split[1];\n\n      var newPosition = {\n        x : qx.module.Placement._getPositionX(edge,align),\n        y : qx.module.Placement._getPositionY(edge,align)\n      };\n\n      var targetLocation;\n      var parentPositioning = parent.getStyle(\"position\");\n      if (parentPositioning == \"relative\" || parentPositioning == \"static\") {\n        targetLocation = target.getOffset();\n      } else {\n        var targetPos = target.getPosition();\n        targetLocation = {\n          top: targetPos.top,\n          bottom: targetPos.top + target.getHeight(),\n          left: targetPos.left,\n          right: targetPos.left + target.getWidth()\n        };\n      }\n\n      var newLocation = qx.module.Placement._computePlacement(axes, size, area, targetLocation, offsets, newPosition);\n\n      while (parent.length > 0) {\n        if (parent.getStyle(\"position\") == \"relative\" ) {\n          var offset = parent.getOffset();\n          var borderTop = parseInt(parent.getStyle(\"border-top-width\")) || 0;\n          var borderLeft = parseInt(parent.getStyle(\"border-left-width\")) || 0;\n          newLocation.left -= (offset.left + borderLeft);\n          newLocation.top -= (offset.top + borderTop);\n          parent = [];\n        } else {\n          parent = parent.getParents();\n        }\n      }\n\n      // Reset the styles to hide the element if it was previously hidden\n      if (!visible) {\n        this[0].style.display = displayStyleValue;\n        this[0].style.visibility = visibilityStyleValue;\n      }\n\n      this.setStyles({\n        position: \"absolute\",\n        left: newLocation.left + \"px\",\n        top: newLocation.top + \"px\"\n      });\n\n      return this;\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachAll(this);\n  }\n});\n"
  ]
}