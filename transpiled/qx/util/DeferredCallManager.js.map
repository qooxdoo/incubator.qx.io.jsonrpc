{
  "version": 3,
  "sources": [
    "/home/runner/work/incubator.qx.io.jsonrpc/incubator.qx.io.jsonrpc/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/util/DeferredCallManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "implement",
    "IDisposable",
    "construct",
    "__calls",
    "__timeoutWrapper",
    "lang",
    "Function",
    "bind",
    "__timeout",
    "__hasCalls",
    "members",
    "__timeoutId",
    "__currentQueue",
    "schedule",
    "deferredCall",
    "window",
    "setTimeout",
    "callKey",
    "toHashCode",
    "refreshTimeout",
    "cancel",
    "isEmpty",
    "clearTimeout",
    "event",
    "GlobalError",
    "observeMethod",
    "clone",
    "key",
    "call",
    "destruct",
    "util",
    "DeferredCallManager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class manages the timer used for deferred calls. All\n * {@link qx.util.DeferredCall} instances use the single timer from this class.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.util.DeferredCallManager\",\n{\n  extend : qx.core.Object,\n  type : \"singleton\",\n  implement : [ qx.core.IDisposable ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.__calls = {};\n    this.__timeoutWrapper = qx.lang.Function.bind(this.__timeout, this);\n    this.__hasCalls = false;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __timeoutId : null,\n    __currentQueue : null,\n    __calls : null,\n    __hasCalls : null,\n    __timeoutWrapper : null,\n\n\n    /**\n     * Schedule a deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    schedule : function(deferredCall)\n    {\n      if (this.__timeoutId == null)\n      {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled\n      if (this.__currentQueue && this.__currentQueue[callKey]) {\n        return;\n      }\n\n      this.__calls[callKey] = deferredCall;\n      this.__hasCalls = true;\n    },\n\n    /**\n     * Refresh the timeout if the current one is not active anymore.\n     * This is a very special case which can happen in unit tests using\n     * fakeTimers, which overrides the window.setTimeout function (amongst others)\n     * after restoring the sinon sandbox the timeout must be refreshed otherwise\n     * DeferredCalls would never fire.\n     */\n    refreshTimeout : function() {\n      if (this.__timeoutId !== null) {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n    },\n\n    /**\n     * Cancel a scheduled deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    cancel : function(deferredCall)\n    {\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled -> remove it from the current queue\n      if(this.__currentQueue && this.__currentQueue[callKey])\n      {\n        this.__currentQueue[callKey] = null;\n        return;\n      }\n\n      delete this.__calls[callKey];\n\n      // stop timer if no other calls are waiting\n      if(qx.lang.Object.isEmpty(this.__calls) && this.__timeoutId != null)\n      {\n        window.clearTimeout(this.__timeoutId);\n        this.__timeoutId = null;\n      }\n    },\n\n\n    /**\n     * Helper function for the timer.\n     *\n     * @signature function()\n     */\n    __timeout : qx.event.GlobalError.observeMethod(function()\n    {\n      this.__timeoutId = null;\n\n      // the queue may change while doing the flush so we work on a copy of\n      // the queue and loop while the queue has any entries.\n      while(this.__hasCalls)\n      {\n        this.__currentQueue = qx.lang.Object.clone(this.__calls);\n        this.__calls = {};\n        this.__hasCalls = false;\n\n        for (var key in this.__currentQueue)\n        {\n          var call = this.__currentQueue[key];\n          if (call)\n          {\n            this.__currentQueue[key] = null;\n            call.call();\n          }\n        }\n      }\n\n      this.__currentQueue = null;\n    })\n\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (this.__timeoutId != null) {\n      window.clearTimeout(this.__timeoutId);\n    }\n    this.__timeoutWrapper = this.__calls = null;\n  }\n});\n"
  ]
}